<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>
<#
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    MetadataTools ef = new MetadataTools(this);
	 
    string inputFile = @"..\..\SeatDomain\Dal\SeatWebDataModel.edmx";
    MetadataWorkspace metadataWorkspace = null;
    bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
    EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
    string namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
    
    EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {        
	if(entity.Abstract) continue;
        string view_model=entity.Name+"ViewModel";
        string view_model_name=view_model+".cs";
        string current_directory=Host.ResolvePath("");
        string[] similars=Directory.GetFiles(current_directory,view_model_name, SearchOption.AllDirectories);
		        if(similars.Length==0 ||
            (similars.Length==1 && String.Compare(similars[0],current_directory+"\\"+ view_model_name,true)==0))
        {
            fileManager.StartNewFile(view_model_name);
            BeginNamespace(namespaceName, code);
            var pk= entity.Properties.Where(x=>ef.IsKey(x)).First();

			var metaIdentity=pk.MetadataProperties.Where(x=>x.Value.ToString().Equals("Identity") && x.Name.EndsWith("StoreGeneratedPattern")).FirstOrDefault();
			bool isIdentity=metaIdentity!=null;

			var version= entity.Properties.Where(x=>
			x.MetadataProperties!=null && x.MetadataProperties.Any(y=>y.Name=="http://schemas.microsoft.com/ado/2009/02/edm/annotation:StoreGeneratedPattern")
			 && x.TypeUsage.Facets!=null && x.TypeUsage.Facets.Any(y=>y.Name=="FixedLength" && (bool)y.Value)
			 && x.TypeUsage.Facets.Any(y=>y.Name=="MaxLength" && (int)y.Value==8)
			 ).FirstOrDefault();
#>
using Exir.Framework.Uie.Adapter;
using SeatDomain.Models;
using System;
 public partial class <#= code.Escape(entity.Name)#>ViewModel : EntityViewModel<<#= code.Escape(entity.Name)#>>
    {
	    public <#= code.Escape(entity.Name)#>ViewModel(object obj,string pk,Type pkType,string version)
            : base(obj,nameof(<#=entity.Name#>.<#=pk#>),typeof(<#=code.Escape(pk.TypeUsage)#>),<#= version!=null?"\""+version.Name+"\"":"null"#>, isKeyIdentity:<#=isIdentity.ToString().ToLower()#>)
        {
        }
        public <#= code.Escape(entity.Name)#>ViewModel(<#= code.Escape(entity.Name)#> obj)
            : base(obj)
        {
        }
}

<#  
        EndNamespace(namespaceName);    
} 
   
	 }
	 fileManager.Process(); 
#>

       

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using Exir.Framework.DataAccess;
using Exir.Framework.Service;
using System.Data.Entity;
using Spring.Context.Support;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>