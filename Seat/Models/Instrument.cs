//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Seat.Models
{
            public interface IInstrument{
    
     long InsCode{
      get;
      set;
      }
    
     string InstrumentID{
      get;
      set;
      }
    
     string LatinSymbol{
      get;
      set;
      }
    
     string LatinName{
      get;
      set;
      }
    
     string CompanyCode{
      get;
      set;
      }
    
     string Symbol{
      get;
      set;
      }
    
     string Name{
      get;
      set;
      }
    
     string CIsin{
      get;
      set;
      }
    
     int DEven{
      get;
      set;
      }
    
     byte Flow{
      get;
      set;
      }
    
     string LSoc30{
      get;
      set;
      }
    
     string CGdSVal{
      get;
      set;
      }
    
     string CGrValCot{
      get;
      set;
      }
    
     string YMarNSC{
      get;
      set;
      }
    
     string CComVal{
      get;
      set;
      }
    
     string CSecVal{
      get;
      set;
      }
    
     string CSoSecVal{
      get;
      set;
      }
    
     string YVal{
      get;
      set;
      }
    
     double Eps{
      get;
      set;
      }
    
     double Pe{
      get;
      set;
      }
    
     byte Type{
      get;
      set;
      }
    
     long BVol{
      get;
      set;
      }
    
     int Cs{
      get;
      set;
      }
    
     long Z{
      get;
      set;
      }
    
        TrackableCollection<ClientType> ClientTypes{get;set;}
        TrackableCollection<CodalMessage> CodalMessages{get;set;}
        TrackableCollection<History> Histories{get;set;}
        TrackableCollection<BestLimit> BestLimits{get;set;}
        TrackableCollection<Trade> Trades{get;set;}
        TrackableCollection<ShareHolderChange> ShareHolderChanges{get;set;}
    }// interface
    
    [Table("Instruments")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(InsCode)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(ClientType))]
    [KnownType(typeof(CodalMessage))]
    [KnownType(typeof(History))]
    [KnownType(typeof(BestLimit))]
    [KnownType(typeof(Trade))]
    [KnownType(typeof(ShareHolderChange))]
    public partial class Instrument:IEntityBase, IInstrument,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_insCode,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'InsCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [MaxLength(12)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string InstrumentID
        {
            get { return _instrumentID; }
            set
            {
                if (_instrumentID != value)
                {
                    ChangeTracker.RecordOriginalValue("InstrumentID", _instrumentID);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InstrumentID"))
                            ChangeTracker.RecordOriginalValue("InstrumentID", _instrumentID);
                            
                    _instrumentID = value;
                    OnPropertyChanged("InstrumentID");
                }
            }
        }
        protected string _instrumentID;
    [MaxLength(5)]
    [Required]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string LatinSymbol
        {
            get { return _latinSymbol; }
            set
            {
                if (_latinSymbol != value)
                {
                    ChangeTracker.RecordOriginalValue("LatinSymbol", _latinSymbol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LatinSymbol"))
                            ChangeTracker.RecordOriginalValue("LatinSymbol", _latinSymbol);
                            
                    _latinSymbol = value;
                    OnPropertyChanged("LatinSymbol");
                }
            }
        }
        protected string _latinSymbol;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual string LatinName
        {
            get { return _latinName; }
            set
            {
                if (_latinName != value)
                {
                    ChangeTracker.RecordOriginalValue("LatinName", _latinName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LatinName"))
                            ChangeTracker.RecordOriginalValue("LatinName", _latinName);
                            
                    _latinName = value;
                    OnPropertyChanged("LatinName");
                }
            }
        }
        protected string _latinName;
    [MaxLength(4)]
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string CompanyCode
        {
            get { return _companyCode; }
            set
            {
                if (_companyCode != value)
                {
                    ChangeTracker.RecordOriginalValue("CompanyCode", _companyCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CompanyCode"))
                            ChangeTracker.RecordOriginalValue("CompanyCode", _companyCode);
                            
                    _companyCode = value;
                    OnPropertyChanged("CompanyCode");
                }
            }
        }
        protected string _companyCode;
    [MaxLength(18)]
    [Required]
    	[ProtoMember(6)]
        [DataMember]
        public virtual string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Symbol"))
                            ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                            
                    _symbol = value;
                    OnPropertyChanged("Symbol");
                }
            }
        }
        protected string _symbol;
    [MaxLength(30)]
    [Required]
    	[ProtoMember(7)]
        [DataMember]
        public virtual string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Name"))
                            ChangeTracker.RecordOriginalValue("Name", _name);
                            
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        protected string _name;
    [MaxLength(12)]
    [Required]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string CIsin
        {
            get { return _cIsin; }
            set
            {
                if (_cIsin != value)
                {
                    ChangeTracker.RecordOriginalValue("CIsin", _cIsin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CIsin"))
                            ChangeTracker.RecordOriginalValue("CIsin", _cIsin);
                            
                    _cIsin = value;
                    OnPropertyChanged("CIsin");
                }
            }
        }
        protected string _cIsin;
    [Required]
    	[ProtoMember(9)]
        [DataMember]
        public virtual int DEven
        {
            get { return _dEven; }
            set
            {
                if (_dEven != value)
                {
                    ChangeTracker.RecordOriginalValue("DEven", _dEven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DEven"))
                            ChangeTracker.RecordOriginalValue("DEven", _dEven);
                            
                    _dEven = value;
                    OnPropertyChanged("DEven");
                }
            }
        }
        protected int _dEven;
    [Required]
    	[ProtoMember(10)]
        [DataMember]
        public virtual byte Flow
        {
            get { return _flow; }
            set
            {
                if (_flow != value)
                {
                    ChangeTracker.RecordOriginalValue("Flow", _flow);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Flow"))
                            ChangeTracker.RecordOriginalValue("Flow", _flow);
                            
                    _flow = value;
                    OnPropertyChanged("Flow");
                }
            }
        }
        protected byte _flow;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(11)]
        [DataMember]
        public virtual string LSoc30
        {
            get { return _lSoc30; }
            set
            {
                if (_lSoc30 != value)
                {
                    ChangeTracker.RecordOriginalValue("LSoc30", _lSoc30);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LSoc30"))
                            ChangeTracker.RecordOriginalValue("LSoc30", _lSoc30);
                            
                    _lSoc30 = value;
                    OnPropertyChanged("LSoc30");
                }
            }
        }
        protected string _lSoc30;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(12)]
        [DataMember]
        public virtual string CGdSVal
        {
            get { return _cGdSVal; }
            set
            {
                if (_cGdSVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CGdSVal", _cGdSVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CGdSVal"))
                            ChangeTracker.RecordOriginalValue("CGdSVal", _cGdSVal);
                            
                    _cGdSVal = value;
                    OnPropertyChanged("CGdSVal");
                }
            }
        }
        protected string _cGdSVal;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(13)]
        [DataMember]
        public virtual string CGrValCot
        {
            get { return _cGrValCot; }
            set
            {
                if (_cGrValCot != value)
                {
                    ChangeTracker.RecordOriginalValue("CGrValCot", _cGrValCot);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CGrValCot"))
                            ChangeTracker.RecordOriginalValue("CGrValCot", _cGrValCot);
                            
                    _cGrValCot = value;
                    OnPropertyChanged("CGrValCot");
                }
            }
        }
        protected string _cGrValCot;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(14)]
        [DataMember]
        public virtual string YMarNSC
        {
            get { return _yMarNSC; }
            set
            {
                if (_yMarNSC != value)
                {
                    ChangeTracker.RecordOriginalValue("YMarNSC", _yMarNSC);
                        if (!ChangeTracker.OriginalValues.ContainsKey("YMarNSC"))
                            ChangeTracker.RecordOriginalValue("YMarNSC", _yMarNSC);
                            
                    _yMarNSC = value;
                    OnPropertyChanged("YMarNSC");
                }
            }
        }
        protected string _yMarNSC;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(15)]
        [DataMember]
        public virtual string CComVal
        {
            get { return _cComVal; }
            set
            {
                if (_cComVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CComVal", _cComVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CComVal"))
                            ChangeTracker.RecordOriginalValue("CComVal", _cComVal);
                            
                    _cComVal = value;
                    OnPropertyChanged("CComVal");
                }
            }
        }
        protected string _cComVal;
    [MaxLength(2)]
    [Required]
    	[ProtoMember(16)]
        [DataMember]
        public virtual string CSecVal
        {
            get { return _cSecVal; }
            set
            {
                if (_cSecVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CSecVal"))
                            ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                            
                    _cSecVal = value;
                    OnPropertyChanged("CSecVal");
                }
            }
        }
        protected string _cSecVal;
    [MaxLength(5)]
    [Required]
    	[ProtoMember(17)]
        [DataMember]
        public virtual string CSoSecVal
        {
            get { return _cSoSecVal; }
            set
            {
                if (_cSoSecVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CSoSecVal", _cSoSecVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CSoSecVal"))
                            ChangeTracker.RecordOriginalValue("CSoSecVal", _cSoSecVal);
                            
                    _cSoSecVal = value;
                    OnPropertyChanged("CSoSecVal");
                }
            }
        }
        protected string _cSoSecVal;
    [MaxLength(5)]
    [Required]
    	[ProtoMember(18)]
        [DataMember]
        public virtual string YVal
        {
            get { return _yVal; }
            set
            {
                if (_yVal != value)
                {
                    ChangeTracker.RecordOriginalValue("YVal", _yVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("YVal"))
                            ChangeTracker.RecordOriginalValue("YVal", _yVal);
                            
                    _yVal = value;
                    OnPropertyChanged("YVal");
                }
            }
        }
        protected string _yVal;
    [Required]
    	[ProtoMember(19)]
        [DataMember]
        public virtual double Eps
        {
            get { return _eps; }
            set
            {
                if (_eps != value)
                {
                    ChangeTracker.RecordOriginalValue("Eps", _eps);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Eps"))
                            ChangeTracker.RecordOriginalValue("Eps", _eps);
                            
                    _eps = value;
                    OnPropertyChanged("Eps");
                }
            }
        }
        protected double _eps;
    [Required]
    	[ProtoMember(20)]
        [DataMember]
        public virtual double Pe
        {
            get { return _pe; }
            set
            {
                if (_pe != value)
                {
                    ChangeTracker.RecordOriginalValue("Pe", _pe);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Pe"))
                            ChangeTracker.RecordOriginalValue("Pe", _pe);
                            
                    _pe = value;
                    OnPropertyChanged("Pe");
                }
            }
        }
        protected double _pe;
    [Required]
    	[ProtoMember(21)]
        [DataMember]
        public virtual byte Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    ChangeTracker.RecordOriginalValue("Type", _type);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Type"))
                            ChangeTracker.RecordOriginalValue("Type", _type);
                            
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        protected byte _type;
    [Required]
    	[ProtoMember(22)]
        [DataMember]
        public virtual long BVol
        {
            get { return _bVol; }
            set
            {
                if (_bVol != value)
                {
                    ChangeTracker.RecordOriginalValue("BVol", _bVol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("BVol"))
                            ChangeTracker.RecordOriginalValue("BVol", _bVol);
                            
                    _bVol = value;
                    OnPropertyChanged("BVol");
                }
            }
        }
        protected long _bVol;
    [Required]
    	[ProtoMember(23)]
        [DataMember]
        public virtual int Cs
        {
            get { return _cs; }
            set
            {
                if (_cs != value)
                {
                    ChangeTracker.RecordOriginalValue("Cs", _cs);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Cs"))
                            ChangeTracker.RecordOriginalValue("Cs", _cs);
                            
                    _cs = value;
                    OnPropertyChanged("Cs");
                }
            }
        }
        protected int _cs;
    [Required]
    	[ProtoMember(24)]
        [DataMember]
        public virtual long Z
        {
            get { return _z; }
            set
            {
                if (_z != value)
                {
                    ChangeTracker.RecordOriginalValue("Z", _z);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Z"))
                            ChangeTracker.RecordOriginalValue("Z", _z);
                            
                    _z = value;
                    OnPropertyChanged("Z");
                }
            }
        }
        protected long _z;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(25,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<ClientType> ClientTypes
        {
            get
            {
                if (_clientTypes == null)
                {
                    _clientTypes = new TrackableCollection<ClientType>();
                    _clientTypes.CollectionChanged += FixupClientTypes;
                }
                return _clientTypes;
            }
            set
            {
                if (!ReferenceEquals(_clientTypes, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_clientTypes != null)
                    {
                        _clientTypes.CollectionChanged -= FixupClientTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ClientType item in _clientTypes)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _clientTypes = value;
                    if (_clientTypes != null)
                    {
                        _clientTypes.CollectionChanged += FixupClientTypes;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ClientType item in _clientTypes)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ClientTypes");
                }
            }
        }
        protected TrackableCollection<ClientType> _clientTypes;
    
     	[ProtoMember(26,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<CodalMessage> CodalMessages
        {
            get
            {
                if (_codalMessages == null)
                {
                    _codalMessages = new TrackableCollection<CodalMessage>();
                    _codalMessages.CollectionChanged += FixupCodalMessages;
                }
                return _codalMessages;
            }
            set
            {
                if (!ReferenceEquals(_codalMessages, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_codalMessages != null)
                    {
                        _codalMessages.CollectionChanged -= FixupCodalMessages;
                    }
                    _codalMessages = value;
                    if (_codalMessages != null)
                    {
                        _codalMessages.CollectionChanged += FixupCodalMessages;
                    }
                    OnNavigationPropertyChanged("CodalMessages");
                }
            }
        }
        protected TrackableCollection<CodalMessage> _codalMessages;
    
     	[ProtoMember(27,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<History> Histories
        {
            get
            {
                if (_histories == null)
                {
                    _histories = new TrackableCollection<History>();
                    _histories.CollectionChanged += FixupHistories;
                }
                return _histories;
            }
            set
            {
                if (!ReferenceEquals(_histories, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_histories != null)
                    {
                        _histories.CollectionChanged -= FixupHistories;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (History item in _histories)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _histories = value;
                    if (_histories != null)
                    {
                        _histories.CollectionChanged += FixupHistories;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (History item in _histories)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Histories");
                }
            }
        }
        protected TrackableCollection<History> _histories;
    
     	[ProtoMember(28,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<BestLimit> BestLimits
        {
            get
            {
                if (_bestLimits == null)
                {
                    _bestLimits = new TrackableCollection<BestLimit>();
                    _bestLimits.CollectionChanged += FixupBestLimits;
                }
                return _bestLimits;
            }
            set
            {
                if (!ReferenceEquals(_bestLimits, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_bestLimits != null)
                    {
                        _bestLimits.CollectionChanged -= FixupBestLimits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (BestLimit item in _bestLimits)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bestLimits = value;
                    if (_bestLimits != null)
                    {
                        _bestLimits.CollectionChanged += FixupBestLimits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (BestLimit item in _bestLimits)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("BestLimits");
                }
            }
        }
        protected TrackableCollection<BestLimit> _bestLimits;
    
     	[ProtoMember(29,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<Trade> Trades
        {
            get
            {
                if (_trades == null)
                {
                    _trades = new TrackableCollection<Trade>();
                    _trades.CollectionChanged += FixupTrades;
                }
                return _trades;
            }
            set
            {
                if (!ReferenceEquals(_trades, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_trades != null)
                    {
                        _trades.CollectionChanged -= FixupTrades;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Trade item in _trades)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _trades = value;
                    if (_trades != null)
                    {
                        _trades.CollectionChanged += FixupTrades;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Trade item in _trades)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Trades");
                }
            }
        }
        protected TrackableCollection<Trade> _trades;
    
     	[ProtoMember(30,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<ShareHolderChange> ShareHolderChanges
        {
            get
            {
                if (_shareHolderChanges == null)
                {
                    _shareHolderChanges = new TrackableCollection<ShareHolderChange>();
                    _shareHolderChanges.CollectionChanged += FixupShareHolderChanges;
                }
                return _shareHolderChanges;
            }
            set
            {
                if (!ReferenceEquals(_shareHolderChanges, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_shareHolderChanges != null)
                    {
                        _shareHolderChanges.CollectionChanged -= FixupShareHolderChanges;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ShareHolderChange item in _shareHolderChanges)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _shareHolderChanges = value;
                    if (_shareHolderChanges != null)
                    {
                        _shareHolderChanges.CollectionChanged += FixupShareHolderChanges;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ShareHolderChange item in _shareHolderChanges)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ShareHolderChanges");
                }
            }
        }
        protected TrackableCollection<ShareHolderChange> _shareHolderChanges;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        Instrument cloned = new Instrument();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._insCode=this._insCode;
             cloned._instrumentID=this._instrumentID;
             cloned._latinSymbol=this._latinSymbol;
             cloned._latinName=this._latinName;
             cloned._companyCode=this._companyCode;
             cloned._symbol=this._symbol;
             cloned._name=this._name;
             cloned._cIsin=this._cIsin;
             cloned._dEven=this._dEven;
             cloned._flow=this._flow;
             cloned._lSoc30=this._lSoc30;
             cloned._cGdSVal=this._cGdSVal;
             cloned._cGrValCot=this._cGrValCot;
             cloned._yMarNSC=this._yMarNSC;
             cloned._cComVal=this._cComVal;
             cloned._cSecVal=this._cSecVal;
             cloned._cSoSecVal=this._cSoSecVal;
             cloned._yVal=this._yVal;
             cloned._eps=this._eps;
             cloned._pe=this._pe;
             cloned._type=this._type;
             cloned._bVol=this._bVol;
             cloned._cs=this._cs;
             cloned._z=this._z;
        	
    if(ClientTypes!=null){
        cloned.ClientTypes=new TrackableCollection<ClientType>();
        foreach(ClientType item in ClientTypes)
        if (!clonedObjects.ContainsKey(item))
        cloned.ClientTypes.Add((ClientType)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.ClientTypes.Add((ClientType)clonedObjects[item]);
    }
    	
    if(CodalMessages!=null){
        cloned.CodalMessages=new TrackableCollection<CodalMessage>();
        foreach(CodalMessage item in CodalMessages)
        if (!clonedObjects.ContainsKey(item))
        cloned.CodalMessages.Add((CodalMessage)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.CodalMessages.Add((CodalMessage)clonedObjects[item]);
    }
    	
    if(Histories!=null){
        cloned.Histories=new TrackableCollection<History>();
        foreach(History item in Histories)
        if (!clonedObjects.ContainsKey(item))
        cloned.Histories.Add((History)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.Histories.Add((History)clonedObjects[item]);
    }
    	
    if(BestLimits!=null){
        cloned.BestLimits=new TrackableCollection<BestLimit>();
        foreach(BestLimit item in BestLimits)
        if (!clonedObjects.ContainsKey(item))
        cloned.BestLimits.Add((BestLimit)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.BestLimits.Add((BestLimit)clonedObjects[item]);
    }
    	
    if(Trades!=null){
        cloned.Trades=new TrackableCollection<Trade>();
        foreach(Trade item in Trades)
        if (!clonedObjects.ContainsKey(item))
        cloned.Trades.Add((Trade)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.Trades.Add((Trade)clonedObjects[item]);
    }
    	
    if(ShareHolderChanges!=null){
        cloned.ShareHolderChanges=new TrackableCollection<ShareHolderChange>();
        foreach(ShareHolderChange item in ShareHolderChanges)
        if (!clonedObjects.ContainsKey(item))
        cloned.ShareHolderChanges.Add((ShareHolderChange)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.ShareHolderChanges.Add((ShareHolderChange)clonedObjects[item]);
    }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._instrumentID.ToString());
    					// InstrumentID
    			sb.Append("`");
    
    						sb.Append(this._latinSymbol.ToString());
    					// LatinSymbol
    			sb.Append("`");
    
    						sb.Append(this._latinName.ToString());
    					// LatinName
    			sb.Append("`");
    
    						sb.Append(this._companyCode.ToString());
    					// CompanyCode
    			sb.Append("`");
    
    						sb.Append(this._symbol.ToString());
    					// Symbol
    			sb.Append("`");
    
    						sb.Append(this._name.ToString());
    					// Name
    			sb.Append("`");
    
    						sb.Append(this._cIsin.ToString());
    					// CIsin
    			sb.Append("`");
    
    						sb.Append(this._dEven.ToString());
    					// DEven
    			sb.Append("`");
    
    						sb.Append(this._flow.ToString());
    					// Flow
    			sb.Append("`");
    
    						sb.Append(this._lSoc30.ToString());
    					// LSoc30
    			sb.Append("`");
    
    						sb.Append(this._cGdSVal.ToString());
    					// CGdSVal
    			sb.Append("`");
    
    						sb.Append(this._cGrValCot.ToString());
    					// CGrValCot
    			sb.Append("`");
    
    						sb.Append(this._yMarNSC.ToString());
    					// YMarNSC
    			sb.Append("`");
    
    						sb.Append(this._cComVal.ToString());
    					// CComVal
    			sb.Append("`");
    
    						sb.Append(this._cSecVal.ToString());
    					// CSecVal
    			sb.Append("`");
    
    						sb.Append(this._cSoSecVal.ToString());
    					// CSoSecVal
    			sb.Append("`");
    
    						sb.Append(this._yVal.ToString());
    					// YVal
    			sb.Append("`");
    
    						sb.Append(this._eps.ToString());
    					// Eps
    			sb.Append("`");
    
    						sb.Append(this._pe.ToString());
    					// Pe
    			sb.Append("`");
    
    						sb.Append(this._type.ToString());
    					// Type
    			sb.Append("`");
    
    						sb.Append(this._bVol.ToString());
    					// BVol
    			sb.Append("`");
    
    						sb.Append(this._cs.ToString());
    					// Cs
    			sb.Append("`");
    
    						sb.Append(this._z.ToString());
    					// Z
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("SeatServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("SeatServiceFactory",true);
                    return (T)service_factory.CreateByModel<Instrument>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<Instrument>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=31;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_clientTypes!=null)
        foreach(var item in _clientTypes) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_codalMessages!=null)
        foreach(var item in _codalMessages) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_histories!=null)
        foreach(var item in _histories) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_bestLimits!=null)
        foreach(var item in _bestLimits) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_trades!=null)
        foreach(var item in _trades) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_shareHolderChanges!=null)
        foreach(var item in _shareHolderChanges) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        Instrument casted_other = other as Instrument;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InstrumentID,casted_other.InstrumentID))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LatinSymbol,casted_other.LatinSymbol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LatinName,casted_other.LatinName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CompanyCode,casted_other.CompanyCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Symbol,casted_other.Symbol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Name,casted_other.Name))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CIsin,casted_other.CIsin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DEven,casted_other.DEven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Flow,casted_other.Flow))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LSoc30,casted_other.LSoc30))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CGdSVal,casted_other.CGdSVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CGrValCot,casted_other.CGrValCot))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.YMarNSC,casted_other.YMarNSC))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CComVal,casted_other.CComVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CSecVal,casted_other.CSecVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CSoSecVal,casted_other.CSoSecVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.YVal,casted_other.YVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Eps,casted_other.Eps))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Pe,casted_other.Pe))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Type,casted_other.Type))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.BVol,casted_other.BVol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Cs,casted_other.Cs))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Z,casted_other.Z))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.ClientTypes.Count!= casted_other.ClientTypes.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> ClientTypes_compared=new List<int>(this.ClientTypes.Count);
    for(int i=0;i<this.ClientTypes.Count;++i)
    	if(this.ClientTypes[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.ClientTypes.Count;++j){
    			if(ClientTypes_compared.Contains(j)) continue;			
    			if(this.ClientTypes[i].Equals(casted_other.ClientTypes[j],checked_objects)){
    				ClientTypes_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.ClientTypes.Count;++j){
    			if(ClientTypes_compared.Contains(j)) continue;
    			if(casted_other.ClientTypes[j]==null){
    				ClientTypes_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(ClientTypes_compared.Distinct().Count()!=this.ClientTypes.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.CodalMessages.Count!= casted_other.CodalMessages.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> CodalMessages_compared=new List<int>(this.CodalMessages.Count);
    for(int i=0;i<this.CodalMessages.Count;++i)
    	if(this.CodalMessages[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.CodalMessages.Count;++j){
    			if(CodalMessages_compared.Contains(j)) continue;			
    			if(this.CodalMessages[i].Equals(casted_other.CodalMessages[j],checked_objects)){
    				CodalMessages_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.CodalMessages.Count;++j){
    			if(CodalMessages_compared.Contains(j)) continue;
    			if(casted_other.CodalMessages[j]==null){
    				CodalMessages_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(CodalMessages_compared.Distinct().Count()!=this.CodalMessages.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.Histories.Count!= casted_other.Histories.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> Histories_compared=new List<int>(this.Histories.Count);
    for(int i=0;i<this.Histories.Count;++i)
    	if(this.Histories[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.Histories.Count;++j){
    			if(Histories_compared.Contains(j)) continue;			
    			if(this.Histories[i].Equals(casted_other.Histories[j],checked_objects)){
    				Histories_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.Histories.Count;++j){
    			if(Histories_compared.Contains(j)) continue;
    			if(casted_other.Histories[j]==null){
    				Histories_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(Histories_compared.Distinct().Count()!=this.Histories.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.BestLimits.Count!= casted_other.BestLimits.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> BestLimits_compared=new List<int>(this.BestLimits.Count);
    for(int i=0;i<this.BestLimits.Count;++i)
    	if(this.BestLimits[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.BestLimits.Count;++j){
    			if(BestLimits_compared.Contains(j)) continue;			
    			if(this.BestLimits[i].Equals(casted_other.BestLimits[j],checked_objects)){
    				BestLimits_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.BestLimits.Count;++j){
    			if(BestLimits_compared.Contains(j)) continue;
    			if(casted_other.BestLimits[j]==null){
    				BestLimits_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(BestLimits_compared.Distinct().Count()!=this.BestLimits.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.Trades.Count!= casted_other.Trades.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> Trades_compared=new List<int>(this.Trades.Count);
    for(int i=0;i<this.Trades.Count;++i)
    	if(this.Trades[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.Trades.Count;++j){
    			if(Trades_compared.Contains(j)) continue;			
    			if(this.Trades[i].Equals(casted_other.Trades[j],checked_objects)){
    				Trades_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.Trades.Count;++j){
    			if(Trades_compared.Contains(j)) continue;
    			if(casted_other.Trades[j]==null){
    				Trades_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(Trades_compared.Distinct().Count()!=this.Trades.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.ShareHolderChanges.Count!= casted_other.ShareHolderChanges.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> ShareHolderChanges_compared=new List<int>(this.ShareHolderChanges.Count);
    for(int i=0;i<this.ShareHolderChanges.Count;++i)
    	if(this.ShareHolderChanges[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.ShareHolderChanges.Count;++j){
    			if(ShareHolderChanges_compared.Contains(j)) continue;			
    			if(this.ShareHolderChanges[i].Equals(casted_other.ShareHolderChanges[j],checked_objects)){
    				ShareHolderChanges_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.ShareHolderChanges.Count;++j){
    			if(ShareHolderChanges_compared.Contains(j)) continue;
    			if(casted_other.ShareHolderChanges[j]==null){
    				ShareHolderChanges_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(ShareHolderChanges_compared.Distinct().Count()!=this.ShareHolderChanges.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=false
    	 };
    						// This is none identity primary key	
    						}
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "InsCode", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=false
        
         };
              yield return new BaseField{Name= "InstrumentID", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=12
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "LatinSymbol", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "LatinName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CompanyCode", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=4
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Symbol", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=18
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Name", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=30
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CIsin", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=12
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "DEven", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Flow", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "LSoc30", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CGdSVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CGrValCot", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "YMarNSC", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CComVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CSecVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=2
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CSoSecVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "YVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Eps", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Pe", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Type", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "BVol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Cs", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Z", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "ClientTypes", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<ClientType>),TargetType =typeof(ClientType)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "CodalMessages", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<CodalMessage>),TargetType =typeof(CodalMessage)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.ZeroOrOne
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "Histories", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<History>),TargetType =typeof(History)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "BestLimits", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<BestLimit>),TargetType =typeof(BestLimit)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "Trades", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<Trade>),TargetType =typeof(Trade)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "ShareHolderChanges", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<ShareHolderChange>),TargetType =typeof(ShareHolderChange)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vInsCode=(long)this.GetValue("InsCode");
        Expression<Func<Instrument,bool>> exp = p => p.InsCode == vInsCode ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "inscode":
                retVal = this.InsCode;
                break;
            case "instrumentid":
                retVal = this.InstrumentID;
                break;
            case "latinsymbol":
                retVal = this.LatinSymbol;
                break;
            case "latinname":
                retVal = this.LatinName;
                break;
            case "companycode":
                retVal = this.CompanyCode;
                break;
            case "symbol":
                retVal = this.Symbol;
                break;
            case "name":
                retVal = this.Name;
                break;
            case "cisin":
                retVal = this.CIsin;
                break;
            case "deven":
                retVal = this.DEven;
                break;
            case "flow":
                retVal = this.Flow;
                break;
            case "lsoc30":
                retVal = this.LSoc30;
                break;
            case "cgdsval":
                retVal = this.CGdSVal;
                break;
            case "cgrvalcot":
                retVal = this.CGrValCot;
                break;
            case "ymarnsc":
                retVal = this.YMarNSC;
                break;
            case "ccomval":
                retVal = this.CComVal;
                break;
            case "csecval":
                retVal = this.CSecVal;
                break;
            case "csosecval":
                retVal = this.CSoSecVal;
                break;
            case "yval":
                retVal = this.YVal;
                break;
            case "eps":
                retVal = this.Eps;
                break;
            case "pe":
                retVal = this.Pe;
                break;
            case "type":
                retVal = this.Type;
                break;
            case "bvol":
                retVal = this.BVol;
                break;
            case "cs":
                retVal = this.Cs;
                break;
            case "z":
                retVal = this.Z;
                break;
        	
            case "clienttypes":
                   retVal= this.ClientTypes;
            break;
            case "codalmessages":
                   retVal= this.CodalMessages;
            break;
            case "histories":
                   retVal= this.Histories;
            break;
            case "bestlimits":
                   retVal= this.BestLimits;
            break;
            case "trades":
                   retVal= this.Trades;
            break;
            case "shareholderchanges":
                   retVal= this.ShareHolderChanges;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _insCode!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<ClientTypes.Count;++i)
                    ((IObjectWithChangeTracker)ClientTypes[i]).StartTracking();
                                for(int i=0;i<CodalMessages.Count;++i)
                    ((IObjectWithChangeTracker)CodalMessages[i]).StartTracking();
                                for(int i=0;i<Histories.Count;++i)
                    ((IObjectWithChangeTracker)Histories[i]).StartTracking();
                                for(int i=0;i<BestLimits.Count;++i)
                    ((IObjectWithChangeTracker)BestLimits[i]).StartTracking();
                                for(int i=0;i<Trades.Count;++i)
                    ((IObjectWithChangeTracker)Trades[i]).StartTracking();
                                for(int i=0;i<ShareHolderChanges.Count;++i)
                    ((IObjectWithChangeTracker)ShareHolderChanges[i]).StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<ClientTypes.Count;++i)
                    ((IObjectWithChangeTracker)ClientTypes[i]).StopTracking();
                                for(int i=0;i<CodalMessages.Count;++i)
                    ((IObjectWithChangeTracker)CodalMessages[i]).StopTracking();
                                for(int i=0;i<Histories.Count;++i)
                    ((IObjectWithChangeTracker)Histories[i]).StopTracking();
                                for(int i=0;i<BestLimits.Count;++i)
                    ((IObjectWithChangeTracker)BestLimits[i]).StopTracking();
                                for(int i=0;i<Trades.Count;++i)
                    ((IObjectWithChangeTracker)Trades[i]).StopTracking();
                                for(int i=0;i<ShareHolderChanges.Count;++i)
                    ((IObjectWithChangeTracker)ShareHolderChanges[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "instrumentid":
                this.InstrumentID =(string)value;
            break;
            case "latinsymbol":
                this.LatinSymbol =(string)value;
            break;
            case "latinname":
                this.LatinName =(string)value;
            break;
            case "companycode":
                this.CompanyCode =(string)value;
            break;
            case "symbol":
                this.Symbol =(string)value;
            break;
            case "name":
                this.Name =(string)value;
            break;
            case "cisin":
                this.CIsin =(string)value;
            break;
            case "deven":
                this.DEven =(int)value;
            break;
            case "flow":
                this.Flow =(byte)value;
            break;
            case "lsoc30":
                this.LSoc30 =(string)value;
            break;
            case "cgdsval":
                this.CGdSVal =(string)value;
            break;
            case "cgrvalcot":
                this.CGrValCot =(string)value;
            break;
            case "ymarnsc":
                this.YMarNSC =(string)value;
            break;
            case "ccomval":
                this.CComVal =(string)value;
            break;
            case "csecval":
                this.CSecVal =(string)value;
            break;
            case "csosecval":
                this.CSoSecVal =(string)value;
            break;
            case "yval":
                this.YVal =(string)value;
            break;
            case "eps":
                this.Eps =(double)value;
            break;
            case "pe":
                this.Pe =(double)value;
            break;
            case "type":
                this.Type =(byte)value;
            break;
            case "bvol":
                this.BVol =(long)value;
            break;
            case "cs":
                this.Cs =(int)value;
            break;
            case "z":
                this.Z =(long)value;
            break;
    	
            case "clienttypes":
             this.ClientTypes =(TrackableCollection<ClientType>) value;
            break;
            case "codalmessages":
             this.CodalMessages =(TrackableCollection<CodalMessage>) value;
            break;
            case "histories":
             this.Histories =(TrackableCollection<History>) value;
            break;
            case "bestlimits":
             this.BestLimits =(TrackableCollection<BestLimit>) value;
            break;
            case "trades":
             this.Trades =(TrackableCollection<Trade>) value;
            break;
            case "shareholderchanges":
             this.ShareHolderChanges =(TrackableCollection<ShareHolderChange>) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ClientTypes.Clear();
            CodalMessages.Clear();
            Histories.Clear();
            BestLimits.Clear();
            Trades.Clear();
            ShareHolderChanges.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupClientTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ClientType item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ClientTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClientType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ClientTypes", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCodalMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CodalMessage item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CodalMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CodalMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CodalMessages", item);
                    }
                }
            }
        }
    
        private void FixupHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (History item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Histories", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (History item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Histories", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupBestLimits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BestLimit item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BestLimits", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BestLimit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BestLimits", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTrades(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trade item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trades", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trade item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trades", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupShareHolderChanges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ShareHolderChange item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ShareHolderChanges", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ShareHolderChange item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ShareHolderChanges", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
