//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Seat.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;


namespace Seat.Validators
{
    public class InstrumentValidator : AzValidator<Instrument>
        {
            public InstrumentValidator()
            {
    RuleSet(Mode.Any,true, () =>{
    SecurityRuleFor().Allowed(AllFields());
    
    RuleFor(p => p.InsCode).NotEqual((long)Typing.GetDefaultValue(typeof(long)));
    RuleFor(p => p.InstrumentID).NotNull().Length(1,12);
    RuleFor(p => p.LatinSymbol).NotNull().Length(1,5);
    RuleFor(p => p.LatinName).NotNull().Length(1,50);
    RuleFor(p => p.CompanyCode).NotNull().Length(1,4);
    RuleFor(p => p.Symbol).NotNull().Length(1,18);
    RuleFor(p => p.Name).NotNull().Length(1,30);
    RuleFor(p => p.CIsin).NotNull().Length(1,12);
    RuleFor(p => p.Flow).LessThanOrEqual(Byte.MaxValue).GreaterThanOrEqual(Byte.MinValue).NotEmpty();
    RuleFor(p => p.LSoc30).NotNull().Length(1,50);
    RuleFor(p => p.CGdSVal).NotNull().Length(1,50);
    RuleFor(p => p.CGrValCot).NotNull().Length(1,50);
    RuleFor(p => p.YMarNSC).NotNull().Length(1,50);
    RuleFor(p => p.CComVal).NotNull().Length(1,50);
    RuleFor(p => p.CSecVal).NotNull().Length(1,2);
    RuleFor(p => p.CSoSecVal).NotNull().Length(1,5);
    RuleFor(p => p.YVal).NotNull().Length(1,5);
    RuleFor(p => p.Type).LessThanOrEqual(Byte.MaxValue).GreaterThanOrEqual(Byte.MinValue).NotEmpty();
            
    });
    //setBusinessRules();
            }
    
    	private void setBusinessRules()
    		{
    			RuleSet(Mode.OnInsert, () =>
    			{
    				SecurityRuleFor().OperationRequired("Instrmnt.C");
    			});
    
    			RuleSet(Mode.OnBatchRead | Mode.OnSingleRead, () =>
    			{
    				SecurityRuleFor().OperationRequired("Instrmnt.R");
    			});
    
    			RuleSet(Mode.OnUpdate, () =>
    			{
    				SecurityRuleFor().OperationRequired("Instrmnt.U");
    			});
    
    			RuleSet(Mode.OnDelete, () =>
    			{
    				SecurityRuleFor().OperationRequired("Instrmnt.D");
    			});
    		}
        }
    
}
