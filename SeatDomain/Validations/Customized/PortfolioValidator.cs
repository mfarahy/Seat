//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;
using System.Security.Cryptography.X509Certificates;

namespace SeatDomain.Validations
{
    public class PortfolioValidator : AzValidator<Portfolio>
    {
        public PortfolioValidator()
        {
            RuleSet(Mode.OnSingleRead | Mode.OnUpdate | Mode.OnInsert, true, () =>
              {
                  SecurityRuleFor().Allowed(AllFields(), Navigation(x => new { x.Instruments }));
              });

            RuleSet(Mode.Any, true, () =>
        {
            SecurityRuleFor().Allowed(AllFields());

            RuleFor(p => p.Name).NotNull().Length(1, 100);
            RuleFor(p => p.Audit_CreatorUserName).NotNull().Length(1, 50);
            RuleFor(p => p.Audit_CreatorIP).NotNull().Length(1, 50);
            RuleFor(p => p.Audit_CreateDate).NotEmpty().NotNull();
            RuleFor(p => p.Audit_LastModifyDate).NotEmpty().NotNull();
            RuleFor(p => p.Audit_LastModifierUserName).NotNull().Length(1, 50);
            RuleFor(p => p.Audit_LastModifierIP).NotNull().Length(1, 50);
            RuleFor(p => p.Owner).NotNull().Length(1, 100);

        });
            setBusinessRules();
        }

        private void setBusinessRules()
        {
            RuleSet(Mode.OnInsert | Mode.OnUpdate | Mode.OnDelete, () =>
            {
                SecurityRuleFor().OperationRequired("Prtfl.A");
            });

            RuleSet(Mode.Any, () =>
            {
                SecurityRuleFor().RoleCondition()
                .Add(Constants.KnownRoles.admin, x => true)
                .Add(String.Empty, x => x.Owner == GetData<string>("username"))
                .AddEvent(x =>
                {
                    SetData("username", x.UserName.ToLower());
                });
            });
        }
    }

}
