//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;


namespace SeatDomain.Validation
{
    public class HardLogValidator : AzValidator<HardLog>
    {
        public HardLogValidator()
        {
            RuleSet(Mode.Any, true, () =>
            {
                SecurityRuleFor().Allowed(AllFields());
                RuleFor(p => p.EntryDt).NotEmpty().NotNull();
                RuleFor(p => p.Level).Length(0, 10);
                RuleFor(p => p.Kind).LessThanOrEqual(Byte.MaxValue).GreaterThanOrEqual(Byte.MinValue).NotEmpty();
                RuleFor(p => p.UserName).Length(0, 200);
                RuleFor(p => p.IP).Length(0, 20);
                RuleFor(p => p.Method).NotNull().Length(1, 100);
                RuleFor(p => p.Type).NotNull().Length(1, 150);
                RuleFor(p => p.Message).NotNull();

            });
            setBusinessRules();
        }

        private void setBusinessRules()
        {
            RuleSet(Mode.OnInsert, () =>
            {
                SecurityRuleFor().Denied();
            });

            RuleSet(Mode.OnBatchRead | Mode.OnSingleRead, () =>
            {
                SecurityRuleFor().OperationRequired("HrdLg.R");
            });

            RuleSet(Mode.OnUpdate, () =>
            {
                SecurityRuleFor().Denied();
            });

            RuleSet(Mode.OnDelete, () =>
            {
                SecurityRuleFor().Denied();
            });
        }
    }

}
