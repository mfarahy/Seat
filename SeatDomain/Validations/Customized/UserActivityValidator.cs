//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;


namespace SeatDomain.Validation
{
    public class UserActivityValidator : AzValidator<UserActivity>
    {
        public UserActivityValidator()
        {
            RuleSet(Mode.Any, true, () =>
            {
                SecurityRuleFor().Allowed(AllFields());
                RuleFor(p => p.EntryDt).NotEmpty().NotNull();
                RuleFor(p => p.UserName).Length(0, 200);
                RuleFor(p => p.IP).Length(0, 20);
                RuleFor(p => p.Message).NotNull().Length(1, 500);
                RuleFor(p => p.PageName).Length(0, 100);
                RuleFor(p => p.Metadata).Length(0, 200);
                RuleFor(p => p.Session).Length(0, 100);
                RuleFor(p => p.Action).Length(0, 100);
            });
            setBusinessRules();
        }

        private void setBusinessRules()
        {
            RuleSet(Mode.OnBatchRead | Mode.OnSingleRead, () =>
            {
                SecurityRuleFor()
                .OperationCondition()
                .Add("UsrActvty.A", x => true)
                .Add(String.Empty, x => x.UserName == GetData<string>("UserName"))
                .AddEvent(new Action<PreValidationEventArg>(x =>
                {
                    var authenticater = ObjectRegistry.GetObject<IAuthenticaterProvider>(true);
                    var username = authenticater.CurrentIdentity.Name;
                    SetData("UserName", username);
                }));
            });

            RuleSet(Mode.OnUpdate, () =>
            {
                SecurityRuleFor().Denied();
            });

            RuleSet(Mode.OnDelete, () =>
            {
                SecurityRuleFor().Denied();
            });
        }
    }

}
