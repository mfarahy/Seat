//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;


namespace SeatDomain.Validations
{
    public class AspNetUserValidator : AzValidator<AspNetUser>
    {
        public AspNetUserValidator()
        {
            RuleSet(Mode.OnSingleRead, true, () =>
            {
                SecurityRuleFor().Allowed(Fields(x => new { x.Email, x.PhoneNumber, x.LockoutEnabled, x.PhoneNumberConfirmed, x.EmailConfirmed, x.UserName }), Navigation(x => new { x.AspNetRoles }));
            });

            RuleSet(Mode.OnUpdate, true, () =>
            {
                SecurityRuleFor().Allowed(Fields(x => new { x.Email, x.PhoneNumber, x.LockoutEnabled, x.PhoneNumberConfirmed, x.EmailConfirmed }));
            });

            RuleSet(Mode.OnInsert, true, () =>
            {
                SecurityRuleFor().Allowed(Fields(x => new { x.Email, x.PhoneNumber, x.Password, x.UserName }));
                RuleFor(p => p.Password).NotNull().Length(1, 50);
            });

            RuleSet(Mode.Any, true, () =>
            {
                SecurityRuleFor().Allowed(AllFields());

                RuleFor(p => p.Email).Length(0, 256);
                RuleFor(p => p.UserName).NotNull().Length(1, 256);

            });
            setBusinessRules();
        }
        private void setBusinessRules()
        {
            RuleSet(Mode.Any, () =>
            {
                SecurityRuleFor().RoleCondition()
                .Add(Constants.KnownRoles.admin, x => true)
                .Add(String.Empty, x => x.UserName.Equals(GetData<string>("username"), StringComparison.InvariantCultureIgnoreCase))
                .AddEvent(x =>
                {
                    SetData("username", x.UserName.ToLower());
                });
            });
        }

    }

}
