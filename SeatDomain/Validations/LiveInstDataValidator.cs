//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using SeatDomain.Models;
using Exir.Framework.Common;
using FluentValidation;
using Exir.Framework.Security.DataSecurity.Support;
using Exir.Framework.Security.ObjectValidation.Support;


namespace SeatDomain.Validations
{
    public class LiveInstDataValidator : AzValidator<LiveInstData>
        {
            public LiveInstDataValidator()
            {
    RuleSet(Mode.Any,true, () =>{
    SecurityRuleFor().Allowed(AllFields());
    
    RuleFor(p => p.Flow).LessThanOrEqual(Byte.MaxValue).GreaterThanOrEqual(Byte.MinValue).NotEmpty();
    RuleFor(p => p.DEven).NotEmpty().NotNull();
    RuleFor(p => p.Status).LessThanOrEqual(Byte.MaxValue).GreaterThanOrEqual(Byte.MinValue).NotEmpty();
            
    });
    //setBusinessRules();
            }
    
    	private void setBusinessRules()
    		{
    			RuleSet(Mode.OnInsert, () =>
    			{
    				SecurityRuleFor().OperationRequired("LvInstDt.C");
    			});
    
    			RuleSet(Mode.OnBatchRead | Mode.OnSingleRead, () =>
    			{
    				SecurityRuleFor().OperationRequired("LvInstDt.R");
    			});
    
    			RuleSet(Mode.OnUpdate, () =>
    			{
    				SecurityRuleFor().OperationRequired("LvInstDt.U");
    			});
    
    			RuleSet(Mode.OnDelete, () =>
    			{
    				SecurityRuleFor().OperationRequired("LvInstDt.D");
    			});
    		}
        }
    
}
