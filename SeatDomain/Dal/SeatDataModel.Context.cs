//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Exir.Framework.Common;
using Exir.Framework.DataAccess;
using Exir.Framework.DataAccess.EntityFramework;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;
using SeatDomain.Models;

namespace SeatDomain.Dal
{
    public partial class SeatDBEntitiesDbContext : EntityDbContext
    {
    	    	public SeatDBEntitiesDbContext(string databaseName, string connectionString)
        			:base(new SeatDBEntitiesObjectContext(databaseName,connectionString),true)
        	{
        	Configuration.ValidateOnSaveEnabled = false;
        	}
    }
    
    public partial class SeatDBEntitiesObjectContext : ObjectContextBase
    {
        public const string ConnectionString = "name=SeatDBEntities";
        public const string ContainerName = "SeatDBEntities";
    
        #region Constructors
    
              public SeatDBEntitiesObjectContext(string databaseName, string connectionStringName)
                    : base(databaseName, CreateEntityConnection(connectionStringName, typeof(SeatDBEntitiesObjectContext).Assembly), ContainerName)
            {
                Initialize();
            }
    
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<BestLimit> BestLimits
        {
            get { return _bestLimits  ?? (_bestLimits = CreateObjectSet<BestLimit>("SeatDBEntities.BestLimits")); }
        }
        private ObjectSet<BestLimit> _bestLimits;
    
        public ObjectSet<ClientType> ClientTypes
        {
            get { return _clientTypes  ?? (_clientTypes = CreateObjectSet<ClientType>("SeatDBEntities.ClientTypes")); }
        }
        private ObjectSet<ClientType> _clientTypes;
    
        public ObjectSet<CodalMessage> CodalMessages
        {
            get { return _codalMessages  ?? (_codalMessages = CreateObjectSet<CodalMessage>("SeatDBEntities.CodalMessages")); }
        }
        private ObjectSet<CodalMessage> _codalMessages;
    
        public ObjectSet<History> Histories
        {
            get { return _histories  ?? (_histories = CreateObjectSet<History>("SeatDBEntities.Histories")); }
        }
        private ObjectSet<History> _histories;
    
        public ObjectSet<Instrument> Instruments
        {
            get { return _instruments  ?? (_instruments = CreateObjectSet<Instrument>("SeatDBEntities.Instruments")); }
        }
        private ObjectSet<Instrument> _instruments;
    
        public ObjectSet<Message> Messages
        {
            get { return _messages  ?? (_messages = CreateObjectSet<Message>("SeatDBEntities.Messages")); }
        }
        private ObjectSet<Message> _messages;
    
        public ObjectSet<ShareHolderChange> ShareHolderChanges1
        {
            get { return _shareHolderChanges1  ?? (_shareHolderChanges1 = CreateObjectSet<ShareHolderChange>("SeatDBEntities.ShareHolderChanges1")); }
        }
        private ObjectSet<ShareHolderChange> _shareHolderChanges1;
    
        public ObjectSet<Trade> Trades
        {
            get { return _trades  ?? (_trades = CreateObjectSet<Trade>("SeatDBEntities.Trades")); }
        }
        private ObjectSet<Trade> _trades;
    
        public ObjectSet<ClosingPrice> ClosingPrices
        {
            get { return _closingPrices  ?? (_closingPrices = CreateObjectSet<ClosingPrice>("SeatDBEntities.ClosingPrices")); }
        }
        private ObjectSet<ClosingPrice> _closingPrices;
    
        public ObjectSet<LiveInstData> LiveInstDatas
        {
            get { return _liveInstDatas  ?? (_liveInstDatas = CreateObjectSet<LiveInstData>("SeatDBEntities.LiveInstDatas")); }
        }
        private ObjectSet<LiveInstData> _liveInstDatas;
    
        public ObjectSet<IndexLastDayTimeValue> IndexLastDayTimeValues
        {
            get { return _indexLastDayTimeValues  ?? (_indexLastDayTimeValues = CreateObjectSet<IndexLastDayTimeValue>("SeatDBEntities.IndexLastDayTimeValues")); }
        }
        private ObjectSet<IndexLastDayTimeValue> _indexLastDayTimeValues;
    
        public ObjectSet<InstrumentCategory> InstrumentCategories
        {
            get { return _instrumentCategories  ?? (_instrumentCategories = CreateObjectSet<InstrumentCategory>("SeatDBEntities.InstrumentCategories")); }
        }
        private ObjectSet<InstrumentCategory> _instrumentCategories;
    
        public ObjectSet<BigDeal> BigDeals
        {
            get { return _bigDeals  ?? (_bigDeals = CreateObjectSet<BigDeal>("SeatDBEntities.BigDeals")); }
        }
        private ObjectSet<BigDeal> _bigDeals;
    
        public ObjectSet<NotificationLog> NotificationLogs
        {
            get { return _notificationLogs  ?? (_notificationLogs = CreateObjectSet<NotificationLog>("SeatDBEntities.NotificationLogs")); }
        }
        private ObjectSet<NotificationLog> _notificationLogs;
    
        public ObjectSet<Portfolio> Portfolios
        {
            get { return _portfolios  ?? (_portfolios = CreateObjectSet<Portfolio>("SeatDBEntities.Portfolios")); }
        }
        private ObjectSet<Portfolio> _portfolios;
    
        public ObjectSet<Notification> Notifications
        {
            get { return _notifications  ?? (_notifications = CreateObjectSet<Notification>("SeatDBEntities.Notifications")); }
        }
        private ObjectSet<Notification> _notifications;

        #endregion

    }
}
