//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface INotification{
    
     int NotificationPK{
      get;
      set;
      }
    
     int PortfolioPK{
      get;
      set;
      }
    
     string EventObjectId{
      get;
      set;
      }
    
     bool SendSms{
      get;
      set;
      }
    
     bool SendEmail{
      get;
      set;
      }
    
     bool Calling{
      get;
      set;
      }
    
     string Owner{
      get;
      set;
      }
    
     string Email{
      get;
      set;
      }
    
     string PhoneNo{
      get;
      set;
      }
    
        TrackableCollection<NotificationLog> NotificationLogs{get;set;}
    Portfolio Portfolio{get;set;}
    }// interface
    
    [Table("Notifications")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(NotificationPK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
[KnownType(typeof(NotificationLog))]
    
[KnownType(typeof(Portfolio))]
    
public partial class Notification:IEntityBase, INotification,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual int NotificationPK
        {
            get { return _notificationPK; }
            set
            {
                if (_notificationPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_notificationPK,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'NotificationPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _notificationPK = value;
                    OnPropertyChanged("NotificationPK");
                }
            }
        }
        protected int _notificationPK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual int PortfolioPK
        {
            get { return _portfolioPK; }
            set
            {
                if (_portfolioPK != value)
                {
                    ChangeTracker.RecordOriginalValue("PortfolioPK", _portfolioPK);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PortfolioPK"))
                            ChangeTracker.RecordOriginalValue("PortfolioPK", _portfolioPK);
                            
                    if (!IsDeserializing)
                    {
                        if (Portfolio != null && Portfolio.PortfolioPK != value)
                        {
                            Portfolio = null;
                        }
                    }
                    _portfolioPK = value;
                    OnPropertyChanged("PortfolioPK");
                }
            }
        }
        protected int _portfolioPK;
    [MaxLength(100)]
    
[Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual string EventObjectId
        {
            get { return _eventObjectId; }
            set
            {
                if (_eventObjectId != value)
                {
                    ChangeTracker.RecordOriginalValue("EventObjectId", _eventObjectId);
                        if (!ChangeTracker.OriginalValues.ContainsKey("EventObjectId"))
                            ChangeTracker.RecordOriginalValue("EventObjectId", _eventObjectId);
                            
                    _eventObjectId = value;
                    OnPropertyChanged("EventObjectId");
                }
            }
        }
        protected string _eventObjectId;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual bool SendSms
        {
            get { return _sendSms; }
            set
            {
                if (_sendSms != value)
                {
                    ChangeTracker.RecordOriginalValue("SendSms", _sendSms);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SendSms"))
                            ChangeTracker.RecordOriginalValue("SendSms", _sendSms);
                            
                    _sendSms = value;
                    OnPropertyChanged("SendSms");
                }
            }
        }
        protected bool _sendSms;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual bool SendEmail
        {
            get { return _sendEmail; }
            set
            {
                if (_sendEmail != value)
                {
                    ChangeTracker.RecordOriginalValue("SendEmail", _sendEmail);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SendEmail"))
                            ChangeTracker.RecordOriginalValue("SendEmail", _sendEmail);
                            
                    _sendEmail = value;
                    OnPropertyChanged("SendEmail");
                }
            }
        }
        protected bool _sendEmail;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual bool Calling
        {
            get { return _calling; }
            set
            {
                if (_calling != value)
                {
                    ChangeTracker.RecordOriginalValue("Calling", _calling);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Calling"))
                            ChangeTracker.RecordOriginalValue("Calling", _calling);
                            
                    _calling = value;
                    OnPropertyChanged("Calling");
                }
            }
        }
        protected bool _calling;
    [MaxLength(100)]
    
[Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual string Owner
        {
            get { return _owner; }
            set
            {
                if (_owner != value)
                {
                    ChangeTracker.RecordOriginalValue("Owner", _owner);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Owner"))
                            ChangeTracker.RecordOriginalValue("Owner", _owner);
                            
                    _owner = value;
                    OnPropertyChanged("Owner");
                }
            }
        }
        protected string _owner;
    [MaxLength(150)]
    
[Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    ChangeTracker.RecordOriginalValue("Email", _email);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Email"))
                            ChangeTracker.RecordOriginalValue("Email", _email);
                            
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        protected string _email;
    [MaxLength(50)]
    
[Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual string PhoneNo
        {
            get { return _phoneNo; }
            set
            {
                if (_phoneNo != value)
                {
                    ChangeTracker.RecordOriginalValue("PhoneNo", _phoneNo);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PhoneNo"))
                            ChangeTracker.RecordOriginalValue("PhoneNo", _phoneNo);
                            
                    _phoneNo = value;
                    OnPropertyChanged("PhoneNo");
                }
            }
        }
        protected string _phoneNo;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(10,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<NotificationLog> NotificationLogs
        {
            get
            {
                if (_notificationLogs == null)
                {
                    _notificationLogs = new TrackableCollection<NotificationLog>();
                    _notificationLogs.CollectionChanged += FixupNotificationLogs;
                }
                return _notificationLogs;
            }
            set
            {
                if (!ReferenceEquals(_notificationLogs, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_notificationLogs != null)
                    {
                        _notificationLogs.CollectionChanged -= FixupNotificationLogs;
                    }
                    _notificationLogs = value;
                    if (_notificationLogs != null)
                    {
                        _notificationLogs.CollectionChanged += FixupNotificationLogs;
                    }
                    OnNavigationPropertyChanged("NotificationLogs");
                }
            }
        }
        protected TrackableCollection<NotificationLog> _notificationLogs;
    
     	[ProtoMember(11,AsReference =true)]
    
[ForeignKey("PortfolioPK")]
    
   [DataMember]
    
    public  Portfolio Portfolio
        {
            get { return _portfolio; }
            set
            {
                if (!ReferenceEquals(_portfolio, value))
                {
                    var previousValue = _portfolio;
                    _portfolio = value;
                    FixupPortfolio(previousValue);
                    OnNavigationPropertyChanged("Portfolio");
                }
            }
        }
        protected Portfolio _portfolio;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        Notification cloned = new Notification();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._notificationPK=this._notificationPK;
             cloned._portfolioPK=this._portfolioPK;
             cloned._eventObjectId=this._eventObjectId;
             cloned._sendSms=this._sendSms;
             cloned._sendEmail=this._sendEmail;
             cloned._calling=this._calling;
             cloned._owner=this._owner;
             cloned._email=this._email;
             cloned._phoneNo=this._phoneNo;
        	
    if(NotificationLogs!=null){
        cloned.NotificationLogs=new TrackableCollection<NotificationLog>();
        foreach(NotificationLog item in NotificationLogs)
        if (!clonedObjects.ContainsKey(item))
        cloned.NotificationLogs.Add((NotificationLog)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.NotificationLogs.Add((NotificationLog)clonedObjects[item]);
    }
    if(Portfolio!=null) {
    if (!clonedObjects.ContainsKey(Portfolio))
    cloned.Portfolio=(Portfolio)Portfolio.Clone(clonedObjects,includePrimaryKey);
    else
                    cloned.Portfolio = (Portfolio)clonedObjects[Portfolio];
                }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._notificationPK.ToString());
    					// NotificationPK
    			sb.Append("`");
    
    						sb.Append(this._portfolioPK.ToString());
    					// PortfolioPK
    			sb.Append("`");
    
    						sb.Append(this._eventObjectId.ToString());
    					// EventObjectId
    			sb.Append("`");
    
    						sb.Append(this._sendSms.ToString());
    					// SendSms
    			sb.Append("`");
    
    						sb.Append(this._sendEmail.ToString());
    					// SendEmail
    			sb.Append("`");
    
    						sb.Append(this._calling.ToString());
    					// Calling
    			sb.Append("`");
    
    						sb.Append(this._owner.ToString());
    					// Owner
    			sb.Append("`");
    
    						sb.Append(this._email.ToString());
    					// Email
    			sb.Append("`");
    
    						sb.Append(this._phoneNo.ToString());
    					// PhoneNo
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<Notification>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<Notification>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=12;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_notificationLogs!=null)
        foreach(var item in _notificationLogs) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
            if(_portfolio!=null && !reseted_objects.Contains(_portfolio)) _portfolio.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        Notification casted_other = other as Notification;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.NotificationPK,casted_other.NotificationPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PortfolioPK,casted_other.PortfolioPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.EventObjectId,casted_other.EventObjectId))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SendSms,casted_other.SendSms))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SendEmail,casted_other.SendEmail))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Calling,casted_other.Calling))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Owner,casted_other.Owner))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Email,casted_other.Email))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PhoneNo,casted_other.PhoneNo))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.NotificationLogs.Count!= casted_other.NotificationLogs.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> NotificationLogs_compared=new List<int>(this.NotificationLogs.Count);
    for(int i=0;i<this.NotificationLogs.Count;++i)
    	if(this.NotificationLogs[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.NotificationLogs.Count;++j){
    			if(NotificationLogs_compared.Contains(j)) continue;			
    			if(this.NotificationLogs[i].Equals(casted_other.NotificationLogs[j],checked_objects)){
    				NotificationLogs_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.NotificationLogs.Count;++j){
    			if(NotificationLogs_compared.Contains(j)) continue;
    			if(casted_other.NotificationLogs[j]==null){
    				NotificationLogs_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(NotificationLogs_compared.Distinct().Count()!=this.NotificationLogs.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    if(this.Portfolio!= null) {
    if(!this.Portfolio.Equals(casted_other.Portfolio,checked_objects))
    {
    		checked_objects.Remove(this);
    		return false;
    	}}
    else
    if(casted_other.Portfolio!= null) 
    {
    		checked_objects.Remove(this);
    		return false;
    	}
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "NotificationPK", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "NotificationPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "PortfolioPK", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "EventObjectId", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "SendSms", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "SendEmail", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Calling", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Owner", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Email", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=150
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "PhoneNo", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "NotificationLogs", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<NotificationLog>),TargetType =typeof(NotificationLog)
            ,DependentProperty="NotificationPK",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "Portfolio", Kind = FieldKinds.Navigational,PropertyType =typeof(Portfolio),TargetType =typeof(Portfolio)
            ,DependentProperty="PortfolioPK",
    IsCollection=false
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.One
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vNotificationPK=(int)this.GetValue("NotificationPK");
        Expression<Func<Notification,bool>> exp = p => p.NotificationPK == vNotificationPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "notificationpk":
                retVal = this.NotificationPK;
                break;
            case "portfoliopk":
                retVal = this.PortfolioPK;
                break;
            case "eventobjectid":
                retVal = this.EventObjectId;
                break;
            case "sendsms":
                retVal = this.SendSms;
                break;
            case "sendemail":
                retVal = this.SendEmail;
                break;
            case "calling":
                retVal = this.Calling;
                break;
            case "owner":
                retVal = this.Owner;
                break;
            case "email":
                retVal = this.Email;
                break;
            case "phoneno":
                retVal = this.PhoneNo;
                break;
        	
            case "notificationlogs":
                   retVal= this.NotificationLogs;
            break;
            case "portfolio":
                   retVal= this.Portfolio;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _notificationPK!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<NotificationLogs.Count;++i)
                    ((IObjectWithChangeTracker)NotificationLogs[i]).StartTracking();
                    				if(Portfolio!=null) Portfolio.StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<NotificationLogs.Count;++i)
                    ((IObjectWithChangeTracker)NotificationLogs[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "notificationpk":
                this.NotificationPK =(int)value;
            break;
            case "portfoliopk":
                this.PortfolioPK =(int)value;
            break;
            case "eventobjectid":
                this.EventObjectId =(string)value;
            break;
            case "sendsms":
                this.SendSms =(bool)value;
            break;
            case "sendemail":
                this.SendEmail =(bool)value;
            break;
            case "calling":
                this.Calling =(bool)value;
            break;
            case "owner":
                this.Owner =(string)value;
            break;
            case "email":
                this.Email =(string)value;
            break;
            case "phoneno":
                this.PhoneNo =(string)value;
            break;
    	
            case "notificationlogs":
             this.NotificationLogs =(TrackableCollection<NotificationLog>) value;
            break;
            case "portfolio":
             this.Portfolio =( Portfolio) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NotificationLogs.Clear();
            Portfolio = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPortfolio(Portfolio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Notifications.Contains(this))
            {
                previousValue.Notifications.Remove(this);
            }
    
            if (Portfolio != null)
            {
                if (!Portfolio.Notifications.Contains(this))
                {
                    Portfolio.Notifications.Add(this);
                }
    
                PortfolioPK = Portfolio.PortfolioPK;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Portfolio")
                    && (ChangeTracker.OriginalValues["Portfolio"] == Portfolio))
                {
                    ChangeTracker.OriginalValues.Remove("Portfolio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Portfolio", previousValue);
                }
                if (Portfolio != null && !Portfolio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Portfolio.StartTracking();
                }
            }
        }
    
        private void FixupNotificationLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationLog item in e.NewItems)
                {
                    item.Notification = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Notification, this))
                    {
                        item.Notification = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationLogs", item);
                    }
                }
            }
        }

        #endregion

    }
}
