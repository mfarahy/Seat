//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IHardLog{
    
     long Id{
      get;
      set;
      }
    
     System.DateTime EntryDt{
      get;
      set;
      }
    
     string Level{
      get;
      set;
      }
    
     byte Kind{
      get;
      set;
      }
    
     string UserName{
      get;
      set;
      }
    
     Nullable<long> TraceKey{
      get;
      set;
      }
    
     string IP{
      get;
      set;
      }
    
     string Method{
      get;
      set;
      }
    
     string Type{
      get;
      set;
      }
    
     int ArgumentsCount{
      get;
      set;
      }
    
     string Arguments{
      get;
      set;
      }
    
     long ElapsedMilliseconds{
      get;
      set;
      }
    
     string Result{
      get;
      set;
      }
    
     string Message{
      get;
      set;
      }
    
     string Exception{
      get;
      set;
      }
    
    }// interface
    
    [Table("HardLogs")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(Id)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class HardLog:IEntityBase, IHardLog,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_id,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        protected long _id;
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual System.DateTime EntryDt
        {
            get { return _entryDt; }
            set
            {
                if (_entryDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EntryDt", _entryDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("EntryDt"))
                            ChangeTracker.RecordOriginalValue("EntryDt", _entryDt);
                            
                    _entryDt = value;
                    OnPropertyChanged("EntryDt");
                }
            }
        }
        protected System.DateTime _entryDt;
    [MaxLength(10)]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string Level
        {
            get { return _level; }
            set
            {
                if (_level != value)
                {
                    ChangeTracker.RecordOriginalValue("Level", _level);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Level"))
                            ChangeTracker.RecordOriginalValue("Level", _level);
                            
                    _level = value;
                    OnPropertyChanged("Level");
                }
            }
        }
        protected string _level;
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual byte Kind
        {
            get { return _kind; }
            set
            {
                if (_kind != value)
                {
                    ChangeTracker.RecordOriginalValue("Kind", _kind);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Kind"))
                            ChangeTracker.RecordOriginalValue("Kind", _kind);
                            
                    _kind = value;
                    OnPropertyChanged("Kind");
                }
            }
        }
        protected byte _kind;
    [MaxLength(200)]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("UserName"))
                            ChangeTracker.RecordOriginalValue("UserName", _userName);
                            
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        protected string _userName;
    	[ProtoMember(6)]
        [DataMember]
        public virtual Nullable<long> TraceKey
        {
            get { return _traceKey; }
            set
            {
                if (_traceKey != value)
                {
                    ChangeTracker.RecordOriginalValue("TraceKey", _traceKey);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TraceKey"))
                            ChangeTracker.RecordOriginalValue("TraceKey", _traceKey);
                            
                    _traceKey = value;
                    OnPropertyChanged("TraceKey");
                }
            }
        }
        protected Nullable<long> _traceKey;
    [MaxLength(20)]
    	[ProtoMember(7)]
        [DataMember]
        public virtual string IP
        {
            get { return _iP; }
            set
            {
                if (_iP != value)
                {
                    ChangeTracker.RecordOriginalValue("IP", _iP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IP"))
                            ChangeTracker.RecordOriginalValue("IP", _iP);
                            
                    _iP = value;
                    OnPropertyChanged("IP");
                }
            }
        }
        protected string _iP;
    [MaxLength(100)]
    [Required]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string Method
        {
            get { return _method; }
            set
            {
                if (_method != value)
                {
                    ChangeTracker.RecordOriginalValue("Method", _method);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Method"))
                            ChangeTracker.RecordOriginalValue("Method", _method);
                            
                    _method = value;
                    OnPropertyChanged("Method");
                }
            }
        }
        protected string _method;
    [MaxLength(150)]
    [Required]
    	[ProtoMember(9)]
        [DataMember]
        public virtual string Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    ChangeTracker.RecordOriginalValue("Type", _type);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Type"))
                            ChangeTracker.RecordOriginalValue("Type", _type);
                            
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        protected string _type;
    [Required]
    	[ProtoMember(10)]
        [DataMember]
        public virtual int ArgumentsCount
        {
            get { return _argumentsCount; }
            set
            {
                if (_argumentsCount != value)
                {
                    ChangeTracker.RecordOriginalValue("ArgumentsCount", _argumentsCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ArgumentsCount"))
                            ChangeTracker.RecordOriginalValue("ArgumentsCount", _argumentsCount);
                            
                    _argumentsCount = value;
                    OnPropertyChanged("ArgumentsCount");
                }
            }
        }
        protected int _argumentsCount;
    	[ProtoMember(11)]
        [DataMember]
        public virtual string Arguments
        {
            get { return _arguments; }
            set
            {
                if (_arguments != value)
                {
                    ChangeTracker.RecordOriginalValue("Arguments", _arguments);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Arguments"))
                            ChangeTracker.RecordOriginalValue("Arguments", _arguments);
                            
                    _arguments = value;
                    OnPropertyChanged("Arguments");
                }
            }
        }
        protected string _arguments;
    [Required]
    	[ProtoMember(12)]
        [DataMember]
        public virtual long ElapsedMilliseconds
        {
            get { return _elapsedMilliseconds; }
            set
            {
                if (_elapsedMilliseconds != value)
                {
                    ChangeTracker.RecordOriginalValue("ElapsedMilliseconds", _elapsedMilliseconds);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ElapsedMilliseconds"))
                            ChangeTracker.RecordOriginalValue("ElapsedMilliseconds", _elapsedMilliseconds);
                            
                    _elapsedMilliseconds = value;
                    OnPropertyChanged("ElapsedMilliseconds");
                }
            }
        }
        protected long _elapsedMilliseconds;
    	[ProtoMember(13)]
        [DataMember]
        public virtual string Result
        {
            get { return _result; }
            set
            {
                if (_result != value)
                {
                    ChangeTracker.RecordOriginalValue("Result", _result);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Result"))
                            ChangeTracker.RecordOriginalValue("Result", _result);
                            
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        protected string _result;
    [Required]
    	[ProtoMember(14)]
        [DataMember]
        public virtual string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    ChangeTracker.RecordOriginalValue("Message", _message);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Message"))
                            ChangeTracker.RecordOriginalValue("Message", _message);
                            
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        protected string _message;
    	[ProtoMember(15)]
        [DataMember]
        public virtual string Exception
        {
            get { return _exception; }
            set
            {
                if (_exception != value)
                {
                    ChangeTracker.RecordOriginalValue("Exception", _exception);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Exception"))
                            ChangeTracker.RecordOriginalValue("Exception", _exception);
                            
                    _exception = value;
                    OnPropertyChanged("Exception");
                }
            }
        }
        protected string _exception;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        HardLog cloned = new HardLog();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._id=this._id;
             cloned._entryDt=this._entryDt;
             cloned._level=this._level;
             cloned._kind=this._kind;
             cloned._userName=this._userName;
             cloned._traceKey=this._traceKey;
             cloned._iP=this._iP;
             cloned._method=this._method;
             cloned._type=this._type;
             cloned._argumentsCount=this._argumentsCount;
             cloned._arguments=this._arguments;
             cloned._elapsedMilliseconds=this._elapsedMilliseconds;
             cloned._result=this._result;
             cloned._message=this._message;
             cloned._exception=this._exception;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._id.ToString());
    					// Id
    			sb.Append("`");
    
    						sb.Append(this._entryDt.ToString());
    					// EntryDt
    			sb.Append("`");
    
    						sb.Append(this._level?.ToString());
    						// Level
    			sb.Append("`");
    
    						sb.Append(this._kind.ToString());
    					// Kind
    			sb.Append("`");
    
    						sb.Append(this._userName?.ToString());
    						// UserName
    			sb.Append("`");
    
    						sb.Append(this._traceKey?.ToString());
    						// TraceKey
    			sb.Append("`");
    
    						sb.Append(this._iP?.ToString());
    						// IP
    			sb.Append("`");
    
    						sb.Append(this._method.ToString());
    					// Method
    			sb.Append("`");
    
    						sb.Append(this._type.ToString());
    					// Type
    			sb.Append("`");
    
    						sb.Append(this._argumentsCount.ToString());
    					// ArgumentsCount
    			sb.Append("`");
    
    						sb.Append(this._arguments?.ToString());
    						// Arguments
    			sb.Append("`");
    
    						sb.Append(this._elapsedMilliseconds.ToString());
    					// ElapsedMilliseconds
    			sb.Append("`");
    
    						sb.Append(this._result?.ToString());
    						// Result
    			sb.Append("`");
    
    						sb.Append(this._message.ToString());
    					// Message
    			sb.Append("`");
    
    						sb.Append(this._exception?.ToString());
    						// Exception
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<HardLog>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<HardLog>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=16;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        HardLog casted_other = other as HardLog;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.Id,casted_other.Id))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.EntryDt,casted_other.EntryDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Level,casted_other.Level))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Kind,casted_other.Kind))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.UserName,casted_other.UserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TraceKey,casted_other.TraceKey))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IP,casted_other.IP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Method,casted_other.Method))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Type,casted_other.Type))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ArgumentsCount,casted_other.ArgumentsCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Arguments,casted_other.Arguments))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ElapsedMilliseconds,casted_other.ElapsedMilliseconds))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Result,casted_other.Result))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Message,casted_other.Message))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Exception,casted_other.Exception))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "Id", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "Id", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "EntryDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Level", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=10
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Kind", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "UserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=200
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "TraceKey", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "IP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=20
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Method", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Type", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=150
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "ArgumentsCount", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Arguments", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "ElapsedMilliseconds", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Result", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Message", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Exception", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vId=(long)this.GetValue("Id");
        Expression<Func<HardLog,bool>> exp = p => p.Id == vId ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "id":
                retVal = this.Id;
                break;
            case "entrydt":
                retVal = this.EntryDt;
                break;
            case "level":
                retVal = this.Level;
                break;
            case "kind":
                retVal = this.Kind;
                break;
            case "username":
                retVal = this.UserName;
                break;
            case "tracekey":
                retVal = this.TraceKey;
                break;
            case "ip":
                retVal = this.IP;
                break;
            case "method":
                retVal = this.Method;
                break;
            case "type":
                retVal = this.Type;
                break;
            case "argumentscount":
                retVal = this.ArgumentsCount;
                break;
            case "arguments":
                retVal = this.Arguments;
                break;
            case "elapsedmilliseconds":
                retVal = this.ElapsedMilliseconds;
                break;
            case "result":
                retVal = this.Result;
                break;
            case "message":
                retVal = this.Message;
                break;
            case "exception":
                retVal = this.Exception;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _id!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "id":
                this.Id =(long)value;
            break;
            case "entrydt":
                this.EntryDt =(System.DateTime)value;
            break;
            case "level":
                this.Level =(string)value;
            break;
            case "kind":
                this.Kind =(byte)value;
            break;
            case "username":
                this.UserName =(string)value;
            break;
            case "tracekey":
                this.TraceKey =(Nullable<long>)value;
            break;
            case "ip":
                this.IP =(string)value;
            break;
            case "method":
                this.Method =(string)value;
            break;
            case "type":
                this.Type =(string)value;
            break;
            case "argumentscount":
                this.ArgumentsCount =(int)value;
            break;
            case "arguments":
                this.Arguments =(string)value;
            break;
            case "elapsedmilliseconds":
                this.ElapsedMilliseconds =(long)value;
            break;
            case "result":
                this.Result =(string)value;
            break;
            case "message":
                this.Message =(string)value;
            break;
            case "exception":
                this.Exception =(string)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
