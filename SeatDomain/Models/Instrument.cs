//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IInstrument{
    
     long InsCode{
      get;
      set;
      }
    
     string InstrumentID{
      get;
      set;
      }
    
     string LatinSymbol{
      get;
      set;
      }
    
     string LatinName{
      get;
      set;
      }
    
     string CompanyCode{
      get;
      set;
      }
    
     string Symbol{
      get;
      set;
      }
    
     string Name{
      get;
      set;
      }
    
     string CIsin{
      get;
      set;
      }
    
     Nullable<int> DEven{
      get;
      set;
      }
    
     byte Flow{
      get;
      set;
      }
    
     string LSoc30{
      get;
      set;
      }
    
     string CGdSVal{
      get;
      set;
      }
    
     string CGrValCot{
      get;
      set;
      }
    
     string YMarNSC{
      get;
      set;
      }
    
     string CComVal{
      get;
      set;
      }
    
     string CSecVal{
      get;
      set;
      }
    
     string CSoSecVal{
      get;
      set;
      }
    
     string YVal{
      get;
      set;
      }
    
     double Eps{
      get;
      set;
      }
    
     double Pe{
      get;
      set;
      }
    
     Nullable<byte> Type{
      get;
      set;
      }
    
     long BVol{
      get;
      set;
      }
    
     int Cs{
      get;
      set;
      }
    
     long Z{
      get;
      set;
      }
    
        TrackableCollection<Message> Messages{get;set;}
        TrackableCollection<IndexLastDayTimeValue> IndexValues{get;set;}
        TrackableCollection<NotificationLog> NotificationLogs{get;set;}
        TrackableCollection<Portfolio> Portfolios{get;set;}
    }// interface
    
    [Table("Instruments")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(InsCode)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
[KnownType(typeof(Message))]
    
[KnownType(typeof(IndexLastDayTimeValue))]
    
[KnownType(typeof(NotificationLog))]
    
[KnownType(typeof(Portfolio))]
    
public partial class Instrument:IEntityBase, IInstrument,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_insCode,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'InsCode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [MaxLength(12)]
    
[Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual string InstrumentID
        {
            get { return _instrumentID; }
            set
            {
                if (_instrumentID != value)
                {
                    ChangeTracker.RecordOriginalValue("InstrumentID", _instrumentID);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InstrumentID"))
                            ChangeTracker.RecordOriginalValue("InstrumentID", _instrumentID);
                            
                    _instrumentID = value;
                    OnPropertyChanged("InstrumentID");
                }
            }
        }
        protected string _instrumentID;
    [MaxLength(5)]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual string LatinSymbol
        {
            get { return _latinSymbol; }
            set
            {
                if (_latinSymbol != value)
                {
                    ChangeTracker.RecordOriginalValue("LatinSymbol", _latinSymbol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LatinSymbol"))
                            ChangeTracker.RecordOriginalValue("LatinSymbol", _latinSymbol);
                            
                    _latinSymbol = value;
                    OnPropertyChanged("LatinSymbol");
                }
            }
        }
        protected string _latinSymbol;
    [MaxLength(50)]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual string LatinName
        {
            get { return _latinName; }
            set
            {
                if (_latinName != value)
                {
                    ChangeTracker.RecordOriginalValue("LatinName", _latinName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LatinName"))
                            ChangeTracker.RecordOriginalValue("LatinName", _latinName);
                            
                    _latinName = value;
                    OnPropertyChanged("LatinName");
                }
            }
        }
        protected string _latinName;
    [MaxLength(4)]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual string CompanyCode
        {
            get { return _companyCode; }
            set
            {
                if (_companyCode != value)
                {
                    ChangeTracker.RecordOriginalValue("CompanyCode", _companyCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CompanyCode"))
                            ChangeTracker.RecordOriginalValue("CompanyCode", _companyCode);
                            
                    _companyCode = value;
                    OnPropertyChanged("CompanyCode");
                }
            }
        }
        protected string _companyCode;
    [MaxLength(18)]
    
[Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Symbol"))
                            ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                            
                    _symbol = value;
                    OnPropertyChanged("Symbol");
                }
            }
        }
        protected string _symbol;
    [MaxLength(30)]
    
[Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Name"))
                            ChangeTracker.RecordOriginalValue("Name", _name);
                            
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        protected string _name;
    [MaxLength(12)]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual string CIsin
        {
            get { return _cIsin; }
            set
            {
                if (_cIsin != value)
                {
                    ChangeTracker.RecordOriginalValue("CIsin", _cIsin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CIsin"))
                            ChangeTracker.RecordOriginalValue("CIsin", _cIsin);
                            
                    _cIsin = value;
                    OnPropertyChanged("CIsin");
                }
            }
        }
        protected string _cIsin;
    	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual Nullable<int> DEven
        {
            get { return _dEven; }
            set
            {
                if (_dEven != value)
                {
                    ChangeTracker.RecordOriginalValue("DEven", _dEven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DEven"))
                            ChangeTracker.RecordOriginalValue("DEven", _dEven);
                            
                    _dEven = value;
                    OnPropertyChanged("DEven");
                }
            }
        }
        protected Nullable<int> _dEven;
    [Required]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual byte Flow
        {
            get { return _flow; }
            set
            {
                if (_flow != value)
                {
                    ChangeTracker.RecordOriginalValue("Flow", _flow);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Flow"))
                            ChangeTracker.RecordOriginalValue("Flow", _flow);
                            
                    _flow = value;
                    OnPropertyChanged("Flow");
                }
            }
        }
        protected byte _flow;
    [MaxLength(50)]
    
[Required]
    
	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual string LSoc30
        {
            get { return _lSoc30; }
            set
            {
                if (_lSoc30 != value)
                {
                    ChangeTracker.RecordOriginalValue("LSoc30", _lSoc30);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LSoc30"))
                            ChangeTracker.RecordOriginalValue("LSoc30", _lSoc30);
                            
                    _lSoc30 = value;
                    OnPropertyChanged("LSoc30");
                }
            }
        }
        protected string _lSoc30;
    [MaxLength(50)]
    
[Required]
    
	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual string CGdSVal
        {
            get { return _cGdSVal; }
            set
            {
                if (_cGdSVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CGdSVal", _cGdSVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CGdSVal"))
                            ChangeTracker.RecordOriginalValue("CGdSVal", _cGdSVal);
                            
                    _cGdSVal = value;
                    OnPropertyChanged("CGdSVal");
                }
            }
        }
        protected string _cGdSVal;
    [MaxLength(50)]
    
	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual string CGrValCot
        {
            get { return _cGrValCot; }
            set
            {
                if (_cGrValCot != value)
                {
                    ChangeTracker.RecordOriginalValue("CGrValCot", _cGrValCot);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CGrValCot"))
                            ChangeTracker.RecordOriginalValue("CGrValCot", _cGrValCot);
                            
                    _cGrValCot = value;
                    OnPropertyChanged("CGrValCot");
                }
            }
        }
        protected string _cGrValCot;
    [MaxLength(50)]
    
	[ProtoMember(14)]
    
    [DataMember]
    
    public virtual string YMarNSC
        {
            get { return _yMarNSC; }
            set
            {
                if (_yMarNSC != value)
                {
                    ChangeTracker.RecordOriginalValue("YMarNSC", _yMarNSC);
                        if (!ChangeTracker.OriginalValues.ContainsKey("YMarNSC"))
                            ChangeTracker.RecordOriginalValue("YMarNSC", _yMarNSC);
                            
                    _yMarNSC = value;
                    OnPropertyChanged("YMarNSC");
                }
            }
        }
        protected string _yMarNSC;
    [MaxLength(50)]
    
	[ProtoMember(15)]
    
    [DataMember]
    
    public virtual string CComVal
        {
            get { return _cComVal; }
            set
            {
                if (_cComVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CComVal", _cComVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CComVal"))
                            ChangeTracker.RecordOriginalValue("CComVal", _cComVal);
                            
                    _cComVal = value;
                    OnPropertyChanged("CComVal");
                }
            }
        }
        protected string _cComVal;
    [MaxLength(2)]
    
	[ProtoMember(16)]
    
    [DataMember]
    
    public virtual string CSecVal
        {
            get { return _cSecVal; }
            set
            {
                if (_cSecVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CSecVal"))
                            ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                            
                    _cSecVal = value;
                    OnPropertyChanged("CSecVal");
                }
            }
        }
        protected string _cSecVal;
    [MaxLength(5)]
    
	[ProtoMember(17)]
    
    [DataMember]
    
    public virtual string CSoSecVal
        {
            get { return _cSoSecVal; }
            set
            {
                if (_cSoSecVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CSoSecVal", _cSoSecVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CSoSecVal"))
                            ChangeTracker.RecordOriginalValue("CSoSecVal", _cSoSecVal);
                            
                    _cSoSecVal = value;
                    OnPropertyChanged("CSoSecVal");
                }
            }
        }
        protected string _cSoSecVal;
    [MaxLength(5)]
    
	[ProtoMember(18)]
    
    [DataMember]
    
    public virtual string YVal
        {
            get { return _yVal; }
            set
            {
                if (_yVal != value)
                {
                    ChangeTracker.RecordOriginalValue("YVal", _yVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("YVal"))
                            ChangeTracker.RecordOriginalValue("YVal", _yVal);
                            
                    _yVal = value;
                    OnPropertyChanged("YVal");
                }
            }
        }
        protected string _yVal;
    [Required]
    
	[ProtoMember(19)]
    
    [DataMember]
    
    public virtual double Eps
        {
            get { return _eps; }
            set
            {
                if (_eps != value)
                {
                    ChangeTracker.RecordOriginalValue("Eps", _eps);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Eps"))
                            ChangeTracker.RecordOriginalValue("Eps", _eps);
                            
                    _eps = value;
                    OnPropertyChanged("Eps");
                }
            }
        }
        protected double _eps;
    [Required]
    
	[ProtoMember(20)]
    
    [DataMember]
    
    public virtual double Pe
        {
            get { return _pe; }
            set
            {
                if (_pe != value)
                {
                    ChangeTracker.RecordOriginalValue("Pe", _pe);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Pe"))
                            ChangeTracker.RecordOriginalValue("Pe", _pe);
                            
                    _pe = value;
                    OnPropertyChanged("Pe");
                }
            }
        }
        protected double _pe;
    	[ProtoMember(21)]
    
    [DataMember]
    
    public virtual Nullable<byte> Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    ChangeTracker.RecordOriginalValue("Type", _type);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Type"))
                            ChangeTracker.RecordOriginalValue("Type", _type);
                            
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        protected Nullable<byte> _type;
    [Required]
    
	[ProtoMember(22)]
    
    [DataMember]
    
    public virtual long BVol
        {
            get { return _bVol; }
            set
            {
                if (_bVol != value)
                {
                    ChangeTracker.RecordOriginalValue("BVol", _bVol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("BVol"))
                            ChangeTracker.RecordOriginalValue("BVol", _bVol);
                            
                    _bVol = value;
                    OnPropertyChanged("BVol");
                }
            }
        }
        protected long _bVol;
    [Required]
    
	[ProtoMember(23)]
    
    [DataMember]
    
    public virtual int Cs
        {
            get { return _cs; }
            set
            {
                if (_cs != value)
                {
                    ChangeTracker.RecordOriginalValue("Cs", _cs);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Cs"))
                            ChangeTracker.RecordOriginalValue("Cs", _cs);
                            
                    _cs = value;
                    OnPropertyChanged("Cs");
                }
            }
        }
        protected int _cs;
    [Required]
    
	[ProtoMember(24)]
    
    [DataMember]
    
    public virtual long Z
        {
            get { return _z; }
            set
            {
                if (_z != value)
                {
                    ChangeTracker.RecordOriginalValue("Z", _z);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Z"))
                            ChangeTracker.RecordOriginalValue("Z", _z);
                            
                    _z = value;
                    OnPropertyChanged("Z");
                }
            }
        }
        protected long _z;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(25,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<Message> Messages
        {
            get
            {
                if (_messages == null)
                {
                    _messages = new TrackableCollection<Message>();
                    _messages.CollectionChanged += FixupMessages;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_messages != null)
                    {
                        _messages.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    if (_messages != null)
                    {
                        _messages.CollectionChanged += FixupMessages;
                    }
                    OnNavigationPropertyChanged("Messages");
                }
            }
        }
        protected TrackableCollection<Message> _messages;
    
     	[ProtoMember(26,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<IndexLastDayTimeValue> IndexValues
        {
            get
            {
                if (_indexValues == null)
                {
                    _indexValues = new TrackableCollection<IndexLastDayTimeValue>();
                    _indexValues.CollectionChanged += FixupIndexValues;
                }
                return _indexValues;
            }
            set
            {
                if (!ReferenceEquals(_indexValues, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_indexValues != null)
                    {
                        _indexValues.CollectionChanged -= FixupIndexValues;
                    }
                    _indexValues = value;
                    if (_indexValues != null)
                    {
                        _indexValues.CollectionChanged += FixupIndexValues;
                    }
                    OnNavigationPropertyChanged("IndexValues");
                }
            }
        }
        protected TrackableCollection<IndexLastDayTimeValue> _indexValues;
    
     	[ProtoMember(27,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<NotificationLog> NotificationLogs
        {
            get
            {
                if (_notificationLogs == null)
                {
                    _notificationLogs = new TrackableCollection<NotificationLog>();
                    _notificationLogs.CollectionChanged += FixupNotificationLogs;
                }
                return _notificationLogs;
            }
            set
            {
                if (!ReferenceEquals(_notificationLogs, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_notificationLogs != null)
                    {
                        _notificationLogs.CollectionChanged -= FixupNotificationLogs;
                    }
                    _notificationLogs = value;
                    if (_notificationLogs != null)
                    {
                        _notificationLogs.CollectionChanged += FixupNotificationLogs;
                    }
                    OnNavigationPropertyChanged("NotificationLogs");
                }
            }
        }
        protected TrackableCollection<NotificationLog> _notificationLogs;
    
     	[ProtoMember(28,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<Portfolio> Portfolios
        {
            get
            {
                if (_portfolios == null)
                {
                    _portfolios = new TrackableCollection<Portfolio>();
                    _portfolios.CollectionChanged += FixupPortfolios;
                }
                return _portfolios;
            }
            set
            {
                if (!ReferenceEquals(_portfolios, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_portfolios != null)
                    {
                        _portfolios.CollectionChanged -= FixupPortfolios;
                    }
                    _portfolios = value;
                    if (_portfolios != null)
                    {
                        _portfolios.CollectionChanged += FixupPortfolios;
                    }
                    OnNavigationPropertyChanged("Portfolios");
                }
            }
        }
        protected TrackableCollection<Portfolio> _portfolios;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        Instrument cloned = new Instrument();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._insCode=this._insCode;
             cloned._instrumentID=this._instrumentID;
             cloned._latinSymbol=this._latinSymbol;
             cloned._latinName=this._latinName;
             cloned._companyCode=this._companyCode;
             cloned._symbol=this._symbol;
             cloned._name=this._name;
             cloned._cIsin=this._cIsin;
             cloned._dEven=this._dEven;
             cloned._flow=this._flow;
             cloned._lSoc30=this._lSoc30;
             cloned._cGdSVal=this._cGdSVal;
             cloned._cGrValCot=this._cGrValCot;
             cloned._yMarNSC=this._yMarNSC;
             cloned._cComVal=this._cComVal;
             cloned._cSecVal=this._cSecVal;
             cloned._cSoSecVal=this._cSoSecVal;
             cloned._yVal=this._yVal;
             cloned._eps=this._eps;
             cloned._pe=this._pe;
             cloned._type=this._type;
             cloned._bVol=this._bVol;
             cloned._cs=this._cs;
             cloned._z=this._z;
        	
    if(Messages!=null){
        cloned.Messages=new TrackableCollection<Message>();
        foreach(Message item in Messages)
        if (!clonedObjects.ContainsKey(item))
        cloned.Messages.Add((Message)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.Messages.Add((Message)clonedObjects[item]);
    }
    	
    if(IndexValues!=null){
        cloned.IndexValues=new TrackableCollection<IndexLastDayTimeValue>();
        foreach(IndexLastDayTimeValue item in IndexValues)
        if (!clonedObjects.ContainsKey(item))
        cloned.IndexValues.Add((IndexLastDayTimeValue)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.IndexValues.Add((IndexLastDayTimeValue)clonedObjects[item]);
    }
    	
    if(NotificationLogs!=null){
        cloned.NotificationLogs=new TrackableCollection<NotificationLog>();
        foreach(NotificationLog item in NotificationLogs)
        if (!clonedObjects.ContainsKey(item))
        cloned.NotificationLogs.Add((NotificationLog)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.NotificationLogs.Add((NotificationLog)clonedObjects[item]);
    }
    	
    if(Portfolios!=null){
        cloned.Portfolios=new TrackableCollection<Portfolio>();
        foreach(Portfolio item in Portfolios)
        if (!clonedObjects.ContainsKey(item))
        cloned.Portfolios.Add((Portfolio)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.Portfolios.Add((Portfolio)clonedObjects[item]);
    }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._instrumentID.ToString());
    					// InstrumentID
    			sb.Append("`");
    
    						sb.Append(this._latinSymbol?.ToString());
    						// LatinSymbol
    			sb.Append("`");
    
    						sb.Append(this._latinName?.ToString());
    						// LatinName
    			sb.Append("`");
    
    						sb.Append(this._companyCode?.ToString());
    						// CompanyCode
    			sb.Append("`");
    
    						sb.Append(this._symbol.ToString());
    					// Symbol
    			sb.Append("`");
    
    						sb.Append(this._name.ToString());
    					// Name
    			sb.Append("`");
    
    						sb.Append(this._cIsin?.ToString());
    						// CIsin
    			sb.Append("`");
    
    						sb.Append(this._dEven?.ToString());
    						// DEven
    			sb.Append("`");
    
    						sb.Append(this._flow.ToString());
    					// Flow
    			sb.Append("`");
    
    						sb.Append(this._lSoc30.ToString());
    					// LSoc30
    			sb.Append("`");
    
    						sb.Append(this._cGdSVal.ToString());
    					// CGdSVal
    			sb.Append("`");
    
    						sb.Append(this._cGrValCot?.ToString());
    						// CGrValCot
    			sb.Append("`");
    
    						sb.Append(this._yMarNSC?.ToString());
    						// YMarNSC
    			sb.Append("`");
    
    						sb.Append(this._cComVal?.ToString());
    						// CComVal
    			sb.Append("`");
    
    						sb.Append(this._cSecVal?.ToString());
    						// CSecVal
    			sb.Append("`");
    
    						sb.Append(this._cSoSecVal?.ToString());
    						// CSoSecVal
    			sb.Append("`");
    
    						sb.Append(this._yVal?.ToString());
    						// YVal
    			sb.Append("`");
    
    						sb.Append(this._eps.ToString());
    					// Eps
    			sb.Append("`");
    
    						sb.Append(this._pe.ToString());
    					// Pe
    			sb.Append("`");
    
    						sb.Append(this._type?.ToString());
    						// Type
    			sb.Append("`");
    
    						sb.Append(this._bVol.ToString());
    					// BVol
    			sb.Append("`");
    
    						sb.Append(this._cs.ToString());
    					// Cs
    			sb.Append("`");
    
    						sb.Append(this._z.ToString());
    					// Z
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<Instrument>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<Instrument>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=29;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_messages!=null)
        foreach(var item in _messages) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_indexValues!=null)
        foreach(var item in _indexValues) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_notificationLogs!=null)
        foreach(var item in _notificationLogs) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        	
        if(_portfolios!=null)
        foreach(var item in _portfolios) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        Instrument casted_other = other as Instrument;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InstrumentID,casted_other.InstrumentID))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LatinSymbol,casted_other.LatinSymbol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LatinName,casted_other.LatinName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CompanyCode,casted_other.CompanyCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Symbol,casted_other.Symbol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Name,casted_other.Name))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CIsin,casted_other.CIsin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DEven,casted_other.DEven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Flow,casted_other.Flow))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LSoc30,casted_other.LSoc30))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CGdSVal,casted_other.CGdSVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CGrValCot,casted_other.CGrValCot))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.YMarNSC,casted_other.YMarNSC))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CComVal,casted_other.CComVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CSecVal,casted_other.CSecVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CSoSecVal,casted_other.CSoSecVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.YVal,casted_other.YVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Eps,casted_other.Eps))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Pe,casted_other.Pe))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Type,casted_other.Type))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.BVol,casted_other.BVol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Cs,casted_other.Cs))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Z,casted_other.Z))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.Messages.Count!= casted_other.Messages.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> Messages_compared=new List<int>(this.Messages.Count);
    for(int i=0;i<this.Messages.Count;++i)
    	if(this.Messages[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.Messages.Count;++j){
    			if(Messages_compared.Contains(j)) continue;			
    			if(this.Messages[i].Equals(casted_other.Messages[j],checked_objects)){
    				Messages_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.Messages.Count;++j){
    			if(Messages_compared.Contains(j)) continue;
    			if(casted_other.Messages[j]==null){
    				Messages_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(Messages_compared.Distinct().Count()!=this.Messages.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.IndexValues.Count!= casted_other.IndexValues.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> IndexValues_compared=new List<int>(this.IndexValues.Count);
    for(int i=0;i<this.IndexValues.Count;++i)
    	if(this.IndexValues[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.IndexValues.Count;++j){
    			if(IndexValues_compared.Contains(j)) continue;			
    			if(this.IndexValues[i].Equals(casted_other.IndexValues[j],checked_objects)){
    				IndexValues_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.IndexValues.Count;++j){
    			if(IndexValues_compared.Contains(j)) continue;
    			if(casted_other.IndexValues[j]==null){
    				IndexValues_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(IndexValues_compared.Distinct().Count()!=this.IndexValues.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.NotificationLogs.Count!= casted_other.NotificationLogs.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> NotificationLogs_compared=new List<int>(this.NotificationLogs.Count);
    for(int i=0;i<this.NotificationLogs.Count;++i)
    	if(this.NotificationLogs[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.NotificationLogs.Count;++j){
    			if(NotificationLogs_compared.Contains(j)) continue;			
    			if(this.NotificationLogs[i].Equals(casted_other.NotificationLogs[j],checked_objects)){
    				NotificationLogs_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.NotificationLogs.Count;++j){
    			if(NotificationLogs_compared.Contains(j)) continue;
    			if(casted_other.NotificationLogs[j]==null){
    				NotificationLogs_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(NotificationLogs_compared.Distinct().Count()!=this.NotificationLogs.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    	
    if(this.Portfolios.Count!= casted_other.Portfolios.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> Portfolios_compared=new List<int>(this.Portfolios.Count);
    for(int i=0;i<this.Portfolios.Count;++i)
    	if(this.Portfolios[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.Portfolios.Count;++j){
    			if(Portfolios_compared.Contains(j)) continue;			
    			if(this.Portfolios[i].Equals(casted_other.Portfolios[j],checked_objects)){
    				Portfolios_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.Portfolios.Count;++j){
    			if(Portfolios_compared.Contains(j)) continue;
    			if(casted_other.Portfolios[j]==null){
    				Portfolios_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(Portfolios_compared.Distinct().Count()!=this.Portfolios.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=false
    	 };
    						// This is none identity primary key	
    						}
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "InsCode", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=false
        
         };
              yield return new BaseField{Name= "InstrumentID", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=12
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "LatinSymbol", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "LatinName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CompanyCode", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=4
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Symbol", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=18
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Name", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=30
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CIsin", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=12
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "DEven", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Flow", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "LSoc30", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CGdSVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CGrValCot", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "YMarNSC", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CComVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CSecVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=2
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CSoSecVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "YVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Eps", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Pe", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Type", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "BVol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Cs", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Z", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "Messages", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<Message>),TargetType =typeof(Message)
            ,DependentProperty="",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "IndexValues", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<IndexLastDayTimeValue>),TargetType =typeof(IndexLastDayTimeValue)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "NotificationLogs", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<NotificationLog>),TargetType =typeof(NotificationLog)
            ,DependentProperty="InsCode",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    
    
                
            yield return new BaseField{Name= "Portfolios", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<Portfolio>),TargetType =typeof(Portfolio)
            ,DependentProperty="",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.Many
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vInsCode=(long)this.GetValue("InsCode");
        Expression<Func<Instrument,bool>> exp = p => p.InsCode == vInsCode ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "inscode":
                retVal = this.InsCode;
                break;
            case "instrumentid":
                retVal = this.InstrumentID;
                break;
            case "latinsymbol":
                retVal = this.LatinSymbol;
                break;
            case "latinname":
                retVal = this.LatinName;
                break;
            case "companycode":
                retVal = this.CompanyCode;
                break;
            case "symbol":
                retVal = this.Symbol;
                break;
            case "name":
                retVal = this.Name;
                break;
            case "cisin":
                retVal = this.CIsin;
                break;
            case "deven":
                retVal = this.DEven;
                break;
            case "flow":
                retVal = this.Flow;
                break;
            case "lsoc30":
                retVal = this.LSoc30;
                break;
            case "cgdsval":
                retVal = this.CGdSVal;
                break;
            case "cgrvalcot":
                retVal = this.CGrValCot;
                break;
            case "ymarnsc":
                retVal = this.YMarNSC;
                break;
            case "ccomval":
                retVal = this.CComVal;
                break;
            case "csecval":
                retVal = this.CSecVal;
                break;
            case "csosecval":
                retVal = this.CSoSecVal;
                break;
            case "yval":
                retVal = this.YVal;
                break;
            case "eps":
                retVal = this.Eps;
                break;
            case "pe":
                retVal = this.Pe;
                break;
            case "type":
                retVal = this.Type;
                break;
            case "bvol":
                retVal = this.BVol;
                break;
            case "cs":
                retVal = this.Cs;
                break;
            case "z":
                retVal = this.Z;
                break;
        	
            case "messages":
                   retVal= this.Messages;
            break;
            case "indexvalues":
                   retVal= this.IndexValues;
            break;
            case "notificationlogs":
                   retVal= this.NotificationLogs;
            break;
            case "portfolios":
                   retVal= this.Portfolios;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _insCode!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<Messages.Count;++i)
                    ((IObjectWithChangeTracker)Messages[i]).StartTracking();
                                for(int i=0;i<IndexValues.Count;++i)
                    ((IObjectWithChangeTracker)IndexValues[i]).StartTracking();
                                for(int i=0;i<NotificationLogs.Count;++i)
                    ((IObjectWithChangeTracker)NotificationLogs[i]).StartTracking();
                                for(int i=0;i<Portfolios.Count;++i)
                    ((IObjectWithChangeTracker)Portfolios[i]).StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<Messages.Count;++i)
                    ((IObjectWithChangeTracker)Messages[i]).StopTracking();
                                for(int i=0;i<IndexValues.Count;++i)
                    ((IObjectWithChangeTracker)IndexValues[i]).StopTracking();
                                for(int i=0;i<NotificationLogs.Count;++i)
                    ((IObjectWithChangeTracker)NotificationLogs[i]).StopTracking();
                                for(int i=0;i<Portfolios.Count;++i)
                    ((IObjectWithChangeTracker)Portfolios[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "instrumentid":
                this.InstrumentID =(string)value;
            break;
            case "latinsymbol":
                this.LatinSymbol =(string)value;
            break;
            case "latinname":
                this.LatinName =(string)value;
            break;
            case "companycode":
                this.CompanyCode =(string)value;
            break;
            case "symbol":
                this.Symbol =(string)value;
            break;
            case "name":
                this.Name =(string)value;
            break;
            case "cisin":
                this.CIsin =(string)value;
            break;
            case "deven":
                this.DEven =(Nullable<int>)value;
            break;
            case "flow":
                this.Flow =(byte)value;
            break;
            case "lsoc30":
                this.LSoc30 =(string)value;
            break;
            case "cgdsval":
                this.CGdSVal =(string)value;
            break;
            case "cgrvalcot":
                this.CGrValCot =(string)value;
            break;
            case "ymarnsc":
                this.YMarNSC =(string)value;
            break;
            case "ccomval":
                this.CComVal =(string)value;
            break;
            case "csecval":
                this.CSecVal =(string)value;
            break;
            case "csosecval":
                this.CSoSecVal =(string)value;
            break;
            case "yval":
                this.YVal =(string)value;
            break;
            case "eps":
                this.Eps =(double)value;
            break;
            case "pe":
                this.Pe =(double)value;
            break;
            case "type":
                this.Type =(Nullable<byte>)value;
            break;
            case "bvol":
                this.BVol =(long)value;
            break;
            case "cs":
                this.Cs =(int)value;
            break;
            case "z":
                this.Z =(long)value;
            break;
    	
            case "messages":
             this.Messages =(TrackableCollection<Message>) value;
            break;
            case "indexvalues":
             this.IndexValues =(TrackableCollection<IndexLastDayTimeValue>) value;
            break;
            case "notificationlogs":
             this.NotificationLogs =(TrackableCollection<NotificationLog>) value;
            break;
            case "portfolios":
             this.Portfolios =(TrackableCollection<Portfolio>) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Messages.Clear();
            IndexValues.Clear();
            NotificationLogs.Clear();
            Portfolios.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    if (!item.Instruments.Contains(this))
                    {
                        item.Instruments.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Messages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (item.Instruments.Contains(this))
                    {
                        item.Instruments.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Messages", item);
                    }
                }
            }
        }
    
        private void FixupIndexValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IndexLastDayTimeValue item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("IndexValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IndexLastDayTimeValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("IndexValues", item);
                    }
                }
            }
        }
    
        private void FixupNotificationLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NotificationLog item in e.NewItems)
                {
                    item.Instrument = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NotificationLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NotificationLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Instrument, this))
                    {
                        item.Instrument = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NotificationLogs", item);
                    }
                }
            }
        }
    
        private void FixupPortfolios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Portfolio item in e.NewItems)
                {
                    if (!item.Instruments.Contains(this))
                    {
                        item.Instruments.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Portfolios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Portfolio item in e.OldItems)
                {
                    if (item.Instruments.Contains(this))
                    {
                        item.Instruments.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Portfolios", item);
                    }
                }
            }
        }

        #endregion

    }
}
