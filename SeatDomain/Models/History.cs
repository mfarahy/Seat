//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IHistory{
    
     long HistoryPK{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     System.DateTime Date{
      get;
      set;
      }
    
     int DEven{
      get;
      set;
      }
    
     decimal PClosing{
      get;
      set;
      }
    
     int PDrCotVal{
      get;
      set;
      }
    
     long ZTotTran{
      get;
      set;
      }
    
     long QTotTran5J{
      get;
      set;
      }
    
     long QTotCap{
      get;
      set;
      }
    
     int PriceMin{
      get;
      set;
      }
    
     int PriceMax{
      get;
      set;
      }
    
     decimal PriceYesterday{
      get;
      set;
      }
    
     int PriceFirst{
      get;
      set;
      }
    
     int Heven{
      get;
      set;
      }
    
     double Eps{
      get;
      set;
      }
    
     double Pe{
      get;
      set;
      }
    
     int VisitCount{
      get;
      set;
      }
    
     long BigMoney{
      get;
      set;
      }
    
     int Buy_CountI{
      get;
      set;
      }
    
     int Buy_CountN{
      get;
      set;
      }
    
     long Buy_I_Volume{
      get;
      set;
      }
    
     long Buy_N_Volume{
      get;
      set;
      }
    
     int Sell_CountI{
      get;
      set;
      }
    
     int Sell_CountN{
      get;
      set;
      }
    
     long Sell_I_Volume{
      get;
      set;
      }
    
     long Sell_N_Volume{
      get;
      set;
      }
    
     bool HasDetails{
      get;
      set;
      }
    
    }// interface
    
    [Table("Histories")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(HistoryPK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class History:IEntityBase, IHistory,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long HistoryPK
        {
            get { return _historyPK; }
            set
            {
                if (_historyPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_historyPK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'HistoryPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _historyPK = value;
                    OnPropertyChanged("HistoryPK");
                }
            }
        }
        protected long _historyPK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual System.DateTime Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    ChangeTracker.RecordOriginalValue("Date", _date);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Date"))
                            ChangeTracker.RecordOriginalValue("Date", _date);
                            
                    _date = value;
                    OnPropertyChanged("Date");
                }
            }
        }
        protected System.DateTime _date;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual int DEven
        {
            get { return _dEven; }
            set
            {
                if (_dEven != value)
                {
                    ChangeTracker.RecordOriginalValue("DEven", _dEven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DEven"))
                            ChangeTracker.RecordOriginalValue("DEven", _dEven);
                            
                    _dEven = value;
                    OnPropertyChanged("DEven");
                }
            }
        }
        protected int _dEven;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual decimal PClosing
        {
            get { return _pClosing; }
            set
            {
                if (_pClosing != value)
                {
                    ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PClosing"))
                            ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                            
                    _pClosing = value;
                    OnPropertyChanged("PClosing");
                }
            }
        }
        protected decimal _pClosing;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual int PDrCotVal
        {
            get { return _pDrCotVal; }
            set
            {
                if (_pDrCotVal != value)
                {
                    ChangeTracker.RecordOriginalValue("PDrCotVal", _pDrCotVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PDrCotVal"))
                            ChangeTracker.RecordOriginalValue("PDrCotVal", _pDrCotVal);
                            
                    _pDrCotVal = value;
                    OnPropertyChanged("PDrCotVal");
                }
            }
        }
        protected int _pDrCotVal;
    [Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual long ZTotTran
        {
            get { return _zTotTran; }
            set
            {
                if (_zTotTran != value)
                {
                    ChangeTracker.RecordOriginalValue("ZTotTran", _zTotTran);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ZTotTran"))
                            ChangeTracker.RecordOriginalValue("ZTotTran", _zTotTran);
                            
                    _zTotTran = value;
                    OnPropertyChanged("ZTotTran");
                }
            }
        }
        protected long _zTotTran;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual long QTotTran5J
        {
            get { return _qTotTran5J; }
            set
            {
                if (_qTotTran5J != value)
                {
                    ChangeTracker.RecordOriginalValue("QTotTran5J", _qTotTran5J);
                        if (!ChangeTracker.OriginalValues.ContainsKey("QTotTran5J"))
                            ChangeTracker.RecordOriginalValue("QTotTran5J", _qTotTran5J);
                            
                    _qTotTran5J = value;
                    OnPropertyChanged("QTotTran5J");
                }
            }
        }
        protected long _qTotTran5J;
    [Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual long QTotCap
        {
            get { return _qTotCap; }
            set
            {
                if (_qTotCap != value)
                {
                    ChangeTracker.RecordOriginalValue("QTotCap", _qTotCap);
                        if (!ChangeTracker.OriginalValues.ContainsKey("QTotCap"))
                            ChangeTracker.RecordOriginalValue("QTotCap", _qTotCap);
                            
                    _qTotCap = value;
                    OnPropertyChanged("QTotCap");
                }
            }
        }
        protected long _qTotCap;
    [Required]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual int PriceMin
        {
            get { return _priceMin; }
            set
            {
                if (_priceMin != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceMin", _priceMin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceMin"))
                            ChangeTracker.RecordOriginalValue("PriceMin", _priceMin);
                            
                    _priceMin = value;
                    OnPropertyChanged("PriceMin");
                }
            }
        }
        protected int _priceMin;
    [Required]
    
	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual int PriceMax
        {
            get { return _priceMax; }
            set
            {
                if (_priceMax != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceMax", _priceMax);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceMax"))
                            ChangeTracker.RecordOriginalValue("PriceMax", _priceMax);
                            
                    _priceMax = value;
                    OnPropertyChanged("PriceMax");
                }
            }
        }
        protected int _priceMax;
    [Required]
    
	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual decimal PriceYesterday
        {
            get { return _priceYesterday; }
            set
            {
                if (_priceYesterday != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceYesterday", _priceYesterday);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceYesterday"))
                            ChangeTracker.RecordOriginalValue("PriceYesterday", _priceYesterday);
                            
                    _priceYesterday = value;
                    OnPropertyChanged("PriceYesterday");
                }
            }
        }
        protected decimal _priceYesterday;
    [Required]
    
	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual int PriceFirst
        {
            get { return _priceFirst; }
            set
            {
                if (_priceFirst != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceFirst", _priceFirst);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceFirst"))
                            ChangeTracker.RecordOriginalValue("PriceFirst", _priceFirst);
                            
                    _priceFirst = value;
                    OnPropertyChanged("PriceFirst");
                }
            }
        }
        protected int _priceFirst;
    [Required]
    
	[ProtoMember(14)]
    
    [DataMember]
    
    public virtual int Heven
        {
            get { return _heven; }
            set
            {
                if (_heven != value)
                {
                    ChangeTracker.RecordOriginalValue("Heven", _heven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Heven"))
                            ChangeTracker.RecordOriginalValue("Heven", _heven);
                            
                    _heven = value;
                    OnPropertyChanged("Heven");
                }
            }
        }
        protected int _heven;
    [Required]
    
	[ProtoMember(15)]
    
    [DataMember]
    
    public virtual double Eps
        {
            get { return _eps; }
            set
            {
                if (_eps != value)
                {
                    ChangeTracker.RecordOriginalValue("Eps", _eps);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Eps"))
                            ChangeTracker.RecordOriginalValue("Eps", _eps);
                            
                    _eps = value;
                    OnPropertyChanged("Eps");
                }
            }
        }
        protected double _eps;
    [Required]
    
	[ProtoMember(16)]
    
    [DataMember]
    
    public virtual double Pe
        {
            get { return _pe; }
            set
            {
                if (_pe != value)
                {
                    ChangeTracker.RecordOriginalValue("Pe", _pe);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Pe"))
                            ChangeTracker.RecordOriginalValue("Pe", _pe);
                            
                    _pe = value;
                    OnPropertyChanged("Pe");
                }
            }
        }
        protected double _pe;
    [Required]
    
	[ProtoMember(17)]
    
    [DataMember]
    
    public virtual int VisitCount
        {
            get { return _visitCount; }
            set
            {
                if (_visitCount != value)
                {
                    ChangeTracker.RecordOriginalValue("VisitCount", _visitCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("VisitCount"))
                            ChangeTracker.RecordOriginalValue("VisitCount", _visitCount);
                            
                    _visitCount = value;
                    OnPropertyChanged("VisitCount");
                }
            }
        }
        protected int _visitCount;
    [Required]
    
	[ProtoMember(18)]
    
    [DataMember]
    
    public virtual long BigMoney
        {
            get { return _bigMoney; }
            set
            {
                if (_bigMoney != value)
                {
                    ChangeTracker.RecordOriginalValue("BigMoney", _bigMoney);
                        if (!ChangeTracker.OriginalValues.ContainsKey("BigMoney"))
                            ChangeTracker.RecordOriginalValue("BigMoney", _bigMoney);
                            
                    _bigMoney = value;
                    OnPropertyChanged("BigMoney");
                }
            }
        }
        protected long _bigMoney;
    [Required]
    
	[ProtoMember(19)]
    
    [DataMember]
    
    public virtual int Buy_CountI
        {
            get { return _buy_CountI; }
            set
            {
                if (_buy_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_CountI", _buy_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_CountI"))
                            ChangeTracker.RecordOriginalValue("Buy_CountI", _buy_CountI);
                            
                    _buy_CountI = value;
                    OnPropertyChanged("Buy_CountI");
                }
            }
        }
        protected int _buy_CountI;
    [Required]
    
	[ProtoMember(20)]
    
    [DataMember]
    
    public virtual int Buy_CountN
        {
            get { return _buy_CountN; }
            set
            {
                if (_buy_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_CountN", _buy_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_CountN"))
                            ChangeTracker.RecordOriginalValue("Buy_CountN", _buy_CountN);
                            
                    _buy_CountN = value;
                    OnPropertyChanged("Buy_CountN");
                }
            }
        }
        protected int _buy_CountN;
    [Required]
    
	[ProtoMember(21)]
    
    [DataMember]
    
    public virtual long Buy_I_Volume
        {
            get { return _buy_I_Volume; }
            set
            {
                if (_buy_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_I_Volume", _buy_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Buy_I_Volume", _buy_I_Volume);
                            
                    _buy_I_Volume = value;
                    OnPropertyChanged("Buy_I_Volume");
                }
            }
        }
        protected long _buy_I_Volume;
    [Required]
    
	[ProtoMember(22)]
    
    [DataMember]
    
    public virtual long Buy_N_Volume
        {
            get { return _buy_N_Volume; }
            set
            {
                if (_buy_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_N_Volume", _buy_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Buy_N_Volume", _buy_N_Volume);
                            
                    _buy_N_Volume = value;
                    OnPropertyChanged("Buy_N_Volume");
                }
            }
        }
        protected long _buy_N_Volume;
    [Required]
    
	[ProtoMember(23)]
    
    [DataMember]
    
    public virtual int Sell_CountI
        {
            get { return _sell_CountI; }
            set
            {
                if (_sell_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_CountI", _sell_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_CountI"))
                            ChangeTracker.RecordOriginalValue("Sell_CountI", _sell_CountI);
                            
                    _sell_CountI = value;
                    OnPropertyChanged("Sell_CountI");
                }
            }
        }
        protected int _sell_CountI;
    [Required]
    
	[ProtoMember(24)]
    
    [DataMember]
    
    public virtual int Sell_CountN
        {
            get { return _sell_CountN; }
            set
            {
                if (_sell_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_CountN", _sell_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_CountN"))
                            ChangeTracker.RecordOriginalValue("Sell_CountN", _sell_CountN);
                            
                    _sell_CountN = value;
                    OnPropertyChanged("Sell_CountN");
                }
            }
        }
        protected int _sell_CountN;
    [Required]
    
	[ProtoMember(25)]
    
    [DataMember]
    
    public virtual long Sell_I_Volume
        {
            get { return _sell_I_Volume; }
            set
            {
                if (_sell_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_I_Volume", _sell_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Sell_I_Volume", _sell_I_Volume);
                            
                    _sell_I_Volume = value;
                    OnPropertyChanged("Sell_I_Volume");
                }
            }
        }
        protected long _sell_I_Volume;
    [Required]
    
	[ProtoMember(26)]
    
    [DataMember]
    
    public virtual long Sell_N_Volume
        {
            get { return _sell_N_Volume; }
            set
            {
                if (_sell_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_N_Volume", _sell_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Sell_N_Volume", _sell_N_Volume);
                            
                    _sell_N_Volume = value;
                    OnPropertyChanged("Sell_N_Volume");
                }
            }
        }
        protected long _sell_N_Volume;
    [Required]
    
	[ProtoMember(27)]
    
    [DataMember]
    
    public virtual bool HasDetails
        {
            get { return _hasDetails; }
            set
            {
                if (_hasDetails != value)
                {
                    ChangeTracker.RecordOriginalValue("HasDetails", _hasDetails);
                        if (!ChangeTracker.OriginalValues.ContainsKey("HasDetails"))
                            ChangeTracker.RecordOriginalValue("HasDetails", _hasDetails);
                            
                    _hasDetails = value;
                    OnPropertyChanged("HasDetails");
                }
            }
        }
        protected bool _hasDetails;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        History cloned = new History();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._historyPK=this._historyPK;
             cloned._insCode=this._insCode;
             cloned._date=this._date;
             cloned._dEven=this._dEven;
             cloned._pClosing=this._pClosing;
             cloned._pDrCotVal=this._pDrCotVal;
             cloned._zTotTran=this._zTotTran;
             cloned._qTotTran5J=this._qTotTran5J;
             cloned._qTotCap=this._qTotCap;
             cloned._priceMin=this._priceMin;
             cloned._priceMax=this._priceMax;
             cloned._priceYesterday=this._priceYesterday;
             cloned._priceFirst=this._priceFirst;
             cloned._heven=this._heven;
             cloned._eps=this._eps;
             cloned._pe=this._pe;
             cloned._visitCount=this._visitCount;
             cloned._bigMoney=this._bigMoney;
             cloned._buy_CountI=this._buy_CountI;
             cloned._buy_CountN=this._buy_CountN;
             cloned._buy_I_Volume=this._buy_I_Volume;
             cloned._buy_N_Volume=this._buy_N_Volume;
             cloned._sell_CountI=this._sell_CountI;
             cloned._sell_CountN=this._sell_CountN;
             cloned._sell_I_Volume=this._sell_I_Volume;
             cloned._sell_N_Volume=this._sell_N_Volume;
             cloned._hasDetails=this._hasDetails;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._historyPK.ToString());
    					// HistoryPK
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._date.ToString());
    					// Date
    			sb.Append("`");
    
    						sb.Append(this._dEven.ToString());
    					// DEven
    			sb.Append("`");
    
    						sb.Append(this._pClosing.ToString());
    					// PClosing
    			sb.Append("`");
    
    						sb.Append(this._pDrCotVal.ToString());
    					// PDrCotVal
    			sb.Append("`");
    
    						sb.Append(this._zTotTran.ToString());
    					// ZTotTran
    			sb.Append("`");
    
    						sb.Append(this._qTotTran5J.ToString());
    					// QTotTran5J
    			sb.Append("`");
    
    						sb.Append(this._qTotCap.ToString());
    					// QTotCap
    			sb.Append("`");
    
    						sb.Append(this._priceMin.ToString());
    					// PriceMin
    			sb.Append("`");
    
    						sb.Append(this._priceMax.ToString());
    					// PriceMax
    			sb.Append("`");
    
    						sb.Append(this._priceYesterday.ToString());
    					// PriceYesterday
    			sb.Append("`");
    
    						sb.Append(this._priceFirst.ToString());
    					// PriceFirst
    			sb.Append("`");
    
    						sb.Append(this._heven.ToString());
    					// Heven
    			sb.Append("`");
    
    						sb.Append(this._eps.ToString());
    					// Eps
    			sb.Append("`");
    
    						sb.Append(this._pe.ToString());
    					// Pe
    			sb.Append("`");
    
    						sb.Append(this._visitCount.ToString());
    					// VisitCount
    			sb.Append("`");
    
    						sb.Append(this._bigMoney.ToString());
    					// BigMoney
    			sb.Append("`");
    
    						sb.Append(this._buy_CountI.ToString());
    					// Buy_CountI
    			sb.Append("`");
    
    						sb.Append(this._buy_CountN.ToString());
    					// Buy_CountN
    			sb.Append("`");
    
    						sb.Append(this._buy_I_Volume.ToString());
    					// Buy_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._buy_N_Volume.ToString());
    					// Buy_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._sell_CountI.ToString());
    					// Sell_CountI
    			sb.Append("`");
    
    						sb.Append(this._sell_CountN.ToString());
    					// Sell_CountN
    			sb.Append("`");
    
    						sb.Append(this._sell_I_Volume.ToString());
    					// Sell_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._sell_N_Volume.ToString());
    					// Sell_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._hasDetails.ToString());
    					// HasDetails
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<History>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<History>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=28;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        History casted_other = other as History;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.HistoryPK,casted_other.HistoryPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Date,casted_other.Date))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DEven,casted_other.DEven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PClosing,casted_other.PClosing))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PDrCotVal,casted_other.PDrCotVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ZTotTran,casted_other.ZTotTran))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.QTotTran5J,casted_other.QTotTran5J))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.QTotCap,casted_other.QTotCap))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceMin,casted_other.PriceMin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceMax,casted_other.PriceMax))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceYesterday,casted_other.PriceYesterday))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceFirst,casted_other.PriceFirst))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Heven,casted_other.Heven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Eps,casted_other.Eps))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Pe,casted_other.Pe))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.VisitCount,casted_other.VisitCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.BigMoney,casted_other.BigMoney))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_CountI,casted_other.Buy_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_CountN,casted_other.Buy_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_I_Volume,casted_other.Buy_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_N_Volume,casted_other.Buy_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_CountI,casted_other.Sell_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_CountN,casted_other.Sell_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_I_Volume,casted_other.Sell_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_N_Volume,casted_other.Sell_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.HasDetails,casted_other.HasDetails))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "HistoryPK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "HistoryPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Date", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "DEven", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PClosing", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PDrCotVal", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ZTotTran", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "QTotTran5J", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "QTotCap", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceMin", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceMax", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceYesterday", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceFirst", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Heven", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Eps", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Pe", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "VisitCount", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "BigMoney", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "HasDetails", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vHistoryPK=(long)this.GetValue("HistoryPK");
        Expression<Func<History,bool>> exp = p => p.HistoryPK == vHistoryPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "historypk":
                retVal = this.HistoryPK;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "date":
                retVal = this.Date;
                break;
            case "deven":
                retVal = this.DEven;
                break;
            case "pclosing":
                retVal = this.PClosing;
                break;
            case "pdrcotval":
                retVal = this.PDrCotVal;
                break;
            case "ztottran":
                retVal = this.ZTotTran;
                break;
            case "qtottran5j":
                retVal = this.QTotTran5J;
                break;
            case "qtotcap":
                retVal = this.QTotCap;
                break;
            case "pricemin":
                retVal = this.PriceMin;
                break;
            case "pricemax":
                retVal = this.PriceMax;
                break;
            case "priceyesterday":
                retVal = this.PriceYesterday;
                break;
            case "pricefirst":
                retVal = this.PriceFirst;
                break;
            case "heven":
                retVal = this.Heven;
                break;
            case "eps":
                retVal = this.Eps;
                break;
            case "pe":
                retVal = this.Pe;
                break;
            case "visitcount":
                retVal = this.VisitCount;
                break;
            case "bigmoney":
                retVal = this.BigMoney;
                break;
            case "buy_counti":
                retVal = this.Buy_CountI;
                break;
            case "buy_countn":
                retVal = this.Buy_CountN;
                break;
            case "buy_i_volume":
                retVal = this.Buy_I_Volume;
                break;
            case "buy_n_volume":
                retVal = this.Buy_N_Volume;
                break;
            case "sell_counti":
                retVal = this.Sell_CountI;
                break;
            case "sell_countn":
                retVal = this.Sell_CountN;
                break;
            case "sell_i_volume":
                retVal = this.Sell_I_Volume;
                break;
            case "sell_n_volume":
                retVal = this.Sell_N_Volume;
                break;
            case "hasdetails":
                retVal = this.HasDetails;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _historyPK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "historypk":
                this.HistoryPK =(long)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "date":
                this.Date =(System.DateTime)value;
            break;
            case "deven":
                this.DEven =(int)value;
            break;
            case "pclosing":
                this.PClosing =(decimal)value;
            break;
            case "pdrcotval":
                this.PDrCotVal =(int)value;
            break;
            case "ztottran":
                this.ZTotTran =(long)value;
            break;
            case "qtottran5j":
                this.QTotTran5J =(long)value;
            break;
            case "qtotcap":
                this.QTotCap =(long)value;
            break;
            case "pricemin":
                this.PriceMin =(int)value;
            break;
            case "pricemax":
                this.PriceMax =(int)value;
            break;
            case "priceyesterday":
                this.PriceYesterday =(decimal)value;
            break;
            case "pricefirst":
                this.PriceFirst =(int)value;
            break;
            case "heven":
                this.Heven =(int)value;
            break;
            case "eps":
                this.Eps =(double)value;
            break;
            case "pe":
                this.Pe =(double)value;
            break;
            case "visitcount":
                this.VisitCount =(int)value;
            break;
            case "bigmoney":
                this.BigMoney =(long)value;
            break;
            case "buy_counti":
                this.Buy_CountI =(int)value;
            break;
            case "buy_countn":
                this.Buy_CountN =(int)value;
            break;
            case "buy_i_volume":
                this.Buy_I_Volume =(long)value;
            break;
            case "buy_n_volume":
                this.Buy_N_Volume =(long)value;
            break;
            case "sell_counti":
                this.Sell_CountI =(int)value;
            break;
            case "sell_countn":
                this.Sell_CountN =(int)value;
            break;
            case "sell_i_volume":
                this.Sell_I_Volume =(long)value;
            break;
            case "sell_n_volume":
                this.Sell_N_Volume =(long)value;
            break;
            case "hasdetails":
                this.HasDetails =(bool)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
