//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IUserActivity{
    
     long Id{
      get;
      set;
      }
    
     System.DateTime EntryDt{
      get;
      set;
      }
    
     string UserName{
      get;
      set;
      }
    
     string IP{
      get;
      set;
      }
    
     string Message{
      get;
      set;
      }
    
     string PageName{
      get;
      set;
      }
    
     string Metadata{
      get;
      set;
      }
    
     string Session{
      get;
      set;
      }
    
     string Action{
      get;
      set;
      }
    
    }// interface
    
    [Table("UserActivities")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(Id)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class UserActivity:IEntityBase, IUserActivity,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_id,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        protected long _id;
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual System.DateTime EntryDt
        {
            get { return _entryDt; }
            set
            {
                if (_entryDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EntryDt", _entryDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("EntryDt"))
                            ChangeTracker.RecordOriginalValue("EntryDt", _entryDt);
                            
                    _entryDt = value;
                    OnPropertyChanged("EntryDt");
                }
            }
        }
        protected System.DateTime _entryDt;
    [MaxLength(200)]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("UserName"))
                            ChangeTracker.RecordOriginalValue("UserName", _userName);
                            
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        protected string _userName;
    [MaxLength(20)]
    	[ProtoMember(4)]
        [DataMember]
        public virtual string IP
        {
            get { return _iP; }
            set
            {
                if (_iP != value)
                {
                    ChangeTracker.RecordOriginalValue("IP", _iP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IP"))
                            ChangeTracker.RecordOriginalValue("IP", _iP);
                            
                    _iP = value;
                    OnPropertyChanged("IP");
                }
            }
        }
        protected string _iP;
    [MaxLength(500)]
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    ChangeTracker.RecordOriginalValue("Message", _message);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Message"))
                            ChangeTracker.RecordOriginalValue("Message", _message);
                            
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        protected string _message;
    [MaxLength(100)]
    	[ProtoMember(6)]
        [DataMember]
        public virtual string PageName
        {
            get { return _pageName; }
            set
            {
                if (_pageName != value)
                {
                    ChangeTracker.RecordOriginalValue("PageName", _pageName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PageName"))
                            ChangeTracker.RecordOriginalValue("PageName", _pageName);
                            
                    _pageName = value;
                    OnPropertyChanged("PageName");
                }
            }
        }
        protected string _pageName;
    [MaxLength(200)]
    	[ProtoMember(7)]
        [DataMember]
        public virtual string Metadata
        {
            get { return _metadata; }
            set
            {
                if (_metadata != value)
                {
                    ChangeTracker.RecordOriginalValue("Metadata", _metadata);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Metadata"))
                            ChangeTracker.RecordOriginalValue("Metadata", _metadata);
                            
                    _metadata = value;
                    OnPropertyChanged("Metadata");
                }
            }
        }
        protected string _metadata;
    [MaxLength(100)]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string Session
        {
            get { return _session; }
            set
            {
                if (_session != value)
                {
                    ChangeTracker.RecordOriginalValue("Session", _session);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Session"))
                            ChangeTracker.RecordOriginalValue("Session", _session);
                            
                    _session = value;
                    OnPropertyChanged("Session");
                }
            }
        }
        protected string _session;
    [MaxLength(100)]
    	[ProtoMember(9)]
        [DataMember]
        public virtual string Action
        {
            get { return _action; }
            set
            {
                if (_action != value)
                {
                    ChangeTracker.RecordOriginalValue("Action", _action);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Action"))
                            ChangeTracker.RecordOriginalValue("Action", _action);
                            
                    _action = value;
                    OnPropertyChanged("Action");
                }
            }
        }
        protected string _action;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        UserActivity cloned = new UserActivity();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._id=this._id;
             cloned._entryDt=this._entryDt;
             cloned._userName=this._userName;
             cloned._iP=this._iP;
             cloned._message=this._message;
             cloned._pageName=this._pageName;
             cloned._metadata=this._metadata;
             cloned._session=this._session;
             cloned._action=this._action;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._id.ToString());
    					// Id
    			sb.Append("`");
    
    						sb.Append(this._entryDt.ToString());
    					// EntryDt
    			sb.Append("`");
    
    						sb.Append(this._userName?.ToString());
    						// UserName
    			sb.Append("`");
    
    						sb.Append(this._iP?.ToString());
    						// IP
    			sb.Append("`");
    
    						sb.Append(this._message.ToString());
    					// Message
    			sb.Append("`");
    
    						sb.Append(this._pageName?.ToString());
    						// PageName
    			sb.Append("`");
    
    						sb.Append(this._metadata?.ToString());
    						// Metadata
    			sb.Append("`");
    
    						sb.Append(this._session?.ToString());
    						// Session
    			sb.Append("`");
    
    						sb.Append(this._action?.ToString());
    						// Action
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<UserActivity>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<UserActivity>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=10;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        UserActivity casted_other = other as UserActivity;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.Id,casted_other.Id))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.EntryDt,casted_other.EntryDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.UserName,casted_other.UserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IP,casted_other.IP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Message,casted_other.Message))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PageName,casted_other.PageName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Metadata,casted_other.Metadata))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Session,casted_other.Session))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Action,casted_other.Action))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "Id", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "Id", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "EntryDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "UserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=200
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "IP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=20
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Message", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "PageName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Metadata", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=200
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Session", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Action", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vId=(long)this.GetValue("Id");
        Expression<Func<UserActivity,bool>> exp = p => p.Id == vId ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "id":
                retVal = this.Id;
                break;
            case "entrydt":
                retVal = this.EntryDt;
                break;
            case "username":
                retVal = this.UserName;
                break;
            case "ip":
                retVal = this.IP;
                break;
            case "message":
                retVal = this.Message;
                break;
            case "pagename":
                retVal = this.PageName;
                break;
            case "metadata":
                retVal = this.Metadata;
                break;
            case "session":
                retVal = this.Session;
                break;
            case "action":
                retVal = this.Action;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _id!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "id":
                this.Id =(long)value;
            break;
            case "entrydt":
                this.EntryDt =(System.DateTime)value;
            break;
            case "username":
                this.UserName =(string)value;
            break;
            case "ip":
                this.IP =(string)value;
            break;
            case "message":
                this.Message =(string)value;
            break;
            case "pagename":
                this.PageName =(string)value;
            break;
            case "metadata":
                this.Metadata =(string)value;
            break;
            case "session":
                this.Session =(string)value;
            break;
            case "action":
                this.Action =(string)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
