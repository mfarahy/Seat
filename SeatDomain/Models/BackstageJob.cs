//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IBackstageJob{
    
     long BackstageJobPK{
      get;
      set;
      }
    
     string RunAs{
      get;
      set;
      }
    
     System.DateTime TimeToRun{
      get;
      set;
      }
    
     short Status{
      get;
      set;
      }
    
     string Service{
      get;
      set;
      }
    
     string Action{
      get;
      set;
      }
    
     string SerializedArgs{
      get;
      set;
      }
    
     bool RemoveIfSuccess{
      get;
      set;
      }
    
     byte RetryCount{
      get;
      set;
      }
    
     short Priority{
      get;
      set;
      }
    
     string UniqueCode{
      get;
      set;
      }
    
     string Dependency{
      get;
      set;
      }
    
     string Queue{
      get;
      set;
      }
    
     string Server{
      get;
      set;
      }
    
     string Tags{
      get;
      set;
      }
    
     bool Debug{
      get;
      set;
      }
    
     string Error{
      get;
      set;
      }
    
     Nullable<long> Duration{
      get;
      set;
      }
    
     Nullable<System.DateTime> RunDt{
      get;
      set;
      }
    
     byte[] ExecutionLog{
      get;
      set;
      }
    
     Nullable<byte> MaxCpu{
      get;
      set;
      }
    
     Nullable<byte> MaxMemory{
      get;
      set;
      }
    
     Nullable<byte> MidCpu{
      get;
      set;
      }
    
     Nullable<byte> MidMemory{
      get;
      set;
      }
    
    }// interface
    
    [Table("BackstageJobs")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(BackstageJobPK)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class BackstageJob:IEntityBase, IBackstageJob,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual long BackstageJobPK
        {
            get { return _backstageJobPK; }
            set
            {
                if (_backstageJobPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_backstageJobPK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'BackstageJobPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _backstageJobPK = value;
                    OnPropertyChanged("BackstageJobPK");
                }
            }
        }
        protected long _backstageJobPK;
    [MaxLength(70)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string RunAs
        {
            get { return _runAs; }
            set
            {
                if (_runAs != value)
                {
                    ChangeTracker.RecordOriginalValue("RunAs", _runAs);
                        if (!ChangeTracker.OriginalValues.ContainsKey("RunAs"))
                            ChangeTracker.RecordOriginalValue("RunAs", _runAs);
                            
                    _runAs = value;
                    OnPropertyChanged("RunAs");
                }
            }
        }
        protected string _runAs;
    [Required]
    	[ProtoMember(3)]
        [DataMember]
        public virtual System.DateTime TimeToRun
        {
            get { return _timeToRun; }
            set
            {
                if (_timeToRun != value)
                {
                    ChangeTracker.RecordOriginalValue("TimeToRun", _timeToRun);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TimeToRun"))
                            ChangeTracker.RecordOriginalValue("TimeToRun", _timeToRun);
                            
                    _timeToRun = value;
                    OnPropertyChanged("TimeToRun");
                }
            }
        }
        protected System.DateTime _timeToRun;
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual short Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("Status", _status);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Status"))
                            ChangeTracker.RecordOriginalValue("Status", _status);
                            
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        protected short _status;
    [MaxLength(100)]
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string Service
        {
            get { return _service; }
            set
            {
                if (_service != value)
                {
                    ChangeTracker.RecordOriginalValue("Service", _service);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Service"))
                            ChangeTracker.RecordOriginalValue("Service", _service);
                            
                    _service = value;
                    OnPropertyChanged("Service");
                }
            }
        }
        protected string _service;
    [MaxLength(100)]
    [Required]
    	[ProtoMember(6)]
        [DataMember]
        public virtual string Action
        {
            get { return _action; }
            set
            {
                if (_action != value)
                {
                    ChangeTracker.RecordOriginalValue("Action", _action);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Action"))
                            ChangeTracker.RecordOriginalValue("Action", _action);
                            
                    _action = value;
                    OnPropertyChanged("Action");
                }
            }
        }
        protected string _action;
    	[ProtoMember(7)]
        [DataMember]
        public virtual string SerializedArgs
        {
            get { return _serializedArgs; }
            set
            {
                if (_serializedArgs != value)
                {
                    ChangeTracker.RecordOriginalValue("SerializedArgs", _serializedArgs);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SerializedArgs"))
                            ChangeTracker.RecordOriginalValue("SerializedArgs", _serializedArgs);
                            
                    _serializedArgs = value;
                    OnPropertyChanged("SerializedArgs");
                }
            }
        }
        protected string _serializedArgs;
    [Required]
    	[ProtoMember(8)]
        [DataMember]
        public virtual bool RemoveIfSuccess
        {
            get { return _removeIfSuccess; }
            set
            {
                if (_removeIfSuccess != value)
                {
                    ChangeTracker.RecordOriginalValue("RemoveIfSuccess", _removeIfSuccess);
                        if (!ChangeTracker.OriginalValues.ContainsKey("RemoveIfSuccess"))
                            ChangeTracker.RecordOriginalValue("RemoveIfSuccess", _removeIfSuccess);
                            
                    _removeIfSuccess = value;
                    OnPropertyChanged("RemoveIfSuccess");
                }
            }
        }
        protected bool _removeIfSuccess;
    [Required]
    	[ProtoMember(9)]
        [DataMember]
        public virtual byte RetryCount
        {
            get { return _retryCount; }
            set
            {
                if (_retryCount != value)
                {
                    ChangeTracker.RecordOriginalValue("RetryCount", _retryCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("RetryCount"))
                            ChangeTracker.RecordOriginalValue("RetryCount", _retryCount);
                            
                    _retryCount = value;
                    OnPropertyChanged("RetryCount");
                }
            }
        }
        protected byte _retryCount;
    [Required]
    	[ProtoMember(10)]
        [DataMember]
        public virtual short Priority
        {
            get { return _priority; }
            set
            {
                if (_priority != value)
                {
                    ChangeTracker.RecordOriginalValue("Priority", _priority);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Priority"))
                            ChangeTracker.RecordOriginalValue("Priority", _priority);
                            
                    _priority = value;
                    OnPropertyChanged("Priority");
                }
            }
        }
        protected short _priority;
    [MaxLength(50)]
    	[ProtoMember(11)]
        [DataMember]
        public virtual string UniqueCode
        {
            get { return _uniqueCode; }
            set
            {
                if (_uniqueCode != value)
                {
                    ChangeTracker.RecordOriginalValue("UniqueCode", _uniqueCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("UniqueCode"))
                            ChangeTracker.RecordOriginalValue("UniqueCode", _uniqueCode);
                            
                    _uniqueCode = value;
                    OnPropertyChanged("UniqueCode");
                }
            }
        }
        protected string _uniqueCode;
    [MaxLength(50)]
    	[ProtoMember(12)]
        [DataMember]
        public virtual string Dependency
        {
            get { return _dependency; }
            set
            {
                if (_dependency != value)
                {
                    ChangeTracker.RecordOriginalValue("Dependency", _dependency);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Dependency"))
                            ChangeTracker.RecordOriginalValue("Dependency", _dependency);
                            
                    _dependency = value;
                    OnPropertyChanged("Dependency");
                }
            }
        }
        protected string _dependency;
    [MaxLength(50)]
    	[ProtoMember(13)]
        [DataMember]
        public virtual string Queue
        {
            get { return _queue; }
            set
            {
                if (_queue != value)
                {
                    ChangeTracker.RecordOriginalValue("Queue", _queue);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Queue"))
                            ChangeTracker.RecordOriginalValue("Queue", _queue);
                            
                    _queue = value;
                    OnPropertyChanged("Queue");
                }
            }
        }
        protected string _queue;
    [MaxLength(50)]
    	[ProtoMember(14)]
        [DataMember]
        public virtual string Server
        {
            get { return _server; }
            set
            {
                if (_server != value)
                {
                    ChangeTracker.RecordOriginalValue("Server", _server);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Server"))
                            ChangeTracker.RecordOriginalValue("Server", _server);
                            
                    _server = value;
                    OnPropertyChanged("Server");
                }
            }
        }
        protected string _server;
    [MaxLength(50)]
    	[ProtoMember(15)]
        [DataMember]
        public virtual string Tags
        {
            get { return _tags; }
            set
            {
                if (_tags != value)
                {
                    ChangeTracker.RecordOriginalValue("Tags", _tags);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Tags"))
                            ChangeTracker.RecordOriginalValue("Tags", _tags);
                            
                    _tags = value;
                    OnPropertyChanged("Tags");
                }
            }
        }
        protected string _tags;
    [Required]
    	[ProtoMember(16)]
        [DataMember]
        public virtual bool Debug
        {
            get { return _debug; }
            set
            {
                if (_debug != value)
                {
                    ChangeTracker.RecordOriginalValue("Debug", _debug);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Debug"))
                            ChangeTracker.RecordOriginalValue("Debug", _debug);
                            
                    _debug = value;
                    OnPropertyChanged("Debug");
                }
            }
        }
        protected bool _debug;
    	[ProtoMember(17)]
        [DataMember]
        public virtual string Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    ChangeTracker.RecordOriginalValue("Error", _error);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Error"))
                            ChangeTracker.RecordOriginalValue("Error", _error);
                            
                    _error = value;
                    OnPropertyChanged("Error");
                }
            }
        }
        protected string _error;
    	[ProtoMember(18)]
        [DataMember]
        public virtual Nullable<long> Duration
        {
            get { return _duration; }
            set
            {
                if (_duration != value)
                {
                    ChangeTracker.RecordOriginalValue("Duration", _duration);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Duration"))
                            ChangeTracker.RecordOriginalValue("Duration", _duration);
                            
                    _duration = value;
                    OnPropertyChanged("Duration");
                }
            }
        }
        protected Nullable<long> _duration;
    	[ProtoMember(19)]
        [DataMember]
        public virtual Nullable<System.DateTime> RunDt
        {
            get { return _runDt; }
            set
            {
                if (_runDt != value)
                {
                    ChangeTracker.RecordOriginalValue("RunDt", _runDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("RunDt"))
                            ChangeTracker.RecordOriginalValue("RunDt", _runDt);
                            
                    _runDt = value;
                    OnPropertyChanged("RunDt");
                }
            }
        }
        protected Nullable<System.DateTime> _runDt;
    	[ProtoMember(20)]
        [DataMember]
        public virtual byte[] ExecutionLog
        {
            get { return _executionLog; }
            set
            {
                if (_executionLog != value)
                {
                    ChangeTracker.RecordOriginalValue("ExecutionLog", _executionLog);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ExecutionLog"))
                            ChangeTracker.RecordOriginalValue("ExecutionLog", _executionLog);
                            
                    _executionLog = value;
                    OnPropertyChanged("ExecutionLog");
                }
            }
        }
        protected byte[] _executionLog;
    	[ProtoMember(21)]
        [DataMember]
        public virtual Nullable<byte> MaxCpu
        {
            get { return _maxCpu; }
            set
            {
                if (_maxCpu != value)
                {
                    ChangeTracker.RecordOriginalValue("MaxCpu", _maxCpu);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MaxCpu"))
                            ChangeTracker.RecordOriginalValue("MaxCpu", _maxCpu);
                            
                    _maxCpu = value;
                    OnPropertyChanged("MaxCpu");
                }
            }
        }
        protected Nullable<byte> _maxCpu;
    	[ProtoMember(22)]
        [DataMember]
        public virtual Nullable<byte> MaxMemory
        {
            get { return _maxMemory; }
            set
            {
                if (_maxMemory != value)
                {
                    ChangeTracker.RecordOriginalValue("MaxMemory", _maxMemory);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MaxMemory"))
                            ChangeTracker.RecordOriginalValue("MaxMemory", _maxMemory);
                            
                    _maxMemory = value;
                    OnPropertyChanged("MaxMemory");
                }
            }
        }
        protected Nullable<byte> _maxMemory;
    	[ProtoMember(23)]
        [DataMember]
        public virtual Nullable<byte> MidCpu
        {
            get { return _midCpu; }
            set
            {
                if (_midCpu != value)
                {
                    ChangeTracker.RecordOriginalValue("MidCpu", _midCpu);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MidCpu"))
                            ChangeTracker.RecordOriginalValue("MidCpu", _midCpu);
                            
                    _midCpu = value;
                    OnPropertyChanged("MidCpu");
                }
            }
        }
        protected Nullable<byte> _midCpu;
    	[ProtoMember(24)]
        [DataMember]
        public virtual Nullable<byte> MidMemory
        {
            get { return _midMemory; }
            set
            {
                if (_midMemory != value)
                {
                    ChangeTracker.RecordOriginalValue("MidMemory", _midMemory);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MidMemory"))
                            ChangeTracker.RecordOriginalValue("MidMemory", _midMemory);
                            
                    _midMemory = value;
                    OnPropertyChanged("MidMemory");
                }
            }
        }
        protected Nullable<byte> _midMemory;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        BackstageJob cloned = new BackstageJob();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._backstageJobPK=this._backstageJobPK;
             cloned._runAs=this._runAs;
             cloned._timeToRun=this._timeToRun;
             cloned._status=this._status;
             cloned._service=this._service;
             cloned._action=this._action;
             cloned._serializedArgs=this._serializedArgs;
             cloned._removeIfSuccess=this._removeIfSuccess;
             cloned._retryCount=this._retryCount;
             cloned._priority=this._priority;
             cloned._uniqueCode=this._uniqueCode;
             cloned._dependency=this._dependency;
             cloned._queue=this._queue;
             cloned._server=this._server;
             cloned._tags=this._tags;
             cloned._debug=this._debug;
             cloned._error=this._error;
             cloned._duration=this._duration;
             cloned._runDt=this._runDt;
             cloned._executionLog=this._executionLog;
             cloned._maxCpu=this._maxCpu;
             cloned._maxMemory=this._maxMemory;
             cloned._midCpu=this._midCpu;
             cloned._midMemory=this._midMemory;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._backstageJobPK.ToString());
    					// BackstageJobPK
    			sb.Append("`");
    
    						sb.Append(this._runAs.ToString());
    					// RunAs
    			sb.Append("`");
    
    						sb.Append(this._timeToRun.ToString());
    					// TimeToRun
    			sb.Append("`");
    
    						sb.Append(this._status.ToString());
    					// Status
    			sb.Append("`");
    
    						sb.Append(this._service.ToString());
    					// Service
    			sb.Append("`");
    
    						sb.Append(this._action.ToString());
    					// Action
    			sb.Append("`");
    
    						sb.Append(this._serializedArgs?.ToString());
    						// SerializedArgs
    			sb.Append("`");
    
    						sb.Append(this._removeIfSuccess.ToString());
    					// RemoveIfSuccess
    			sb.Append("`");
    
    						sb.Append(this._retryCount.ToString());
    					// RetryCount
    			sb.Append("`");
    
    						sb.Append(this._priority.ToString());
    					// Priority
    			sb.Append("`");
    
    						sb.Append(this._uniqueCode?.ToString());
    						// UniqueCode
    			sb.Append("`");
    
    						sb.Append(this._dependency?.ToString());
    						// Dependency
    			sb.Append("`");
    
    						sb.Append(this._queue?.ToString());
    						// Queue
    			sb.Append("`");
    
    						sb.Append(this._server?.ToString());
    						// Server
    			sb.Append("`");
    
    						sb.Append(this._tags?.ToString());
    						// Tags
    			sb.Append("`");
    
    						sb.Append(this._debug.ToString());
    					// Debug
    			sb.Append("`");
    
    						sb.Append(this._error?.ToString());
    						// Error
    			sb.Append("`");
    
    						sb.Append(this._duration?.ToString());
    						// Duration
    			sb.Append("`");
    
    						sb.Append(this._runDt?.ToString());
    						// RunDt
    			sb.Append("`");
    
    						sb.Append(this._executionLog?.ToString());
    						// ExecutionLog
    			sb.Append("`");
    
    						sb.Append(this._maxCpu?.ToString());
    						// MaxCpu
    			sb.Append("`");
    
    						sb.Append(this._maxMemory?.ToString());
    						// MaxMemory
    			sb.Append("`");
    
    						sb.Append(this._midCpu?.ToString());
    						// MidCpu
    			sb.Append("`");
    
    						sb.Append(this._midMemory?.ToString());
    						// MidMemory
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<BackstageJob>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<BackstageJob>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=25;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        BackstageJob casted_other = other as BackstageJob;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.BackstageJobPK,casted_other.BackstageJobPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.RunAs,casted_other.RunAs))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TimeToRun,casted_other.TimeToRun))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Status,casted_other.Status))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Service,casted_other.Service))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Action,casted_other.Action))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SerializedArgs,casted_other.SerializedArgs))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.RemoveIfSuccess,casted_other.RemoveIfSuccess))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.RetryCount,casted_other.RetryCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Priority,casted_other.Priority))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.UniqueCode,casted_other.UniqueCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Dependency,casted_other.Dependency))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Queue,casted_other.Queue))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Server,casted_other.Server))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Tags,casted_other.Tags))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Debug,casted_other.Debug))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Error,casted_other.Error))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Duration,casted_other.Duration))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.RunDt,casted_other.RunDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ExecutionLog,casted_other.ExecutionLog))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MaxCpu,casted_other.MaxCpu))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MaxMemory,casted_other.MaxMemory))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MidCpu,casted_other.MidCpu))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MidMemory,casted_other.MidMemory))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "BackstageJobPK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "BackstageJobPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "RunAs", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=70
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "TimeToRun", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Status", Kind = FieldKinds.Primitive,PropertyType =typeof(short) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Service", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Action", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "SerializedArgs", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "RemoveIfSuccess", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "RetryCount", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Priority", Kind = FieldKinds.Primitive,PropertyType =typeof(short) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "UniqueCode", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Dependency", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Queue", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Server", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Tags", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Debug", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Error", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Duration", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "RunDt", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<System.DateTime>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ExecutionLog", Kind = FieldKinds.Primitive,PropertyType =typeof(byte[]) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MaxCpu", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MaxMemory", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MidCpu", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MidMemory", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vBackstageJobPK=(long)this.GetValue("BackstageJobPK");
        Expression<Func<BackstageJob,bool>> exp = p => p.BackstageJobPK == vBackstageJobPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "backstagejobpk":
                retVal = this.BackstageJobPK;
                break;
            case "runas":
                retVal = this.RunAs;
                break;
            case "timetorun":
                retVal = this.TimeToRun;
                break;
            case "status":
                retVal = this.Status;
                break;
            case "service":
                retVal = this.Service;
                break;
            case "action":
                retVal = this.Action;
                break;
            case "serializedargs":
                retVal = this.SerializedArgs;
                break;
            case "removeifsuccess":
                retVal = this.RemoveIfSuccess;
                break;
            case "retrycount":
                retVal = this.RetryCount;
                break;
            case "priority":
                retVal = this.Priority;
                break;
            case "uniquecode":
                retVal = this.UniqueCode;
                break;
            case "dependency":
                retVal = this.Dependency;
                break;
            case "queue":
                retVal = this.Queue;
                break;
            case "server":
                retVal = this.Server;
                break;
            case "tags":
                retVal = this.Tags;
                break;
            case "debug":
                retVal = this.Debug;
                break;
            case "error":
                retVal = this.Error;
                break;
            case "duration":
                retVal = this.Duration;
                break;
            case "rundt":
                retVal = this.RunDt;
                break;
            case "executionlog":
                retVal = this.ExecutionLog;
                break;
            case "maxcpu":
                retVal = this.MaxCpu;
                break;
            case "maxmemory":
                retVal = this.MaxMemory;
                break;
            case "midcpu":
                retVal = this.MidCpu;
                break;
            case "midmemory":
                retVal = this.MidMemory;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _backstageJobPK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "backstagejobpk":
                this.BackstageJobPK =(long)value;
            break;
            case "runas":
                this.RunAs =(string)value;
            break;
            case "timetorun":
                this.TimeToRun =(System.DateTime)value;
            break;
            case "status":
                this.Status =(short)value;
            break;
            case "service":
                this.Service =(string)value;
            break;
            case "action":
                this.Action =(string)value;
            break;
            case "serializedargs":
                this.SerializedArgs =(string)value;
            break;
            case "removeifsuccess":
                this.RemoveIfSuccess =(bool)value;
            break;
            case "retrycount":
                this.RetryCount =(byte)value;
            break;
            case "priority":
                this.Priority =(short)value;
            break;
            case "uniquecode":
                this.UniqueCode =(string)value;
            break;
            case "dependency":
                this.Dependency =(string)value;
            break;
            case "queue":
                this.Queue =(string)value;
            break;
            case "server":
                this.Server =(string)value;
            break;
            case "tags":
                this.Tags =(string)value;
            break;
            case "debug":
                this.Debug =(bool)value;
            break;
            case "error":
                this.Error =(string)value;
            break;
            case "duration":
                this.Duration =(Nullable<long>)value;
            break;
            case "rundt":
                this.RunDt =(Nullable<System.DateTime>)value;
            break;
            case "executionlog":
                this.ExecutionLog =(byte[])value;
            break;
            case "maxcpu":
                this.MaxCpu =(Nullable<byte>)value;
            break;
            case "maxmemory":
                this.MaxMemory =(Nullable<byte>)value;
            break;
            case "midcpu":
                this.MidCpu =(Nullable<byte>)value;
            break;
            case "midmemory":
                this.MidMemory =(Nullable<byte>)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
