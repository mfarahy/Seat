//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IClosingPrice{
    
     long ClosingPricePK{
      get;
      set;
      }
    
     System.DateTime DateTime{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     int PdrCotVal{
      get;
      set;
      }
    
     int PClosing{
      get;
      set;
      }
    
     int First{
      get;
      set;
      }
    
     int Ystrdy{
      get;
      set;
      }
    
     int Max{
      get;
      set;
      }
    
     int Min{
      get;
      set;
      }
    
     int TradeCount{
      get;
      set;
      }
    
     long Vol{
      get;
      set;
      }
    
     decimal Val{
      get;
      set;
      }
    
     decimal BVal{
      get;
      set;
      }
    
    }// interface
    
    [Table("ClosingPrices")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(ClosingPricePK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class ClosingPrice:IEntityBase, IClosingPrice,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long ClosingPricePK
        {
            get { return _closingPricePK; }
            set
            {
                if (_closingPricePK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_closingPricePK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'ClosingPricePK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _closingPricePK = value;
                    OnPropertyChanged("ClosingPricePK");
                }
            }
        }
        protected long _closingPricePK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual System.DateTime DateTime
        {
            get { return _dateTime; }
            set
            {
                if (_dateTime != value)
                {
                    ChangeTracker.RecordOriginalValue("DateTime", _dateTime);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DateTime"))
                            ChangeTracker.RecordOriginalValue("DateTime", _dateTime);
                            
                    _dateTime = value;
                    OnPropertyChanged("DateTime");
                }
            }
        }
        protected System.DateTime _dateTime;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual int PdrCotVal
        {
            get { return _pdrCotVal; }
            set
            {
                if (_pdrCotVal != value)
                {
                    ChangeTracker.RecordOriginalValue("PdrCotVal", _pdrCotVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PdrCotVal"))
                            ChangeTracker.RecordOriginalValue("PdrCotVal", _pdrCotVal);
                            
                    _pdrCotVal = value;
                    OnPropertyChanged("PdrCotVal");
                }
            }
        }
        protected int _pdrCotVal;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual int PClosing
        {
            get { return _pClosing; }
            set
            {
                if (_pClosing != value)
                {
                    ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PClosing"))
                            ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                            
                    _pClosing = value;
                    OnPropertyChanged("PClosing");
                }
            }
        }
        protected int _pClosing;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual int First
        {
            get { return _first; }
            set
            {
                if (_first != value)
                {
                    ChangeTracker.RecordOriginalValue("First", _first);
                        if (!ChangeTracker.OriginalValues.ContainsKey("First"))
                            ChangeTracker.RecordOriginalValue("First", _first);
                            
                    _first = value;
                    OnPropertyChanged("First");
                }
            }
        }
        protected int _first;
    [Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual int Ystrdy
        {
            get { return _ystrdy; }
            set
            {
                if (_ystrdy != value)
                {
                    ChangeTracker.RecordOriginalValue("Ystrdy", _ystrdy);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Ystrdy"))
                            ChangeTracker.RecordOriginalValue("Ystrdy", _ystrdy);
                            
                    _ystrdy = value;
                    OnPropertyChanged("Ystrdy");
                }
            }
        }
        protected int _ystrdy;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual int Max
        {
            get { return _max; }
            set
            {
                if (_max != value)
                {
                    ChangeTracker.RecordOriginalValue("Max", _max);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Max"))
                            ChangeTracker.RecordOriginalValue("Max", _max);
                            
                    _max = value;
                    OnPropertyChanged("Max");
                }
            }
        }
        protected int _max;
    [Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual int Min
        {
            get { return _min; }
            set
            {
                if (_min != value)
                {
                    ChangeTracker.RecordOriginalValue("Min", _min);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Min"))
                            ChangeTracker.RecordOriginalValue("Min", _min);
                            
                    _min = value;
                    OnPropertyChanged("Min");
                }
            }
        }
        protected int _min;
    [Required]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual int TradeCount
        {
            get { return _tradeCount; }
            set
            {
                if (_tradeCount != value)
                {
                    ChangeTracker.RecordOriginalValue("TradeCount", _tradeCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TradeCount"))
                            ChangeTracker.RecordOriginalValue("TradeCount", _tradeCount);
                            
                    _tradeCount = value;
                    OnPropertyChanged("TradeCount");
                }
            }
        }
        protected int _tradeCount;
    [Required]
    
	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual long Vol
        {
            get { return _vol; }
            set
            {
                if (_vol != value)
                {
                    ChangeTracker.RecordOriginalValue("Vol", _vol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Vol"))
                            ChangeTracker.RecordOriginalValue("Vol", _vol);
                            
                    _vol = value;
                    OnPropertyChanged("Vol");
                }
            }
        }
        protected long _vol;
    [Required]
    
	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual decimal Val
        {
            get { return _val; }
            set
            {
                if (_val != value)
                {
                    ChangeTracker.RecordOriginalValue("Val", _val);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Val"))
                            ChangeTracker.RecordOriginalValue("Val", _val);
                            
                    _val = value;
                    OnPropertyChanged("Val");
                }
            }
        }
        protected decimal _val;
    [Required]
    
	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual decimal BVal
        {
            get { return _bVal; }
            set
            {
                if (_bVal != value)
                {
                    ChangeTracker.RecordOriginalValue("BVal", _bVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("BVal"))
                            ChangeTracker.RecordOriginalValue("BVal", _bVal);
                            
                    _bVal = value;
                    OnPropertyChanged("BVal");
                }
            }
        }
        protected decimal _bVal;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        ClosingPrice cloned = new ClosingPrice();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._closingPricePK=this._closingPricePK;
             cloned._dateTime=this._dateTime;
             cloned._insCode=this._insCode;
             cloned._pdrCotVal=this._pdrCotVal;
             cloned._pClosing=this._pClosing;
             cloned._first=this._first;
             cloned._ystrdy=this._ystrdy;
             cloned._max=this._max;
             cloned._min=this._min;
             cloned._tradeCount=this._tradeCount;
             cloned._vol=this._vol;
             cloned._val=this._val;
             cloned._bVal=this._bVal;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._closingPricePK.ToString());
    					// ClosingPricePK
    			sb.Append("`");
    
    						sb.Append(this._dateTime.ToString());
    					// DateTime
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._pdrCotVal.ToString());
    					// PdrCotVal
    			sb.Append("`");
    
    						sb.Append(this._pClosing.ToString());
    					// PClosing
    			sb.Append("`");
    
    						sb.Append(this._first.ToString());
    					// First
    			sb.Append("`");
    
    						sb.Append(this._ystrdy.ToString());
    					// Ystrdy
    			sb.Append("`");
    
    						sb.Append(this._max.ToString());
    					// Max
    			sb.Append("`");
    
    						sb.Append(this._min.ToString());
    					// Min
    			sb.Append("`");
    
    						sb.Append(this._tradeCount.ToString());
    					// TradeCount
    			sb.Append("`");
    
    						sb.Append(this._vol.ToString());
    					// Vol
    			sb.Append("`");
    
    						sb.Append(this._val.ToString());
    					// Val
    			sb.Append("`");
    
    						sb.Append(this._bVal.ToString());
    					// BVal
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<ClosingPrice>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<ClosingPrice>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=14;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        ClosingPrice casted_other = other as ClosingPrice;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.ClosingPricePK,casted_other.ClosingPricePK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DateTime,casted_other.DateTime))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PdrCotVal,casted_other.PdrCotVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PClosing,casted_other.PClosing))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.First,casted_other.First))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Ystrdy,casted_other.Ystrdy))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Max,casted_other.Max))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Min,casted_other.Min))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TradeCount,casted_other.TradeCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Vol,casted_other.Vol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Val,casted_other.Val))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.BVal,casted_other.BVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "ClosingPricePK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "ClosingPricePK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "DateTime", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PdrCotVal", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PClosing", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "First", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Ystrdy", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Max", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Min", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "TradeCount", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Vol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Val", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "BVal", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vClosingPricePK=(long)this.GetValue("ClosingPricePK");
        Expression<Func<ClosingPrice,bool>> exp = p => p.ClosingPricePK == vClosingPricePK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "closingpricepk":
                retVal = this.ClosingPricePK;
                break;
            case "datetime":
                retVal = this.DateTime;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "pdrcotval":
                retVal = this.PdrCotVal;
                break;
            case "pclosing":
                retVal = this.PClosing;
                break;
            case "first":
                retVal = this.First;
                break;
            case "ystrdy":
                retVal = this.Ystrdy;
                break;
            case "max":
                retVal = this.Max;
                break;
            case "min":
                retVal = this.Min;
                break;
            case "tradecount":
                retVal = this.TradeCount;
                break;
            case "vol":
                retVal = this.Vol;
                break;
            case "val":
                retVal = this.Val;
                break;
            case "bval":
                retVal = this.BVal;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _closingPricePK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "closingpricepk":
                this.ClosingPricePK =(long)value;
            break;
            case "datetime":
                this.DateTime =(System.DateTime)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "pdrcotval":
                this.PdrCotVal =(int)value;
            break;
            case "pclosing":
                this.PClosing =(int)value;
            break;
            case "first":
                this.First =(int)value;
            break;
            case "ystrdy":
                this.Ystrdy =(int)value;
            break;
            case "max":
                this.Max =(int)value;
            break;
            case "min":
                this.Min =(int)value;
            break;
            case "tradecount":
                this.TradeCount =(int)value;
            break;
            case "vol":
                this.Vol =(long)value;
            break;
            case "val":
                this.Val =(decimal)value;
            break;
            case "bval":
                this.BVal =(decimal)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
