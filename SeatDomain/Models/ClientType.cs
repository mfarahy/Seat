//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IClientType{
    
     long ClintTypePK{
      get;
      set;
      }
    
     System.DateTime DayDt{
      get;
      set;
      }
    
     int Buy_CountI{
      get;
      set;
      }
    
     int Buy_CountN{
      get;
      set;
      }
    
     long Buy_I_Volume{
      get;
      set;
      }
    
     long Buy_N_Volume{
      get;
      set;
      }
    
     int Sell_CountI{
      get;
      set;
      }
    
     int Sell_CountN{
      get;
      set;
      }
    
     long Sell_I_Volume{
      get;
      set;
      }
    
     long Sell_N_Volume{
      get;
      set;
      }
    
     int Pl{
      get;
      set;
      }
    
     long TVol{
      get;
      set;
      }
    
     int Prev_Buy_CountI{
      get;
      set;
      }
    
     int Prev_Buy_CountN{
      get;
      set;
      }
    
     long Prev_Buy_I_Volume{
      get;
      set;
      }
    
     long Prev_Buy_N_Volume{
      get;
      set;
      }
    
     int Prev_Sell_CountI{
      get;
      set;
      }
    
     int Prev_Sell_CountN{
      get;
      set;
      }
    
     long Prev_Sell_I_Volume{
      get;
      set;
      }
    
     long Prev_Sell_N_Volume{
      get;
      set;
      }
    
     int Prev_Pl{
      get;
      set;
      }
    
     long Prev_TVol{
      get;
      set;
      }
    
     System.TimeSpan heven{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     int VisitCount{
      get;
      set;
      }
    
    }// interface
    
    [Table("ClientTypes")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(ClintTypePK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class ClientType:IEntityBase, IClientType,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long ClintTypePK
        {
            get { return _clintTypePK; }
            set
            {
                if (_clintTypePK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_clintTypePK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'ClintTypePK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _clintTypePK = value;
                    OnPropertyChanged("ClintTypePK");
                }
            }
        }
        protected long _clintTypePK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual System.DateTime DayDt
        {
            get { return _dayDt; }
            set
            {
                if (_dayDt != value)
                {
                    ChangeTracker.RecordOriginalValue("DayDt", _dayDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DayDt"))
                            ChangeTracker.RecordOriginalValue("DayDt", _dayDt);
                            
                    _dayDt = value;
                    OnPropertyChanged("DayDt");
                }
            }
        }
        protected System.DateTime _dayDt;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual int Buy_CountI
        {
            get { return _buy_CountI; }
            set
            {
                if (_buy_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_CountI", _buy_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_CountI"))
                            ChangeTracker.RecordOriginalValue("Buy_CountI", _buy_CountI);
                            
                    _buy_CountI = value;
                    OnPropertyChanged("Buy_CountI");
                }
            }
        }
        protected int _buy_CountI;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual int Buy_CountN
        {
            get { return _buy_CountN; }
            set
            {
                if (_buy_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_CountN", _buy_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_CountN"))
                            ChangeTracker.RecordOriginalValue("Buy_CountN", _buy_CountN);
                            
                    _buy_CountN = value;
                    OnPropertyChanged("Buy_CountN");
                }
            }
        }
        protected int _buy_CountN;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual long Buy_I_Volume
        {
            get { return _buy_I_Volume; }
            set
            {
                if (_buy_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_I_Volume", _buy_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Buy_I_Volume", _buy_I_Volume);
                            
                    _buy_I_Volume = value;
                    OnPropertyChanged("Buy_I_Volume");
                }
            }
        }
        protected long _buy_I_Volume;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual long Buy_N_Volume
        {
            get { return _buy_N_Volume; }
            set
            {
                if (_buy_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Buy_N_Volume", _buy_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Buy_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Buy_N_Volume", _buy_N_Volume);
                            
                    _buy_N_Volume = value;
                    OnPropertyChanged("Buy_N_Volume");
                }
            }
        }
        protected long _buy_N_Volume;
    [Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual int Sell_CountI
        {
            get { return _sell_CountI; }
            set
            {
                if (_sell_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_CountI", _sell_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_CountI"))
                            ChangeTracker.RecordOriginalValue("Sell_CountI", _sell_CountI);
                            
                    _sell_CountI = value;
                    OnPropertyChanged("Sell_CountI");
                }
            }
        }
        protected int _sell_CountI;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual int Sell_CountN
        {
            get { return _sell_CountN; }
            set
            {
                if (_sell_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_CountN", _sell_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_CountN"))
                            ChangeTracker.RecordOriginalValue("Sell_CountN", _sell_CountN);
                            
                    _sell_CountN = value;
                    OnPropertyChanged("Sell_CountN");
                }
            }
        }
        protected int _sell_CountN;
    [Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual long Sell_I_Volume
        {
            get { return _sell_I_Volume; }
            set
            {
                if (_sell_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_I_Volume", _sell_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Sell_I_Volume", _sell_I_Volume);
                            
                    _sell_I_Volume = value;
                    OnPropertyChanged("Sell_I_Volume");
                }
            }
        }
        protected long _sell_I_Volume;
    [Required]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual long Sell_N_Volume
        {
            get { return _sell_N_Volume; }
            set
            {
                if (_sell_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Sell_N_Volume", _sell_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Sell_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Sell_N_Volume", _sell_N_Volume);
                            
                    _sell_N_Volume = value;
                    OnPropertyChanged("Sell_N_Volume");
                }
            }
        }
        protected long _sell_N_Volume;
    [Required]
    
	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual int Pl
        {
            get { return _pl; }
            set
            {
                if (_pl != value)
                {
                    ChangeTracker.RecordOriginalValue("Pl", _pl);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Pl"))
                            ChangeTracker.RecordOriginalValue("Pl", _pl);
                            
                    _pl = value;
                    OnPropertyChanged("Pl");
                }
            }
        }
        protected int _pl;
    [Required]
    
	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual long TVol
        {
            get { return _tVol; }
            set
            {
                if (_tVol != value)
                {
                    ChangeTracker.RecordOriginalValue("TVol", _tVol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TVol"))
                            ChangeTracker.RecordOriginalValue("TVol", _tVol);
                            
                    _tVol = value;
                    OnPropertyChanged("TVol");
                }
            }
        }
        protected long _tVol;
    [Required]
    
	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual int Prev_Buy_CountI
        {
            get { return _prev_Buy_CountI; }
            set
            {
                if (_prev_Buy_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Buy_CountI", _prev_Buy_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Buy_CountI"))
                            ChangeTracker.RecordOriginalValue("Prev_Buy_CountI", _prev_Buy_CountI);
                            
                    _prev_Buy_CountI = value;
                    OnPropertyChanged("Prev_Buy_CountI");
                }
            }
        }
        protected int _prev_Buy_CountI;
    [Required]
    
	[ProtoMember(14)]
    
    [DataMember]
    
    public virtual int Prev_Buy_CountN
        {
            get { return _prev_Buy_CountN; }
            set
            {
                if (_prev_Buy_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Buy_CountN", _prev_Buy_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Buy_CountN"))
                            ChangeTracker.RecordOriginalValue("Prev_Buy_CountN", _prev_Buy_CountN);
                            
                    _prev_Buy_CountN = value;
                    OnPropertyChanged("Prev_Buy_CountN");
                }
            }
        }
        protected int _prev_Buy_CountN;
    [Required]
    
	[ProtoMember(15)]
    
    [DataMember]
    
    public virtual long Prev_Buy_I_Volume
        {
            get { return _prev_Buy_I_Volume; }
            set
            {
                if (_prev_Buy_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Buy_I_Volume", _prev_Buy_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Buy_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Prev_Buy_I_Volume", _prev_Buy_I_Volume);
                            
                    _prev_Buy_I_Volume = value;
                    OnPropertyChanged("Prev_Buy_I_Volume");
                }
            }
        }
        protected long _prev_Buy_I_Volume;
    [Required]
    
	[ProtoMember(16)]
    
    [DataMember]
    
    public virtual long Prev_Buy_N_Volume
        {
            get { return _prev_Buy_N_Volume; }
            set
            {
                if (_prev_Buy_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Buy_N_Volume", _prev_Buy_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Buy_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Prev_Buy_N_Volume", _prev_Buy_N_Volume);
                            
                    _prev_Buy_N_Volume = value;
                    OnPropertyChanged("Prev_Buy_N_Volume");
                }
            }
        }
        protected long _prev_Buy_N_Volume;
    [Required]
    
	[ProtoMember(17)]
    
    [DataMember]
    
    public virtual int Prev_Sell_CountI
        {
            get { return _prev_Sell_CountI; }
            set
            {
                if (_prev_Sell_CountI != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Sell_CountI", _prev_Sell_CountI);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Sell_CountI"))
                            ChangeTracker.RecordOriginalValue("Prev_Sell_CountI", _prev_Sell_CountI);
                            
                    _prev_Sell_CountI = value;
                    OnPropertyChanged("Prev_Sell_CountI");
                }
            }
        }
        protected int _prev_Sell_CountI;
    [Required]
    
	[ProtoMember(18)]
    
    [DataMember]
    
    public virtual int Prev_Sell_CountN
        {
            get { return _prev_Sell_CountN; }
            set
            {
                if (_prev_Sell_CountN != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Sell_CountN", _prev_Sell_CountN);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Sell_CountN"))
                            ChangeTracker.RecordOriginalValue("Prev_Sell_CountN", _prev_Sell_CountN);
                            
                    _prev_Sell_CountN = value;
                    OnPropertyChanged("Prev_Sell_CountN");
                }
            }
        }
        protected int _prev_Sell_CountN;
    [Required]
    
	[ProtoMember(19)]
    
    [DataMember]
    
    public virtual long Prev_Sell_I_Volume
        {
            get { return _prev_Sell_I_Volume; }
            set
            {
                if (_prev_Sell_I_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Sell_I_Volume", _prev_Sell_I_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Sell_I_Volume"))
                            ChangeTracker.RecordOriginalValue("Prev_Sell_I_Volume", _prev_Sell_I_Volume);
                            
                    _prev_Sell_I_Volume = value;
                    OnPropertyChanged("Prev_Sell_I_Volume");
                }
            }
        }
        protected long _prev_Sell_I_Volume;
    [Required]
    
	[ProtoMember(20)]
    
    [DataMember]
    
    public virtual long Prev_Sell_N_Volume
        {
            get { return _prev_Sell_N_Volume; }
            set
            {
                if (_prev_Sell_N_Volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Sell_N_Volume", _prev_Sell_N_Volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Sell_N_Volume"))
                            ChangeTracker.RecordOriginalValue("Prev_Sell_N_Volume", _prev_Sell_N_Volume);
                            
                    _prev_Sell_N_Volume = value;
                    OnPropertyChanged("Prev_Sell_N_Volume");
                }
            }
        }
        protected long _prev_Sell_N_Volume;
    [Required]
    
	[ProtoMember(21)]
    
    [DataMember]
    
    public virtual int Prev_Pl
        {
            get { return _prev_Pl; }
            set
            {
                if (_prev_Pl != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_Pl", _prev_Pl);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_Pl"))
                            ChangeTracker.RecordOriginalValue("Prev_Pl", _prev_Pl);
                            
                    _prev_Pl = value;
                    OnPropertyChanged("Prev_Pl");
                }
            }
        }
        protected int _prev_Pl;
    [Required]
    
	[ProtoMember(22)]
    
    [DataMember]
    
    public virtual long Prev_TVol
        {
            get { return _prev_TVol; }
            set
            {
                if (_prev_TVol != value)
                {
                    ChangeTracker.RecordOriginalValue("Prev_TVol", _prev_TVol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Prev_TVol"))
                            ChangeTracker.RecordOriginalValue("Prev_TVol", _prev_TVol);
                            
                    _prev_TVol = value;
                    OnPropertyChanged("Prev_TVol");
                }
            }
        }
        protected long _prev_TVol;
    [Required]
    
	[ProtoMember(23)]
    
    [DataMember]
    
    public virtual System.TimeSpan heven
        {
            get { return _heven; }
            set
            {
                if (_heven != value)
                {
                    ChangeTracker.RecordOriginalValue("heven", _heven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("heven"))
                            ChangeTracker.RecordOriginalValue("heven", _heven);
                            
                    _heven = value;
                    OnPropertyChanged("heven");
                }
            }
        }
        protected System.TimeSpan _heven;
    [Required]
    
	[ProtoMember(24)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(25)]
    
    [DataMember]
    
    public virtual int VisitCount
        {
            get { return _visitCount; }
            set
            {
                if (_visitCount != value)
                {
                    ChangeTracker.RecordOriginalValue("VisitCount", _visitCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("VisitCount"))
                            ChangeTracker.RecordOriginalValue("VisitCount", _visitCount);
                            
                    _visitCount = value;
                    OnPropertyChanged("VisitCount");
                }
            }
        }
        protected int _visitCount;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        ClientType cloned = new ClientType();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._clintTypePK=this._clintTypePK;
             cloned._dayDt=this._dayDt;
             cloned._buy_CountI=this._buy_CountI;
             cloned._buy_CountN=this._buy_CountN;
             cloned._buy_I_Volume=this._buy_I_Volume;
             cloned._buy_N_Volume=this._buy_N_Volume;
             cloned._sell_CountI=this._sell_CountI;
             cloned._sell_CountN=this._sell_CountN;
             cloned._sell_I_Volume=this._sell_I_Volume;
             cloned._sell_N_Volume=this._sell_N_Volume;
             cloned._pl=this._pl;
             cloned._tVol=this._tVol;
             cloned._prev_Buy_CountI=this._prev_Buy_CountI;
             cloned._prev_Buy_CountN=this._prev_Buy_CountN;
             cloned._prev_Buy_I_Volume=this._prev_Buy_I_Volume;
             cloned._prev_Buy_N_Volume=this._prev_Buy_N_Volume;
             cloned._prev_Sell_CountI=this._prev_Sell_CountI;
             cloned._prev_Sell_CountN=this._prev_Sell_CountN;
             cloned._prev_Sell_I_Volume=this._prev_Sell_I_Volume;
             cloned._prev_Sell_N_Volume=this._prev_Sell_N_Volume;
             cloned._prev_Pl=this._prev_Pl;
             cloned._prev_TVol=this._prev_TVol;
             cloned._heven=this._heven;
             cloned._insCode=this._insCode;
             cloned._visitCount=this._visitCount;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._clintTypePK.ToString());
    					// ClintTypePK
    			sb.Append("`");
    
    						sb.Append(this._dayDt.ToString());
    					// DayDt
    			sb.Append("`");
    
    						sb.Append(this._buy_CountI.ToString());
    					// Buy_CountI
    			sb.Append("`");
    
    						sb.Append(this._buy_CountN.ToString());
    					// Buy_CountN
    			sb.Append("`");
    
    						sb.Append(this._buy_I_Volume.ToString());
    					// Buy_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._buy_N_Volume.ToString());
    					// Buy_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._sell_CountI.ToString());
    					// Sell_CountI
    			sb.Append("`");
    
    						sb.Append(this._sell_CountN.ToString());
    					// Sell_CountN
    			sb.Append("`");
    
    						sb.Append(this._sell_I_Volume.ToString());
    					// Sell_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._sell_N_Volume.ToString());
    					// Sell_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._pl.ToString());
    					// Pl
    			sb.Append("`");
    
    						sb.Append(this._tVol.ToString());
    					// TVol
    			sb.Append("`");
    
    						sb.Append(this._prev_Buy_CountI.ToString());
    					// Prev_Buy_CountI
    			sb.Append("`");
    
    						sb.Append(this._prev_Buy_CountN.ToString());
    					// Prev_Buy_CountN
    			sb.Append("`");
    
    						sb.Append(this._prev_Buy_I_Volume.ToString());
    					// Prev_Buy_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._prev_Buy_N_Volume.ToString());
    					// Prev_Buy_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._prev_Sell_CountI.ToString());
    					// Prev_Sell_CountI
    			sb.Append("`");
    
    						sb.Append(this._prev_Sell_CountN.ToString());
    					// Prev_Sell_CountN
    			sb.Append("`");
    
    						sb.Append(this._prev_Sell_I_Volume.ToString());
    					// Prev_Sell_I_Volume
    			sb.Append("`");
    
    						sb.Append(this._prev_Sell_N_Volume.ToString());
    					// Prev_Sell_N_Volume
    			sb.Append("`");
    
    						sb.Append(this._prev_Pl.ToString());
    					// Prev_Pl
    			sb.Append("`");
    
    						sb.Append(this._prev_TVol.ToString());
    					// Prev_TVol
    			sb.Append("`");
    
    						sb.Append(this._heven.ToString());
    					// heven
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._visitCount.ToString());
    					// VisitCount
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<ClientType>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<ClientType>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=26;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        ClientType casted_other = other as ClientType;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.ClintTypePK,casted_other.ClintTypePK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DayDt,casted_other.DayDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_CountI,casted_other.Buy_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_CountN,casted_other.Buy_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_I_Volume,casted_other.Buy_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Buy_N_Volume,casted_other.Buy_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_CountI,casted_other.Sell_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_CountN,casted_other.Sell_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_I_Volume,casted_other.Sell_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Sell_N_Volume,casted_other.Sell_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Pl,casted_other.Pl))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TVol,casted_other.TVol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Buy_CountI,casted_other.Prev_Buy_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Buy_CountN,casted_other.Prev_Buy_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Buy_I_Volume,casted_other.Prev_Buy_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Buy_N_Volume,casted_other.Prev_Buy_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Sell_CountI,casted_other.Prev_Sell_CountI))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Sell_CountN,casted_other.Prev_Sell_CountN))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Sell_I_Volume,casted_other.Prev_Sell_I_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Sell_N_Volume,casted_other.Prev_Sell_N_Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_Pl,casted_other.Prev_Pl))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Prev_TVol,casted_other.Prev_TVol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.heven,casted_other.heven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.VisitCount,casted_other.VisitCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "ClintTypePK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "ClintTypePK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "DayDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Buy_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Sell_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Pl", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "TVol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Buy_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Buy_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Buy_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Buy_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Sell_CountI", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Sell_CountN", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Sell_I_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Sell_N_Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_Pl", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Prev_TVol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "heven", Kind = FieldKinds.Primitive,PropertyType =typeof(System.TimeSpan) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "VisitCount", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vClintTypePK=(long)this.GetValue("ClintTypePK");
        Expression<Func<ClientType,bool>> exp = p => p.ClintTypePK == vClintTypePK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "clinttypepk":
                retVal = this.ClintTypePK;
                break;
            case "daydt":
                retVal = this.DayDt;
                break;
            case "buy_counti":
                retVal = this.Buy_CountI;
                break;
            case "buy_countn":
                retVal = this.Buy_CountN;
                break;
            case "buy_i_volume":
                retVal = this.Buy_I_Volume;
                break;
            case "buy_n_volume":
                retVal = this.Buy_N_Volume;
                break;
            case "sell_counti":
                retVal = this.Sell_CountI;
                break;
            case "sell_countn":
                retVal = this.Sell_CountN;
                break;
            case "sell_i_volume":
                retVal = this.Sell_I_Volume;
                break;
            case "sell_n_volume":
                retVal = this.Sell_N_Volume;
                break;
            case "pl":
                retVal = this.Pl;
                break;
            case "tvol":
                retVal = this.TVol;
                break;
            case "prev_buy_counti":
                retVal = this.Prev_Buy_CountI;
                break;
            case "prev_buy_countn":
                retVal = this.Prev_Buy_CountN;
                break;
            case "prev_buy_i_volume":
                retVal = this.Prev_Buy_I_Volume;
                break;
            case "prev_buy_n_volume":
                retVal = this.Prev_Buy_N_Volume;
                break;
            case "prev_sell_counti":
                retVal = this.Prev_Sell_CountI;
                break;
            case "prev_sell_countn":
                retVal = this.Prev_Sell_CountN;
                break;
            case "prev_sell_i_volume":
                retVal = this.Prev_Sell_I_Volume;
                break;
            case "prev_sell_n_volume":
                retVal = this.Prev_Sell_N_Volume;
                break;
            case "prev_pl":
                retVal = this.Prev_Pl;
                break;
            case "prev_tvol":
                retVal = this.Prev_TVol;
                break;
            case "heven":
                retVal = this.heven;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "visitcount":
                retVal = this.VisitCount;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _clintTypePK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "clinttypepk":
                this.ClintTypePK =(long)value;
            break;
            case "daydt":
                this.DayDt =(System.DateTime)value;
            break;
            case "buy_counti":
                this.Buy_CountI =(int)value;
            break;
            case "buy_countn":
                this.Buy_CountN =(int)value;
            break;
            case "buy_i_volume":
                this.Buy_I_Volume =(long)value;
            break;
            case "buy_n_volume":
                this.Buy_N_Volume =(long)value;
            break;
            case "sell_counti":
                this.Sell_CountI =(int)value;
            break;
            case "sell_countn":
                this.Sell_CountN =(int)value;
            break;
            case "sell_i_volume":
                this.Sell_I_Volume =(long)value;
            break;
            case "sell_n_volume":
                this.Sell_N_Volume =(long)value;
            break;
            case "pl":
                this.Pl =(int)value;
            break;
            case "tvol":
                this.TVol =(long)value;
            break;
            case "prev_buy_counti":
                this.Prev_Buy_CountI =(int)value;
            break;
            case "prev_buy_countn":
                this.Prev_Buy_CountN =(int)value;
            break;
            case "prev_buy_i_volume":
                this.Prev_Buy_I_Volume =(long)value;
            break;
            case "prev_buy_n_volume":
                this.Prev_Buy_N_Volume =(long)value;
            break;
            case "prev_sell_counti":
                this.Prev_Sell_CountI =(int)value;
            break;
            case "prev_sell_countn":
                this.Prev_Sell_CountN =(int)value;
            break;
            case "prev_sell_i_volume":
                this.Prev_Sell_I_Volume =(long)value;
            break;
            case "prev_sell_n_volume":
                this.Prev_Sell_N_Volume =(long)value;
            break;
            case "prev_pl":
                this.Prev_Pl =(int)value;
            break;
            case "prev_tvol":
                this.Prev_TVol =(long)value;
            break;
            case "heven":
                this.heven =(System.TimeSpan)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "visitcount":
                this.VisitCount =(int)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
