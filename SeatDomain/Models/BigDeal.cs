//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IBigDeal{
    
     long BigDealPK{
      get;
      set;
      }
    
     System.DateTime DayDt{
      get;
      set;
      }
    
     int Count{
      get;
      set;
      }
    
     long Volume{
      get;
      set;
      }
    
     byte DealType{
      get;
      set;
      }
    
     byte TraderType{
      get;
      set;
      }
    
     int Price{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     long AmountAvg{
      get;
      set;
      }
    
     string CSecVal{
      get;
      set;
      }
    
     Nullable<int> pc{
      get;
      set;
      }
    
     Nullable<int> py{
      get;
      set;
      }
    
     Nullable<double> plc{
      get;
      set;
      }
    
     Nullable<double> plp{
      get;
      set;
      }
    
     Nullable<int> pf{
      get;
      set;
      }
    
     Nullable<int> pcc{
      get;
      set;
      }
    
     Nullable<double> pcp{
      get;
      set;
      }
    
     Nullable<int> tno{
      get;
      set;
      }
    
     Nullable<long> tvol{
      get;
      set;
      }
    
     Nullable<long> tval{
      get;
      set;
      }
    
     Nullable<int> pmin{
      get;
      set;
      }
    
     Nullable<int> pmax{
      get;
      set;
      }
    
     Nullable<double> eps{
      get;
      set;
      }
    
     Nullable<double> pe{
      get;
      set;
      }
    
     Nullable<int> visitcount{
      get;
      set;
      }
    
     Nullable<int> tmax{
      get;
      set;
      }
    
     Nullable<int> tmin{
      get;
      set;
      }
    
     Nullable<int> zd1{
      get;
      set;
      }
    
     Nullable<int> pd1{
      get;
      set;
      }
    
     Nullable<long> qd1{
      get;
      set;
      }
    
     Nullable<int> po1{
      get;
      set;
      }
    
     Nullable<long> qo1{
      get;
      set;
      }
    
     Nullable<int> zo1{
      get;
      set;
      }
    
     Nullable<long> bvol{
      get;
      set;
      }
    
    }// interface
    
    [Table("BigDeals")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(BigDealPK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class BigDeal:IEntityBase, IBigDeal,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long BigDealPK
        {
            get { return _bigDealPK; }
            set
            {
                if (_bigDealPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_bigDealPK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'BigDealPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bigDealPK = value;
                    OnPropertyChanged("BigDealPK");
                }
            }
        }
        protected long _bigDealPK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual System.DateTime DayDt
        {
            get { return _dayDt; }
            set
            {
                if (_dayDt != value)
                {
                    ChangeTracker.RecordOriginalValue("DayDt", _dayDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DayDt"))
                            ChangeTracker.RecordOriginalValue("DayDt", _dayDt);
                            
                    _dayDt = value;
                    OnPropertyChanged("DayDt");
                }
            }
        }
        protected System.DateTime _dayDt;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual int Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    ChangeTracker.RecordOriginalValue("Count", _count);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Count"))
                            ChangeTracker.RecordOriginalValue("Count", _count);
                            
                    _count = value;
                    OnPropertyChanged("Count");
                }
            }
        }
        protected int _count;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual long Volume
        {
            get { return _volume; }
            set
            {
                if (_volume != value)
                {
                    ChangeTracker.RecordOriginalValue("Volume", _volume);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Volume"))
                            ChangeTracker.RecordOriginalValue("Volume", _volume);
                            
                    _volume = value;
                    OnPropertyChanged("Volume");
                }
            }
        }
        protected long _volume;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual byte DealType
        {
            get { return _dealType; }
            set
            {
                if (_dealType != value)
                {
                    ChangeTracker.RecordOriginalValue("DealType", _dealType);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DealType"))
                            ChangeTracker.RecordOriginalValue("DealType", _dealType);
                            
                    _dealType = value;
                    OnPropertyChanged("DealType");
                }
            }
        }
        protected byte _dealType;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual byte TraderType
        {
            get { return _traderType; }
            set
            {
                if (_traderType != value)
                {
                    ChangeTracker.RecordOriginalValue("TraderType", _traderType);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TraderType"))
                            ChangeTracker.RecordOriginalValue("TraderType", _traderType);
                            
                    _traderType = value;
                    OnPropertyChanged("TraderType");
                }
            }
        }
        protected byte _traderType;
    [Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual int Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    ChangeTracker.RecordOriginalValue("Price", _price);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Price"))
                            ChangeTracker.RecordOriginalValue("Price", _price);
                            
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        protected int _price;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual long AmountAvg
        {
            get { return _amountAvg; }
            set
            {
                if (_amountAvg != value)
                {
                    ChangeTracker.RecordOriginalValue("AmountAvg", _amountAvg);
                        if (!ChangeTracker.OriginalValues.ContainsKey("AmountAvg"))
                            ChangeTracker.RecordOriginalValue("AmountAvg", _amountAvg);
                            
                    _amountAvg = value;
                    OnPropertyChanged("AmountAvg");
                }
            }
        }
        protected long _amountAvg;
    [MaxLength(2)]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual string CSecVal
        {
            get { return _cSecVal; }
            set
            {
                if (_cSecVal != value)
                {
                    ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CSecVal"))
                            ChangeTracker.RecordOriginalValue("CSecVal", _cSecVal);
                            
                    _cSecVal = value;
                    OnPropertyChanged("CSecVal");
                }
            }
        }
        protected string _cSecVal;
    	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual Nullable<int> pc
        {
            get { return _pc; }
            set
            {
                if (_pc != value)
                {
                    ChangeTracker.RecordOriginalValue("pc", _pc);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pc"))
                            ChangeTracker.RecordOriginalValue("pc", _pc);
                            
                    _pc = value;
                    OnPropertyChanged("pc");
                }
            }
        }
        protected Nullable<int> _pc;
    	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual Nullable<int> py
        {
            get { return _py; }
            set
            {
                if (_py != value)
                {
                    ChangeTracker.RecordOriginalValue("py", _py);
                        if (!ChangeTracker.OriginalValues.ContainsKey("py"))
                            ChangeTracker.RecordOriginalValue("py", _py);
                            
                    _py = value;
                    OnPropertyChanged("py");
                }
            }
        }
        protected Nullable<int> _py;
    	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual Nullable<double> plc
        {
            get { return _plc; }
            set
            {
                if (_plc != value)
                {
                    ChangeTracker.RecordOriginalValue("plc", _plc);
                        if (!ChangeTracker.OriginalValues.ContainsKey("plc"))
                            ChangeTracker.RecordOriginalValue("plc", _plc);
                            
                    _plc = value;
                    OnPropertyChanged("plc");
                }
            }
        }
        protected Nullable<double> _plc;
    	[ProtoMember(14)]
    
    [DataMember]
    
    public virtual Nullable<double> plp
        {
            get { return _plp; }
            set
            {
                if (_plp != value)
                {
                    ChangeTracker.RecordOriginalValue("plp", _plp);
                        if (!ChangeTracker.OriginalValues.ContainsKey("plp"))
                            ChangeTracker.RecordOriginalValue("plp", _plp);
                            
                    _plp = value;
                    OnPropertyChanged("plp");
                }
            }
        }
        protected Nullable<double> _plp;
    	[ProtoMember(15)]
    
    [DataMember]
    
    public virtual Nullable<int> pf
        {
            get { return _pf; }
            set
            {
                if (_pf != value)
                {
                    ChangeTracker.RecordOriginalValue("pf", _pf);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pf"))
                            ChangeTracker.RecordOriginalValue("pf", _pf);
                            
                    _pf = value;
                    OnPropertyChanged("pf");
                }
            }
        }
        protected Nullable<int> _pf;
    	[ProtoMember(16)]
    
    [DataMember]
    
    public virtual Nullable<int> pcc
        {
            get { return _pcc; }
            set
            {
                if (_pcc != value)
                {
                    ChangeTracker.RecordOriginalValue("pcc", _pcc);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pcc"))
                            ChangeTracker.RecordOriginalValue("pcc", _pcc);
                            
                    _pcc = value;
                    OnPropertyChanged("pcc");
                }
            }
        }
        protected Nullable<int> _pcc;
    	[ProtoMember(17)]
    
    [DataMember]
    
    public virtual Nullable<double> pcp
        {
            get { return _pcp; }
            set
            {
                if (_pcp != value)
                {
                    ChangeTracker.RecordOriginalValue("pcp", _pcp);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pcp"))
                            ChangeTracker.RecordOriginalValue("pcp", _pcp);
                            
                    _pcp = value;
                    OnPropertyChanged("pcp");
                }
            }
        }
        protected Nullable<double> _pcp;
    	[ProtoMember(18)]
    
    [DataMember]
    
    public virtual Nullable<int> tno
        {
            get { return _tno; }
            set
            {
                if (_tno != value)
                {
                    ChangeTracker.RecordOriginalValue("tno", _tno);
                        if (!ChangeTracker.OriginalValues.ContainsKey("tno"))
                            ChangeTracker.RecordOriginalValue("tno", _tno);
                            
                    _tno = value;
                    OnPropertyChanged("tno");
                }
            }
        }
        protected Nullable<int> _tno;
    	[ProtoMember(19)]
    
    [DataMember]
    
    public virtual Nullable<long> tvol
        {
            get { return _tvol; }
            set
            {
                if (_tvol != value)
                {
                    ChangeTracker.RecordOriginalValue("tvol", _tvol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("tvol"))
                            ChangeTracker.RecordOriginalValue("tvol", _tvol);
                            
                    _tvol = value;
                    OnPropertyChanged("tvol");
                }
            }
        }
        protected Nullable<long> _tvol;
    	[ProtoMember(20)]
    
    [DataMember]
    
    public virtual Nullable<long> tval
        {
            get { return _tval; }
            set
            {
                if (_tval != value)
                {
                    ChangeTracker.RecordOriginalValue("tval", _tval);
                        if (!ChangeTracker.OriginalValues.ContainsKey("tval"))
                            ChangeTracker.RecordOriginalValue("tval", _tval);
                            
                    _tval = value;
                    OnPropertyChanged("tval");
                }
            }
        }
        protected Nullable<long> _tval;
    	[ProtoMember(21)]
    
    [DataMember]
    
    public virtual Nullable<int> pmin
        {
            get { return _pmin; }
            set
            {
                if (_pmin != value)
                {
                    ChangeTracker.RecordOriginalValue("pmin", _pmin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pmin"))
                            ChangeTracker.RecordOriginalValue("pmin", _pmin);
                            
                    _pmin = value;
                    OnPropertyChanged("pmin");
                }
            }
        }
        protected Nullable<int> _pmin;
    	[ProtoMember(22)]
    
    [DataMember]
    
    public virtual Nullable<int> pmax
        {
            get { return _pmax; }
            set
            {
                if (_pmax != value)
                {
                    ChangeTracker.RecordOriginalValue("pmax", _pmax);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pmax"))
                            ChangeTracker.RecordOriginalValue("pmax", _pmax);
                            
                    _pmax = value;
                    OnPropertyChanged("pmax");
                }
            }
        }
        protected Nullable<int> _pmax;
    	[ProtoMember(23)]
    
    [DataMember]
    
    public virtual Nullable<double> eps
        {
            get { return _eps; }
            set
            {
                if (_eps != value)
                {
                    ChangeTracker.RecordOriginalValue("eps", _eps);
                        if (!ChangeTracker.OriginalValues.ContainsKey("eps"))
                            ChangeTracker.RecordOriginalValue("eps", _eps);
                            
                    _eps = value;
                    OnPropertyChanged("eps");
                }
            }
        }
        protected Nullable<double> _eps;
    	[ProtoMember(24)]
    
    [DataMember]
    
    public virtual Nullable<double> pe
        {
            get { return _pe; }
            set
            {
                if (_pe != value)
                {
                    ChangeTracker.RecordOriginalValue("pe", _pe);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pe"))
                            ChangeTracker.RecordOriginalValue("pe", _pe);
                            
                    _pe = value;
                    OnPropertyChanged("pe");
                }
            }
        }
        protected Nullable<double> _pe;
    	[ProtoMember(25)]
    
    [DataMember]
    
    public virtual Nullable<int> visitcount
        {
            get { return _visitcount; }
            set
            {
                if (_visitcount != value)
                {
                    ChangeTracker.RecordOriginalValue("visitcount", _visitcount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("visitcount"))
                            ChangeTracker.RecordOriginalValue("visitcount", _visitcount);
                            
                    _visitcount = value;
                    OnPropertyChanged("visitcount");
                }
            }
        }
        protected Nullable<int> _visitcount;
    	[ProtoMember(26)]
    
    [DataMember]
    
    public virtual Nullable<int> tmax
        {
            get { return _tmax; }
            set
            {
                if (_tmax != value)
                {
                    ChangeTracker.RecordOriginalValue("tmax", _tmax);
                        if (!ChangeTracker.OriginalValues.ContainsKey("tmax"))
                            ChangeTracker.RecordOriginalValue("tmax", _tmax);
                            
                    _tmax = value;
                    OnPropertyChanged("tmax");
                }
            }
        }
        protected Nullable<int> _tmax;
    	[ProtoMember(27)]
    
    [DataMember]
    
    public virtual Nullable<int> tmin
        {
            get { return _tmin; }
            set
            {
                if (_tmin != value)
                {
                    ChangeTracker.RecordOriginalValue("tmin", _tmin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("tmin"))
                            ChangeTracker.RecordOriginalValue("tmin", _tmin);
                            
                    _tmin = value;
                    OnPropertyChanged("tmin");
                }
            }
        }
        protected Nullable<int> _tmin;
    	[ProtoMember(28)]
    
    [DataMember]
    
    public virtual Nullable<int> zd1
        {
            get { return _zd1; }
            set
            {
                if (_zd1 != value)
                {
                    ChangeTracker.RecordOriginalValue("zd1", _zd1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("zd1"))
                            ChangeTracker.RecordOriginalValue("zd1", _zd1);
                            
                    _zd1 = value;
                    OnPropertyChanged("zd1");
                }
            }
        }
        protected Nullable<int> _zd1;
    	[ProtoMember(29)]
    
    [DataMember]
    
    public virtual Nullable<int> pd1
        {
            get { return _pd1; }
            set
            {
                if (_pd1 != value)
                {
                    ChangeTracker.RecordOriginalValue("pd1", _pd1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("pd1"))
                            ChangeTracker.RecordOriginalValue("pd1", _pd1);
                            
                    _pd1 = value;
                    OnPropertyChanged("pd1");
                }
            }
        }
        protected Nullable<int> _pd1;
    	[ProtoMember(30)]
    
    [DataMember]
    
    public virtual Nullable<long> qd1
        {
            get { return _qd1; }
            set
            {
                if (_qd1 != value)
                {
                    ChangeTracker.RecordOriginalValue("qd1", _qd1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("qd1"))
                            ChangeTracker.RecordOriginalValue("qd1", _qd1);
                            
                    _qd1 = value;
                    OnPropertyChanged("qd1");
                }
            }
        }
        protected Nullable<long> _qd1;
    	[ProtoMember(31)]
    
    [DataMember]
    
    public virtual Nullable<int> po1
        {
            get { return _po1; }
            set
            {
                if (_po1 != value)
                {
                    ChangeTracker.RecordOriginalValue("po1", _po1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("po1"))
                            ChangeTracker.RecordOriginalValue("po1", _po1);
                            
                    _po1 = value;
                    OnPropertyChanged("po1");
                }
            }
        }
        protected Nullable<int> _po1;
    	[ProtoMember(32)]
    
    [DataMember]
    
    public virtual Nullable<long> qo1
        {
            get { return _qo1; }
            set
            {
                if (_qo1 != value)
                {
                    ChangeTracker.RecordOriginalValue("qo1", _qo1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("qo1"))
                            ChangeTracker.RecordOriginalValue("qo1", _qo1);
                            
                    _qo1 = value;
                    OnPropertyChanged("qo1");
                }
            }
        }
        protected Nullable<long> _qo1;
    	[ProtoMember(33)]
    
    [DataMember]
    
    public virtual Nullable<int> zo1
        {
            get { return _zo1; }
            set
            {
                if (_zo1 != value)
                {
                    ChangeTracker.RecordOriginalValue("zo1", _zo1);
                        if (!ChangeTracker.OriginalValues.ContainsKey("zo1"))
                            ChangeTracker.RecordOriginalValue("zo1", _zo1);
                            
                    _zo1 = value;
                    OnPropertyChanged("zo1");
                }
            }
        }
        protected Nullable<int> _zo1;
    	[ProtoMember(34)]
    
    [DataMember]
    
    public virtual Nullable<long> bvol
        {
            get { return _bvol; }
            set
            {
                if (_bvol != value)
                {
                    ChangeTracker.RecordOriginalValue("bvol", _bvol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("bvol"))
                            ChangeTracker.RecordOriginalValue("bvol", _bvol);
                            
                    _bvol = value;
                    OnPropertyChanged("bvol");
                }
            }
        }
        protected Nullable<long> _bvol;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        BigDeal cloned = new BigDeal();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._bigDealPK=this._bigDealPK;
             cloned._dayDt=this._dayDt;
             cloned._count=this._count;
             cloned._volume=this._volume;
             cloned._dealType=this._dealType;
             cloned._traderType=this._traderType;
             cloned._price=this._price;
             cloned._insCode=this._insCode;
             cloned._amountAvg=this._amountAvg;
             cloned._cSecVal=this._cSecVal;
             cloned._pc=this._pc;
             cloned._py=this._py;
             cloned._plc=this._plc;
             cloned._plp=this._plp;
             cloned._pf=this._pf;
             cloned._pcc=this._pcc;
             cloned._pcp=this._pcp;
             cloned._tno=this._tno;
             cloned._tvol=this._tvol;
             cloned._tval=this._tval;
             cloned._pmin=this._pmin;
             cloned._pmax=this._pmax;
             cloned._eps=this._eps;
             cloned._pe=this._pe;
             cloned._visitcount=this._visitcount;
             cloned._tmax=this._tmax;
             cloned._tmin=this._tmin;
             cloned._zd1=this._zd1;
             cloned._pd1=this._pd1;
             cloned._qd1=this._qd1;
             cloned._po1=this._po1;
             cloned._qo1=this._qo1;
             cloned._zo1=this._zo1;
             cloned._bvol=this._bvol;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._bigDealPK.ToString());
    					// BigDealPK
    			sb.Append("`");
    
    						sb.Append(this._dayDt.ToString());
    					// DayDt
    			sb.Append("`");
    
    						sb.Append(this._count.ToString());
    					// Count
    			sb.Append("`");
    
    						sb.Append(this._volume.ToString());
    					// Volume
    			sb.Append("`");
    
    						sb.Append(this._dealType.ToString());
    					// DealType
    			sb.Append("`");
    
    						sb.Append(this._traderType.ToString());
    					// TraderType
    			sb.Append("`");
    
    						sb.Append(this._price.ToString());
    					// Price
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._amountAvg.ToString());
    					// AmountAvg
    			sb.Append("`");
    
    						sb.Append(this._cSecVal?.ToString());
    						// CSecVal
    			sb.Append("`");
    
    						sb.Append(this._pc?.ToString());
    						// pc
    			sb.Append("`");
    
    						sb.Append(this._py?.ToString());
    						// py
    			sb.Append("`");
    
    						sb.Append(this._plc?.ToString());
    						// plc
    			sb.Append("`");
    
    						sb.Append(this._plp?.ToString());
    						// plp
    			sb.Append("`");
    
    						sb.Append(this._pf?.ToString());
    						// pf
    			sb.Append("`");
    
    						sb.Append(this._pcc?.ToString());
    						// pcc
    			sb.Append("`");
    
    						sb.Append(this._pcp?.ToString());
    						// pcp
    			sb.Append("`");
    
    						sb.Append(this._tno?.ToString());
    						// tno
    			sb.Append("`");
    
    						sb.Append(this._tvol?.ToString());
    						// tvol
    			sb.Append("`");
    
    						sb.Append(this._tval?.ToString());
    						// tval
    			sb.Append("`");
    
    						sb.Append(this._pmin?.ToString());
    						// pmin
    			sb.Append("`");
    
    						sb.Append(this._pmax?.ToString());
    						// pmax
    			sb.Append("`");
    
    						sb.Append(this._eps?.ToString());
    						// eps
    			sb.Append("`");
    
    						sb.Append(this._pe?.ToString());
    						// pe
    			sb.Append("`");
    
    						sb.Append(this._visitcount?.ToString());
    						// visitcount
    			sb.Append("`");
    
    						sb.Append(this._tmax?.ToString());
    						// tmax
    			sb.Append("`");
    
    						sb.Append(this._tmin?.ToString());
    						// tmin
    			sb.Append("`");
    
    						sb.Append(this._zd1?.ToString());
    						// zd1
    			sb.Append("`");
    
    						sb.Append(this._pd1?.ToString());
    						// pd1
    			sb.Append("`");
    
    						sb.Append(this._qd1?.ToString());
    						// qd1
    			sb.Append("`");
    
    						sb.Append(this._po1?.ToString());
    						// po1
    			sb.Append("`");
    
    						sb.Append(this._qo1?.ToString());
    						// qo1
    			sb.Append("`");
    
    						sb.Append(this._zo1?.ToString());
    						// zo1
    			sb.Append("`");
    
    						sb.Append(this._bvol?.ToString());
    						// bvol
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<BigDeal>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<BigDeal>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=35;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        BigDeal casted_other = other as BigDeal;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.BigDealPK,casted_other.BigDealPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DayDt,casted_other.DayDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Count,casted_other.Count))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Volume,casted_other.Volume))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DealType,casted_other.DealType))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TraderType,casted_other.TraderType))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Price,casted_other.Price))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.AmountAvg,casted_other.AmountAvg))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CSecVal,casted_other.CSecVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pc,casted_other.pc))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.py,casted_other.py))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.plc,casted_other.plc))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.plp,casted_other.plp))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pf,casted_other.pf))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pcc,casted_other.pcc))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pcp,casted_other.pcp))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.tno,casted_other.tno))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.tvol,casted_other.tvol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.tval,casted_other.tval))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pmin,casted_other.pmin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pmax,casted_other.pmax))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.eps,casted_other.eps))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pe,casted_other.pe))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.visitcount,casted_other.visitcount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.tmax,casted_other.tmax))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.tmin,casted_other.tmin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.zd1,casted_other.zd1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.pd1,casted_other.pd1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.qd1,casted_other.qd1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.po1,casted_other.po1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.qo1,casted_other.qo1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.zo1,casted_other.zo1))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.bvol,casted_other.bvol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "BigDealPK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "BigDealPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "DayDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Count", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Volume", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "DealType", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "TraderType", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Price", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "AmountAvg", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "CSecVal", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=2
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "pc", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "py", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "plc", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "plp", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pf", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pcc", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pcp", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "tno", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "tvol", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "tval", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pmin", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pmax", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "eps", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pe", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "visitcount", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "tmax", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "tmin", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "zd1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "pd1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "qd1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "po1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "qo1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "zo1", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "bvol", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vBigDealPK=(long)this.GetValue("BigDealPK");
        Expression<Func<BigDeal,bool>> exp = p => p.BigDealPK == vBigDealPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "bigdealpk":
                retVal = this.BigDealPK;
                break;
            case "daydt":
                retVal = this.DayDt;
                break;
            case "count":
                retVal = this.Count;
                break;
            case "volume":
                retVal = this.Volume;
                break;
            case "dealtype":
                retVal = this.DealType;
                break;
            case "tradertype":
                retVal = this.TraderType;
                break;
            case "price":
                retVal = this.Price;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "amountavg":
                retVal = this.AmountAvg;
                break;
            case "csecval":
                retVal = this.CSecVal;
                break;
            case "pc":
                retVal = this.pc;
                break;
            case "py":
                retVal = this.py;
                break;
            case "plc":
                retVal = this.plc;
                break;
            case "plp":
                retVal = this.plp;
                break;
            case "pf":
                retVal = this.pf;
                break;
            case "pcc":
                retVal = this.pcc;
                break;
            case "pcp":
                retVal = this.pcp;
                break;
            case "tno":
                retVal = this.tno;
                break;
            case "tvol":
                retVal = this.tvol;
                break;
            case "tval":
                retVal = this.tval;
                break;
            case "pmin":
                retVal = this.pmin;
                break;
            case "pmax":
                retVal = this.pmax;
                break;
            case "eps":
                retVal = this.eps;
                break;
            case "pe":
                retVal = this.pe;
                break;
            case "visitcount":
                retVal = this.visitcount;
                break;
            case "tmax":
                retVal = this.tmax;
                break;
            case "tmin":
                retVal = this.tmin;
                break;
            case "zd1":
                retVal = this.zd1;
                break;
            case "pd1":
                retVal = this.pd1;
                break;
            case "qd1":
                retVal = this.qd1;
                break;
            case "po1":
                retVal = this.po1;
                break;
            case "qo1":
                retVal = this.qo1;
                break;
            case "zo1":
                retVal = this.zo1;
                break;
            case "bvol":
                retVal = this.bvol;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _bigDealPK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "bigdealpk":
                this.BigDealPK =(long)value;
            break;
            case "daydt":
                this.DayDt =(System.DateTime)value;
            break;
            case "count":
                this.Count =(int)value;
            break;
            case "volume":
                this.Volume =(long)value;
            break;
            case "dealtype":
                this.DealType =(byte)value;
            break;
            case "tradertype":
                this.TraderType =(byte)value;
            break;
            case "price":
                this.Price =(int)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "amountavg":
                this.AmountAvg =(long)value;
            break;
            case "csecval":
                this.CSecVal =(string)value;
            break;
            case "pc":
                this.pc =(Nullable<int>)value;
            break;
            case "py":
                this.py =(Nullable<int>)value;
            break;
            case "plc":
                this.plc =(Nullable<double>)value;
            break;
            case "plp":
                this.plp =(Nullable<double>)value;
            break;
            case "pf":
                this.pf =(Nullable<int>)value;
            break;
            case "pcc":
                this.pcc =(Nullable<int>)value;
            break;
            case "pcp":
                this.pcp =(Nullable<double>)value;
            break;
            case "tno":
                this.tno =(Nullable<int>)value;
            break;
            case "tvol":
                this.tvol =(Nullable<long>)value;
            break;
            case "tval":
                this.tval =(Nullable<long>)value;
            break;
            case "pmin":
                this.pmin =(Nullable<int>)value;
            break;
            case "pmax":
                this.pmax =(Nullable<int>)value;
            break;
            case "eps":
                this.eps =(Nullable<double>)value;
            break;
            case "pe":
                this.pe =(Nullable<double>)value;
            break;
            case "visitcount":
                this.visitcount =(Nullable<int>)value;
            break;
            case "tmax":
                this.tmax =(Nullable<int>)value;
            break;
            case "tmin":
                this.tmin =(Nullable<int>)value;
            break;
            case "zd1":
                this.zd1 =(Nullable<int>)value;
            break;
            case "pd1":
                this.pd1 =(Nullable<int>)value;
            break;
            case "qd1":
                this.qd1 =(Nullable<long>)value;
            break;
            case "po1":
                this.po1 =(Nullable<int>)value;
            break;
            case "qo1":
                this.qo1 =(Nullable<long>)value;
            break;
            case "zo1":
                this.zo1 =(Nullable<int>)value;
            break;
            case "bvol":
                this.bvol =(Nullable<long>)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
