//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface ICodalMessage{
    
     int TracingNo{
      get;
      set;
      }
    
     string Symbol{
      get;
      set;
      }
    
     string CompanyName{
      get;
      set;
      }
    
     string Title{
      get;
      set;
      }
    
     System.DateTime SentDateTime{
      get;
      set;
      }
    
     System.DateTime PublishDateTime{
      get;
      set;
      }
    
     Nullable<long> InsCode{
      get;
      set;
      }
    
    }// interface
    
    [Table("CodalMessages")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(TracingNo)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class CodalMessage:IEntityBase, ICodalMessage,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual int TracingNo
        {
            get { return _tracingNo; }
            set
            {
                if (_tracingNo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_tracingNo,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'TracingNo' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tracingNo = value;
                    OnPropertyChanged("TracingNo");
                }
            }
        }
        protected int _tracingNo;
    [MaxLength(100)]
    
[Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual string Symbol
        {
            get { return _symbol; }
            set
            {
                if (_symbol != value)
                {
                    ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Symbol"))
                            ChangeTracker.RecordOriginalValue("Symbol", _symbol);
                            
                    _symbol = value;
                    OnPropertyChanged("Symbol");
                }
            }
        }
        protected string _symbol;
    [MaxLength(100)]
    
[Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual string CompanyName
        {
            get { return _companyName; }
            set
            {
                if (_companyName != value)
                {
                    ChangeTracker.RecordOriginalValue("CompanyName", _companyName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CompanyName"))
                            ChangeTracker.RecordOriginalValue("CompanyName", _companyName);
                            
                    _companyName = value;
                    OnPropertyChanged("CompanyName");
                }
            }
        }
        protected string _companyName;
    [MaxLength(1500)]
    
[Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    ChangeTracker.RecordOriginalValue("Title", _title);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Title"))
                            ChangeTracker.RecordOriginalValue("Title", _title);
                            
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        protected string _title;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual System.DateTime SentDateTime
        {
            get { return _sentDateTime; }
            set
            {
                if (_sentDateTime != value)
                {
                    ChangeTracker.RecordOriginalValue("SentDateTime", _sentDateTime);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SentDateTime"))
                            ChangeTracker.RecordOriginalValue("SentDateTime", _sentDateTime);
                            
                    _sentDateTime = value;
                    OnPropertyChanged("SentDateTime");
                }
            }
        }
        protected System.DateTime _sentDateTime;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual System.DateTime PublishDateTime
        {
            get { return _publishDateTime; }
            set
            {
                if (_publishDateTime != value)
                {
                    ChangeTracker.RecordOriginalValue("PublishDateTime", _publishDateTime);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PublishDateTime"))
                            ChangeTracker.RecordOriginalValue("PublishDateTime", _publishDateTime);
                            
                    _publishDateTime = value;
                    OnPropertyChanged("PublishDateTime");
                }
            }
        }
        protected System.DateTime _publishDateTime;
    	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual Nullable<long> InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected Nullable<long> _insCode;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        CodalMessage cloned = new CodalMessage();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._tracingNo=this._tracingNo;
             cloned._symbol=this._symbol;
             cloned._companyName=this._companyName;
             cloned._title=this._title;
             cloned._sentDateTime=this._sentDateTime;
             cloned._publishDateTime=this._publishDateTime;
             cloned._insCode=this._insCode;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._tracingNo.ToString());
    					// TracingNo
    			sb.Append("`");
    
    						sb.Append(this._symbol.ToString());
    					// Symbol
    			sb.Append("`");
    
    						sb.Append(this._companyName.ToString());
    					// CompanyName
    			sb.Append("`");
    
    						sb.Append(this._title.ToString());
    					// Title
    			sb.Append("`");
    
    						sb.Append(this._sentDateTime.ToString());
    					// SentDateTime
    			sb.Append("`");
    
    						sb.Append(this._publishDateTime.ToString());
    					// PublishDateTime
    			sb.Append("`");
    
    						sb.Append(this._insCode?.ToString());
    						// InsCode
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<CodalMessage>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<CodalMessage>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=8;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        CodalMessage casted_other = other as CodalMessage;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.TracingNo,casted_other.TracingNo))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Symbol,casted_other.Symbol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CompanyName,casted_other.CompanyName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Title,casted_other.Title))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SentDateTime,casted_other.SentDateTime))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PublishDateTime,casted_other.PublishDateTime))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "TracingNo", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=false
    	 };
    						// This is none identity primary key	
    						}
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "TracingNo", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=false
        
         };
              yield return new BaseField{Name= "Symbol", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CompanyName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Title", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=1500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "SentDateTime", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PublishDateTime", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vTracingNo=(int)this.GetValue("TracingNo");
        Expression<Func<CodalMessage,bool>> exp = p => p.TracingNo == vTracingNo ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "tracingno":
                retVal = this.TracingNo;
                break;
            case "symbol":
                retVal = this.Symbol;
                break;
            case "companyname":
                retVal = this.CompanyName;
                break;
            case "title":
                retVal = this.Title;
                break;
            case "sentdatetime":
                retVal = this.SentDateTime;
                break;
            case "publishdatetime":
                retVal = this.PublishDateTime;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _tracingNo!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "tracingno":
                this.TracingNo =(int)value;
            break;
            case "symbol":
                this.Symbol =(string)value;
            break;
            case "companyname":
                this.CompanyName =(string)value;
            break;
            case "title":
                this.Title =(string)value;
            break;
            case "sentdatetime":
                this.SentDateTime =(System.DateTime)value;
            break;
            case "publishdatetime":
                this.PublishDateTime =(System.DateTime)value;
            break;
            case "inscode":
                this.InsCode =(Nullable<long>)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
