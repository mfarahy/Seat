//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IAspNetUser{
    
     int Id{
      get;
      set;
      }
    
     string Access{
      get;
      set;
      }
    
     string Email{
      get;
      set;
      }
    
     bool EmailConfirmed{
      get;
      set;
      }
    
     string PasswordHash{
      get;
      set;
      }
    
     string SecurityStamp{
      get;
      set;
      }
    
     string PhoneNumber{
      get;
      set;
      }
    
     bool PhoneNumberConfirmed{
      get;
      set;
      }
    
     bool TwoFactorEnabled{
      get;
      set;
      }
    
     Nullable<System.DateTime> LockoutEndDateUtc{
      get;
      set;
      }
    
     bool LockoutEnabled{
      get;
      set;
      }
    
     int AccessFailedCount{
      get;
      set;
      }
    
     string UserName{
      get;
      set;
      }
    
        TrackableCollection<AspNetRole> AspNetRoles{get;set;}
    }// interface
    
    [Table("AspNetUsers")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(Id)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(AspNetRole))]
    public partial class AspNetUser:IEntityBase, IAspNetUser,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_id,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        protected int _id;
    	[ProtoMember(2)]
        [DataMember]
        public virtual string Access
        {
            get { return _access; }
            set
            {
                if (_access != value)
                {
                    ChangeTracker.RecordOriginalValue("Access", _access);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Access"))
                            ChangeTracker.RecordOriginalValue("Access", _access);
                            
                    _access = value;
                    OnPropertyChanged("Access");
                }
            }
        }
        protected string _access;
    [MaxLength(256)]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    ChangeTracker.RecordOriginalValue("Email", _email);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Email"))
                            ChangeTracker.RecordOriginalValue("Email", _email);
                            
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        protected string _email;
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual bool EmailConfirmed
        {
            get { return _emailConfirmed; }
            set
            {
                if (_emailConfirmed != value)
                {
                    ChangeTracker.RecordOriginalValue("EmailConfirmed", _emailConfirmed);
                        if (!ChangeTracker.OriginalValues.ContainsKey("EmailConfirmed"))
                            ChangeTracker.RecordOriginalValue("EmailConfirmed", _emailConfirmed);
                            
                    _emailConfirmed = value;
                    OnPropertyChanged("EmailConfirmed");
                }
            }
        }
        protected bool _emailConfirmed;
    	[ProtoMember(5)]
        [DataMember]
        public virtual string PasswordHash
        {
            get { return _passwordHash; }
            set
            {
                if (_passwordHash != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordHash", _passwordHash);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PasswordHash"))
                            ChangeTracker.RecordOriginalValue("PasswordHash", _passwordHash);
                            
                    _passwordHash = value;
                    OnPropertyChanged("PasswordHash");
                }
            }
        }
        protected string _passwordHash;
    	[ProtoMember(6)]
        [DataMember]
        public virtual string SecurityStamp
        {
            get { return _securityStamp; }
            set
            {
                if (_securityStamp != value)
                {
                    ChangeTracker.RecordOriginalValue("SecurityStamp", _securityStamp);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SecurityStamp"))
                            ChangeTracker.RecordOriginalValue("SecurityStamp", _securityStamp);
                            
                    _securityStamp = value;
                    OnPropertyChanged("SecurityStamp");
                }
            }
        }
        protected string _securityStamp;
    	[ProtoMember(7)]
        [DataMember]
        public virtual string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PhoneNumber"))
                            ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
                            
                    _phoneNumber = value;
                    OnPropertyChanged("PhoneNumber");
                }
            }
        }
        protected string _phoneNumber;
    [Required]
    	[ProtoMember(8)]
        [DataMember]
        public virtual bool PhoneNumberConfirmed
        {
            get { return _phoneNumberConfirmed; }
            set
            {
                if (_phoneNumberConfirmed != value)
                {
                    ChangeTracker.RecordOriginalValue("PhoneNumberConfirmed", _phoneNumberConfirmed);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PhoneNumberConfirmed"))
                            ChangeTracker.RecordOriginalValue("PhoneNumberConfirmed", _phoneNumberConfirmed);
                            
                    _phoneNumberConfirmed = value;
                    OnPropertyChanged("PhoneNumberConfirmed");
                }
            }
        }
        protected bool _phoneNumberConfirmed;
    [Required]
    	[ProtoMember(9)]
        [DataMember]
        public virtual bool TwoFactorEnabled
        {
            get { return _twoFactorEnabled; }
            set
            {
                if (_twoFactorEnabled != value)
                {
                    ChangeTracker.RecordOriginalValue("TwoFactorEnabled", _twoFactorEnabled);
                        if (!ChangeTracker.OriginalValues.ContainsKey("TwoFactorEnabled"))
                            ChangeTracker.RecordOriginalValue("TwoFactorEnabled", _twoFactorEnabled);
                            
                    _twoFactorEnabled = value;
                    OnPropertyChanged("TwoFactorEnabled");
                }
            }
        }
        protected bool _twoFactorEnabled;
    	[ProtoMember(10)]
        [DataMember]
        public virtual Nullable<System.DateTime> LockoutEndDateUtc
        {
            get { return _lockoutEndDateUtc; }
            set
            {
                if (_lockoutEndDateUtc != value)
                {
                    ChangeTracker.RecordOriginalValue("LockoutEndDateUtc", _lockoutEndDateUtc);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LockoutEndDateUtc"))
                            ChangeTracker.RecordOriginalValue("LockoutEndDateUtc", _lockoutEndDateUtc);
                            
                    _lockoutEndDateUtc = value;
                    OnPropertyChanged("LockoutEndDateUtc");
                }
            }
        }
        protected Nullable<System.DateTime> _lockoutEndDateUtc;
    [Required]
    	[ProtoMember(11)]
        [DataMember]
        public virtual bool LockoutEnabled
        {
            get { return _lockoutEnabled; }
            set
            {
                if (_lockoutEnabled != value)
                {
                    ChangeTracker.RecordOriginalValue("LockoutEnabled", _lockoutEnabled);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LockoutEnabled"))
                            ChangeTracker.RecordOriginalValue("LockoutEnabled", _lockoutEnabled);
                            
                    _lockoutEnabled = value;
                    OnPropertyChanged("LockoutEnabled");
                }
            }
        }
        protected bool _lockoutEnabled;
    [Required]
    	[ProtoMember(12)]
        [DataMember]
        public virtual int AccessFailedCount
        {
            get { return _accessFailedCount; }
            set
            {
                if (_accessFailedCount != value)
                {
                    ChangeTracker.RecordOriginalValue("AccessFailedCount", _accessFailedCount);
                        if (!ChangeTracker.OriginalValues.ContainsKey("AccessFailedCount"))
                            ChangeTracker.RecordOriginalValue("AccessFailedCount", _accessFailedCount);
                            
                    _accessFailedCount = value;
                    OnPropertyChanged("AccessFailedCount");
                }
            }
        }
        protected int _accessFailedCount;
    [MaxLength(256)]
    [Required]
    	[ProtoMember(13)]
        [DataMember]
        public virtual string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("UserName"))
                            ChangeTracker.RecordOriginalValue("UserName", _userName);
                            
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        protected string _userName;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(14,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<AspNetRole> AspNetRoles
        {
            get
            {
                if (_aspNetRoles == null)
                {
                    _aspNetRoles = new TrackableCollection<AspNetRole>();
                    _aspNetRoles.CollectionChanged += FixupAspNetRoles;
                }
                return _aspNetRoles;
            }
            set
            {
                if (!ReferenceEquals(_aspNetRoles, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_aspNetRoles != null)
                    {
                        _aspNetRoles.CollectionChanged -= FixupAspNetRoles;
                    }
                    _aspNetRoles = value;
                    if (_aspNetRoles != null)
                    {
                        _aspNetRoles.CollectionChanged += FixupAspNetRoles;
                    }
                    OnNavigationPropertyChanged("AspNetRoles");
                }
            }
        }
        protected TrackableCollection<AspNetRole> _aspNetRoles;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        AspNetUser cloned = new AspNetUser();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._id=this._id;
             cloned._access=this._access;
             cloned._email=this._email;
             cloned._emailConfirmed=this._emailConfirmed;
             cloned._passwordHash=this._passwordHash;
             cloned._securityStamp=this._securityStamp;
             cloned._phoneNumber=this._phoneNumber;
             cloned._phoneNumberConfirmed=this._phoneNumberConfirmed;
             cloned._twoFactorEnabled=this._twoFactorEnabled;
             cloned._lockoutEndDateUtc=this._lockoutEndDateUtc;
             cloned._lockoutEnabled=this._lockoutEnabled;
             cloned._accessFailedCount=this._accessFailedCount;
             cloned._userName=this._userName;
        	
    if(AspNetRoles!=null){
        cloned.AspNetRoles=new TrackableCollection<AspNetRole>();
        foreach(AspNetRole item in AspNetRoles)
        if (!clonedObjects.ContainsKey(item))
        cloned.AspNetRoles.Add((AspNetRole)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.AspNetRoles.Add((AspNetRole)clonedObjects[item]);
    }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._id.ToString());
    					// Id
    			sb.Append("`");
    
    						sb.Append(this._access?.ToString());
    						// Access
    			sb.Append("`");
    
    						sb.Append(this._email?.ToString());
    						// Email
    			sb.Append("`");
    
    						sb.Append(this._emailConfirmed.ToString());
    					// EmailConfirmed
    			sb.Append("`");
    
    						sb.Append(this._passwordHash?.ToString());
    						// PasswordHash
    			sb.Append("`");
    
    						sb.Append(this._securityStamp?.ToString());
    						// SecurityStamp
    			sb.Append("`");
    
    						sb.Append(this._phoneNumber?.ToString());
    						// PhoneNumber
    			sb.Append("`");
    
    						sb.Append(this._phoneNumberConfirmed.ToString());
    					// PhoneNumberConfirmed
    			sb.Append("`");
    
    						sb.Append(this._twoFactorEnabled.ToString());
    					// TwoFactorEnabled
    			sb.Append("`");
    
    						sb.Append(this._lockoutEndDateUtc?.ToString());
    						// LockoutEndDateUtc
    			sb.Append("`");
    
    						sb.Append(this._lockoutEnabled.ToString());
    					// LockoutEnabled
    			sb.Append("`");
    
    						sb.Append(this._accessFailedCount.ToString());
    					// AccessFailedCount
    			sb.Append("`");
    
    						sb.Append(this._userName.ToString());
    					// UserName
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<AspNetUser>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<AspNetUser>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=15;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_aspNetRoles!=null)
        foreach(var item in _aspNetRoles) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        AspNetUser casted_other = other as AspNetUser;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.Id,casted_other.Id))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Access,casted_other.Access))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Email,casted_other.Email))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.EmailConfirmed,casted_other.EmailConfirmed))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PasswordHash,casted_other.PasswordHash))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SecurityStamp,casted_other.SecurityStamp))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PhoneNumber,casted_other.PhoneNumber))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PhoneNumberConfirmed,casted_other.PhoneNumberConfirmed))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.TwoFactorEnabled,casted_other.TwoFactorEnabled))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LockoutEndDateUtc,casted_other.LockoutEndDateUtc))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LockoutEnabled,casted_other.LockoutEnabled))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.AccessFailedCount,casted_other.AccessFailedCount))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.UserName,casted_other.UserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.AspNetRoles.Count!= casted_other.AspNetRoles.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> AspNetRoles_compared=new List<int>(this.AspNetRoles.Count);
    for(int i=0;i<this.AspNetRoles.Count;++i)
    	if(this.AspNetRoles[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.AspNetRoles.Count;++j){
    			if(AspNetRoles_compared.Contains(j)) continue;			
    			if(this.AspNetRoles[i].Equals(casted_other.AspNetRoles[j],checked_objects)){
    				AspNetRoles_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.AspNetRoles.Count;++j){
    			if(AspNetRoles_compared.Contains(j)) continue;
    			if(casted_other.AspNetRoles[j]==null){
    				AspNetRoles_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(AspNetRoles_compared.Distinct().Count()!=this.AspNetRoles.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "Id", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "Id", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "Access", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Email", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=256
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "EmailConfirmed", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PasswordHash", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "SecurityStamp", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "PhoneNumber", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "PhoneNumberConfirmed", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "TwoFactorEnabled", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "LockoutEndDateUtc", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<System.DateTime>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "LockoutEnabled", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "AccessFailedCount", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "UserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=256
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "AspNetRoles", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<AspNetRole>),TargetType =typeof(AspNetRole)
            ,DependentProperty="",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.Many
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vId=(int)this.GetValue("Id");
        Expression<Func<AspNetUser,bool>> exp = p => p.Id == vId ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "id":
                retVal = this.Id;
                break;
            case "access":
                retVal = this.Access;
                break;
            case "email":
                retVal = this.Email;
                break;
            case "emailconfirmed":
                retVal = this.EmailConfirmed;
                break;
            case "passwordhash":
                retVal = this.PasswordHash;
                break;
            case "securitystamp":
                retVal = this.SecurityStamp;
                break;
            case "phonenumber":
                retVal = this.PhoneNumber;
                break;
            case "phonenumberconfirmed":
                retVal = this.PhoneNumberConfirmed;
                break;
            case "twofactorenabled":
                retVal = this.TwoFactorEnabled;
                break;
            case "lockoutenddateutc":
                retVal = this.LockoutEndDateUtc;
                break;
            case "lockoutenabled":
                retVal = this.LockoutEnabled;
                break;
            case "accessfailedcount":
                retVal = this.AccessFailedCount;
                break;
            case "username":
                retVal = this.UserName;
                break;
        	
            case "aspnetroles":
                   retVal= this.AspNetRoles;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _id!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<AspNetRoles.Count;++i)
                    ((IObjectWithChangeTracker)AspNetRoles[i]).StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<AspNetRoles.Count;++i)
                    ((IObjectWithChangeTracker)AspNetRoles[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "id":
                this.Id =(int)value;
            break;
            case "access":
                this.Access =(string)value;
            break;
            case "email":
                this.Email =(string)value;
            break;
            case "emailconfirmed":
                this.EmailConfirmed =(bool)value;
            break;
            case "passwordhash":
                this.PasswordHash =(string)value;
            break;
            case "securitystamp":
                this.SecurityStamp =(string)value;
            break;
            case "phonenumber":
                this.PhoneNumber =(string)value;
            break;
            case "phonenumberconfirmed":
                this.PhoneNumberConfirmed =(bool)value;
            break;
            case "twofactorenabled":
                this.TwoFactorEnabled =(bool)value;
            break;
            case "lockoutenddateutc":
                this.LockoutEndDateUtc =(Nullable<System.DateTime>)value;
            break;
            case "lockoutenabled":
                this.LockoutEnabled =(bool)value;
            break;
            case "accessfailedcount":
                this.AccessFailedCount =(int)value;
            break;
            case "username":
                this.UserName =(string)value;
            break;
    	
            case "aspnetroles":
             this.AspNetRoles =(TrackableCollection<AspNetRole>) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AspNetRoles.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupAspNetRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AspNetRole item in e.NewItems)
                {
                    if (!item.AspNetUsers.Contains(this))
                    {
                        item.AspNetUsers.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AspNetRoles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AspNetRole item in e.OldItems)
                {
                    if (item.AspNetUsers.Contains(this))
                    {
                        item.AspNetUsers.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AspNetRoles", item);
                    }
                }
            }
        }

        #endregion

    }
}
