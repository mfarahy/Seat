//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface INews{
    
     int NewsPk{
      get;
      set;
      }
    
     string Subject{
      get;
      set;
      }
    
     string Abstract{
      get;
      set;
      }
    
     string Content{
      get;
      set;
      }
    
     int CategoryPk{
      get;
      set;
      }
    
     bool IsDeleted{
      get;
      set;
      }
    
     bool IsArchived{
      get;
      set;
      }
    
     Nullable<System.DateTime> NewsArchiveDate{
      get;
      set;
      }
    
     Nullable<System.DateTime> NewsExpireDate{
      get;
      set;
      }
    
     System.DateTime Audit_CreateDate{
      get;
      set;
      }
    
     string Audit_CreatorUserName{
      get;
      set;
      }
    
     string Audit_CreatorIP{
      get;
      set;
      }
    
     System.DateTime Audit_LastModifyDate{
      get;
      set;
      }
    
     string Audit_LastModifierUserName{
      get;
      set;
      }
    
     string Audit_LastModifierIP{
      get;
      set;
      }
    
     string PageName{
      get;
      set;
      }
    
     byte[] Image{
      get;
      set;
      }
    
     string Metadata{
      get;
      set;
      }
    
     Nullable<int> SortNumber{
      get;
      set;
      }
    
     int ColSpan{
      get;
      set;
      }
    
    NewsCategory NewsCategory{get;set;}
    }// interface
    
    [Table("News")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(NewsPk)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(NewsCategory))]
    public partial class News:IEntityBase, INews,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual int NewsPk
        {
            get { return _newsPk; }
            set
            {
                if (_newsPk != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_newsPk,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'NewsPk' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _newsPk = value;
                    OnPropertyChanged("NewsPk");
                }
            }
        }
        protected int _newsPk;
    [MaxLength(250)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string Subject
        {
            get { return _subject; }
            set
            {
                if (_subject != value)
                {
                    ChangeTracker.RecordOriginalValue("Subject", _subject);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Subject"))
                            ChangeTracker.RecordOriginalValue("Subject", _subject);
                            
                    _subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        protected string _subject;
    [MaxLength(500)]
    [Required]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string Abstract
        {
            get { return _abstract; }
            set
            {
                if (_abstract != value)
                {
                    ChangeTracker.RecordOriginalValue("Abstract", _abstract);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Abstract"))
                            ChangeTracker.RecordOriginalValue("Abstract", _abstract);
                            
                    _abstract = value;
                    OnPropertyChanged("Abstract");
                }
            }
        }
        protected string _abstract;
    	[ProtoMember(4)]
        [DataMember]
        public virtual string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    ChangeTracker.RecordOriginalValue("Content", _content);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Content"))
                            ChangeTracker.RecordOriginalValue("Content", _content);
                            
                    _content = value;
                    OnPropertyChanged("Content");
                }
            }
        }
        protected string _content;
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual int CategoryPk
        {
            get { return _categoryPk; }
            set
            {
                if (_categoryPk != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryPk", _categoryPk);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CategoryPk"))
                            ChangeTracker.RecordOriginalValue("CategoryPk", _categoryPk);
                            
                    if (!IsDeserializing)
                    {
                        if (NewsCategory != null && NewsCategory.CategoryPk != value)
                        {
                            NewsCategory = null;
                        }
                    }
                    _categoryPk = value;
                    OnPropertyChanged("CategoryPk");
                }
            }
        }
        protected int _categoryPk;
    [Required]
    	[ProtoMember(6)]
        [DataMember]
        public virtual bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IsDeleted"))
                            ChangeTracker.RecordOriginalValue("IsDeleted", _isDeleted);
                            
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        protected bool _isDeleted;
    [Required]
    	[ProtoMember(7)]
        [DataMember]
        public virtual bool IsArchived
        {
            get { return _isArchived; }
            set
            {
                if (_isArchived != value)
                {
                    ChangeTracker.RecordOriginalValue("IsArchived", _isArchived);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IsArchived"))
                            ChangeTracker.RecordOriginalValue("IsArchived", _isArchived);
                            
                    _isArchived = value;
                    OnPropertyChanged("IsArchived");
                }
            }
        }
        protected bool _isArchived;
    	[ProtoMember(8)]
        [DataMember]
        public virtual Nullable<System.DateTime> NewsArchiveDate
        {
            get { return _newsArchiveDate; }
            set
            {
                if (_newsArchiveDate != value)
                {
                    ChangeTracker.RecordOriginalValue("NewsArchiveDate", _newsArchiveDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NewsArchiveDate"))
                            ChangeTracker.RecordOriginalValue("NewsArchiveDate", _newsArchiveDate);
                            
                    _newsArchiveDate = value;
                    OnPropertyChanged("NewsArchiveDate");
                }
            }
        }
        protected Nullable<System.DateTime> _newsArchiveDate;
    	[ProtoMember(9)]
        [DataMember]
        public virtual Nullable<System.DateTime> NewsExpireDate
        {
            get { return _newsExpireDate; }
            set
            {
                if (_newsExpireDate != value)
                {
                    ChangeTracker.RecordOriginalValue("NewsExpireDate", _newsExpireDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NewsExpireDate"))
                            ChangeTracker.RecordOriginalValue("NewsExpireDate", _newsExpireDate);
                            
                    _newsExpireDate = value;
                    OnPropertyChanged("NewsExpireDate");
                }
            }
        }
        protected Nullable<System.DateTime> _newsExpireDate;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(10)]
        [DataMember]
        public virtual System.DateTime Audit_CreateDate
        {
            get { return _audit_CreateDate; }
            set
            {
                if (_audit_CreateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreateDate"))
                            ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                            
                    _audit_CreateDate = value;
                    OnPropertyChanged("Audit_CreateDate");
                }
            }
        }
        protected System.DateTime _audit_CreateDate;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(11)]
        [DataMember]
        public virtual string Audit_CreatorUserName
        {
            get { return _audit_CreatorUserName; }
            set
            {
                if (_audit_CreatorUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                            
                    _audit_CreatorUserName = value;
                    OnPropertyChanged("Audit_CreatorUserName");
                }
            }
        }
        protected string _audit_CreatorUserName;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(12)]
        [DataMember]
        public virtual string Audit_CreatorIP
        {
            get { return _audit_CreatorIP; }
            set
            {
                if (_audit_CreatorIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorIP"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                            
                    _audit_CreatorIP = value;
                    OnPropertyChanged("Audit_CreatorIP");
                }
            }
        }
        protected string _audit_CreatorIP;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(13)]
        [DataMember]
        public virtual System.DateTime Audit_LastModifyDate
        {
            get { return _audit_LastModifyDate; }
            set
            {
                if (_audit_LastModifyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifyDate"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                            
                    _audit_LastModifyDate = value;
                    OnPropertyChanged("Audit_LastModifyDate");
                }
            }
        }
        protected System.DateTime _audit_LastModifyDate;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(14)]
        [DataMember]
        public virtual string Audit_LastModifierUserName
        {
            get { return _audit_LastModifierUserName; }
            set
            {
                if (_audit_LastModifierUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                            
                    _audit_LastModifierUserName = value;
                    OnPropertyChanged("Audit_LastModifierUserName");
                }
            }
        }
        protected string _audit_LastModifierUserName;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(15)]
        [DataMember]
        public virtual string Audit_LastModifierIP
        {
            get { return _audit_LastModifierIP; }
            set
            {
                if (_audit_LastModifierIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierIP"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                            
                    _audit_LastModifierIP = value;
                    OnPropertyChanged("Audit_LastModifierIP");
                }
            }
        }
        protected string _audit_LastModifierIP;
    [MaxLength(500)]
    	[ProtoMember(16)]
        [DataMember]
        public virtual string PageName
        {
            get { return _pageName; }
            set
            {
                if (_pageName != value)
                {
                    ChangeTracker.RecordOriginalValue("PageName", _pageName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PageName"))
                            ChangeTracker.RecordOriginalValue("PageName", _pageName);
                            
                    _pageName = value;
                    OnPropertyChanged("PageName");
                }
            }
        }
        protected string _pageName;
    	[ProtoMember(17)]
        [DataMember]
        public virtual byte[] Image
        {
            get { return _image; }
            set
            {
                if (_image != value)
                {
                    ChangeTracker.RecordOriginalValue("Image", _image);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Image"))
                            ChangeTracker.RecordOriginalValue("Image", _image);
                            
                    _image = value;
                    OnPropertyChanged("Image");
                }
            }
        }
        protected byte[] _image;
    [MaxLength(500)]
    	[ProtoMember(18)]
        [DataMember]
        public virtual string Metadata
        {
            get { return _metadata; }
            set
            {
                if (_metadata != value)
                {
                    ChangeTracker.RecordOriginalValue("Metadata", _metadata);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Metadata"))
                            ChangeTracker.RecordOriginalValue("Metadata", _metadata);
                            
                    _metadata = value;
                    OnPropertyChanged("Metadata");
                }
            }
        }
        protected string _metadata;
    	[ProtoMember(19)]
        [DataMember]
        public virtual Nullable<int> SortNumber
        {
            get { return _sortNumber; }
            set
            {
                if (_sortNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("SortNumber", _sortNumber);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SortNumber"))
                            ChangeTracker.RecordOriginalValue("SortNumber", _sortNumber);
                            
                    _sortNumber = value;
                    OnPropertyChanged("SortNumber");
                }
            }
        }
        protected Nullable<int> _sortNumber;
    [Required]
    	[ProtoMember(20)]
        [DataMember]
        public virtual int ColSpan
        {
            get { return _colSpan; }
            set
            {
                if (_colSpan != value)
                {
                    ChangeTracker.RecordOriginalValue("ColSpan", _colSpan);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ColSpan"))
                            ChangeTracker.RecordOriginalValue("ColSpan", _colSpan);
                            
                    _colSpan = value;
                    OnPropertyChanged("ColSpan");
                }
            }
        }
        protected int _colSpan;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(21,AsReference =true)]
    [ForeignKey("CategoryPk")]
       [DataMember]
        public  NewsCategory NewsCategory
        {
            get { return _newsCategory; }
            set
            {
                if (!ReferenceEquals(_newsCategory, value))
                {
                    var previousValue = _newsCategory;
                    _newsCategory = value;
                    FixupNewsCategory(previousValue);
                    OnNavigationPropertyChanged("NewsCategory");
                }
            }
        }
        protected NewsCategory _newsCategory;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        News cloned = new News();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._newsPk=this._newsPk;
             cloned._subject=this._subject;
             cloned._abstract=this._abstract;
             cloned._content=this._content;
             cloned._categoryPk=this._categoryPk;
             cloned._isDeleted=this._isDeleted;
             cloned._isArchived=this._isArchived;
             cloned._newsArchiveDate=this._newsArchiveDate;
             cloned._newsExpireDate=this._newsExpireDate;
             cloned._audit_CreateDate=this._audit_CreateDate;
             cloned._audit_CreatorUserName=this._audit_CreatorUserName;
             cloned._audit_CreatorIP=this._audit_CreatorIP;
             cloned._audit_LastModifyDate=this._audit_LastModifyDate;
             cloned._audit_LastModifierUserName=this._audit_LastModifierUserName;
             cloned._audit_LastModifierIP=this._audit_LastModifierIP;
             cloned._pageName=this._pageName;
             cloned._image=this._image;
             cloned._metadata=this._metadata;
             cloned._sortNumber=this._sortNumber;
             cloned._colSpan=this._colSpan;
        if(NewsCategory!=null) {
    if (!clonedObjects.ContainsKey(NewsCategory))
    cloned.NewsCategory=(NewsCategory)NewsCategory.Clone(clonedObjects,includePrimaryKey);
    else
                    cloned.NewsCategory = (NewsCategory)clonedObjects[NewsCategory];
                }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._newsPk.ToString());
    					// NewsPk
    			sb.Append("`");
    
    						sb.Append(this._subject.ToString());
    					// Subject
    			sb.Append("`");
    
    						sb.Append(this._abstract.ToString());
    					// Abstract
    			sb.Append("`");
    
    						sb.Append(this._content?.ToString());
    						// Content
    			sb.Append("`");
    
    						sb.Append(this._categoryPk.ToString());
    					// CategoryPk
    			sb.Append("`");
    
    						sb.Append(this._isDeleted.ToString());
    					// IsDeleted
    			sb.Append("`");
    
    						sb.Append(this._isArchived.ToString());
    					// IsArchived
    			sb.Append("`");
    
    						sb.Append(this._newsArchiveDate?.ToString());
    						// NewsArchiveDate
    			sb.Append("`");
    
    						sb.Append(this._newsExpireDate?.ToString());
    						// NewsExpireDate
    			sb.Append("`");
    
    						sb.Append(this._audit_CreateDate.ToString());
    					// Audit_CreateDate
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorUserName.ToString());
    					// Audit_CreatorUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorIP.ToString());
    					// Audit_CreatorIP
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifyDate.ToString());
    					// Audit_LastModifyDate
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierUserName.ToString());
    					// Audit_LastModifierUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierIP.ToString());
    					// Audit_LastModifierIP
    			sb.Append("`");
    
    						sb.Append(this._pageName?.ToString());
    						// PageName
    			sb.Append("`");
    
    						sb.Append(this._image?.ToString());
    						// Image
    			sb.Append("`");
    
    						sb.Append(this._metadata?.ToString());
    						// Metadata
    			sb.Append("`");
    
    						sb.Append(this._sortNumber?.ToString());
    						// SortNumber
    			sb.Append("`");
    
    						sb.Append(this._colSpan.ToString());
    					// ColSpan
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<News>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<News>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=22;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
           if(_newsCategory!=null && !reseted_objects.Contains(_newsCategory)) _newsCategory.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        News casted_other = other as News;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.NewsPk,casted_other.NewsPk))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Subject,casted_other.Subject))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Abstract,casted_other.Abstract))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Content,casted_other.Content))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CategoryPk,casted_other.CategoryPk))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IsDeleted,casted_other.IsDeleted))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IsArchived,casted_other.IsArchived))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NewsArchiveDate,casted_other.NewsArchiveDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NewsExpireDate,casted_other.NewsExpireDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreateDate,casted_other.Audit_CreateDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorUserName,casted_other.Audit_CreatorUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorIP,casted_other.Audit_CreatorIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifyDate,casted_other.Audit_LastModifyDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierUserName,casted_other.Audit_LastModifierUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierIP,casted_other.Audit_LastModifierIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PageName,casted_other.PageName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Image,casted_other.Image))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Metadata,casted_other.Metadata))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SortNumber,casted_other.SortNumber))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ColSpan,casted_other.ColSpan))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    if(this.NewsCategory!= null) {
    if(!this.NewsCategory.Equals(casted_other.NewsCategory,checked_objects))
    {
    		checked_objects.Remove(this);
    		return false;
    	}}
    else
    if(casted_other.NewsCategory!= null) 
    {
    		checked_objects.Remove(this);
    		return false;
    	}
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "NewsPk", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "NewsPk", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "Subject", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=250
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Abstract", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Content", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CategoryPk", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "IsDeleted", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "IsArchived", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "NewsArchiveDate", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<System.DateTime>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "NewsExpireDate", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<System.DateTime>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_CreateDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_CreatorUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_CreatorIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_LastModifyDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_LastModifierUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_LastModifierIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "PageName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Image", Kind = FieldKinds.Primitive,PropertyType =typeof(byte[]) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Metadata", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "SortNumber", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<int>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ColSpan", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "NewsCategory", Kind = FieldKinds.Navigational,PropertyType =typeof(NewsCategory),TargetType =typeof(NewsCategory)
            ,DependentProperty="CategoryPk",
    IsCollection=false
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.One
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vNewsPk=(int)this.GetValue("NewsPk");
        Expression<Func<News,bool>> exp = p => p.NewsPk == vNewsPk ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "newspk":
                retVal = this.NewsPk;
                break;
            case "subject":
                retVal = this.Subject;
                break;
            case "abstract":
                retVal = this.Abstract;
                break;
            case "content":
                retVal = this.Content;
                break;
            case "categorypk":
                retVal = this.CategoryPk;
                break;
            case "isdeleted":
                retVal = this.IsDeleted;
                break;
            case "isarchived":
                retVal = this.IsArchived;
                break;
            case "newsarchivedate":
                retVal = this.NewsArchiveDate;
                break;
            case "newsexpiredate":
                retVal = this.NewsExpireDate;
                break;
            case "audit_createdate":
                retVal = this.Audit_CreateDate;
                break;
            case "audit_creatorusername":
                retVal = this.Audit_CreatorUserName;
                break;
            case "audit_creatorip":
                retVal = this.Audit_CreatorIP;
                break;
            case "audit_lastmodifydate":
                retVal = this.Audit_LastModifyDate;
                break;
            case "audit_lastmodifierusername":
                retVal = this.Audit_LastModifierUserName;
                break;
            case "audit_lastmodifierip":
                retVal = this.Audit_LastModifierIP;
                break;
            case "pagename":
                retVal = this.PageName;
                break;
            case "image":
                retVal = this.Image;
                break;
            case "metadata":
                retVal = this.Metadata;
                break;
            case "sortnumber":
                retVal = this.SortNumber;
                break;
            case "colspan":
                retVal = this.ColSpan;
                break;
        	
            case "newscategory":
                   retVal= this.NewsCategory;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _newsPk!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                				if(NewsCategory!=null) NewsCategory.StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "newspk":
                this.NewsPk =(int)value;
            break;
            case "subject":
                this.Subject =(string)value;
            break;
            case "abstract":
                this.Abstract =(string)value;
            break;
            case "content":
                this.Content =(string)value;
            break;
            case "categorypk":
                this.CategoryPk =(int)value;
            break;
            case "isdeleted":
                this.IsDeleted =(bool)value;
            break;
            case "isarchived":
                this.IsArchived =(bool)value;
            break;
            case "newsarchivedate":
                this.NewsArchiveDate =(Nullable<System.DateTime>)value;
            break;
            case "newsexpiredate":
                this.NewsExpireDate =(Nullable<System.DateTime>)value;
            break;
            case "audit_createdate":
                this.Audit_CreateDate =(System.DateTime)value;
            break;
            case "audit_creatorusername":
                this.Audit_CreatorUserName =(string)value;
            break;
            case "audit_creatorip":
                this.Audit_CreatorIP =(string)value;
            break;
            case "audit_lastmodifydate":
                this.Audit_LastModifyDate =(System.DateTime)value;
            break;
            case "audit_lastmodifierusername":
                this.Audit_LastModifierUserName =(string)value;
            break;
            case "audit_lastmodifierip":
                this.Audit_LastModifierIP =(string)value;
            break;
            case "pagename":
                this.PageName =(string)value;
            break;
            case "image":
                this.Image =(byte[])value;
            break;
            case "metadata":
                this.Metadata =(string)value;
            break;
            case "sortnumber":
                this.SortNumber =(Nullable<int>)value;
            break;
            case "colspan":
                this.ColSpan =(int)value;
            break;
    	
            case "newscategory":
             this.NewsCategory =( NewsCategory) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NewsCategory = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNewsCategory(NewsCategory previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.News.Contains(this))
            {
                previousValue.News.Remove(this);
            }
    
            if (NewsCategory != null)
            {
                if (!NewsCategory.News.Contains(this))
                {
                    NewsCategory.News.Add(this);
                }
    
                CategoryPk = NewsCategory.CategoryPk;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NewsCategory")
                    && (ChangeTracker.OriginalValues["NewsCategory"] == NewsCategory))
                {
                    ChangeTracker.OriginalValues.Remove("NewsCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NewsCategory", previousValue);
                }
                if (NewsCategory != null && !NewsCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    NewsCategory.StartTracking();
                }
            }
        }

        #endregion

    }
}
