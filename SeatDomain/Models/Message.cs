//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IMessage{
    
     int MessagePK{
      get;
      set;
      }
    
     string Subject{
      get;
      set;
      }
    
     System.DateTime MessageDt{
      get;
      set;
      }
    
     string Description{
      get;
      set;
      }
    
     Nullable<long> InsCode{
      get;
      set;
      }
    
        TrackableCollection<Instrument> Instruments{get;set;}
    }// interface
    
    [Table("Messages")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(MessagePK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
[KnownType(typeof(Instrument))]
    
public partial class Message:IEntityBase, IMessage,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual int MessagePK
        {
            get { return _messagePK; }
            set
            {
                if (_messagePK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_messagePK,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'MessagePK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messagePK = value;
                    OnPropertyChanged("MessagePK");
                }
            }
        }
        protected int _messagePK;
    [MaxLength(1000)]
    
[Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual string Subject
        {
            get { return _subject; }
            set
            {
                if (_subject != value)
                {
                    ChangeTracker.RecordOriginalValue("Subject", _subject);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Subject"))
                            ChangeTracker.RecordOriginalValue("Subject", _subject);
                            
                    _subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        protected string _subject;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual System.DateTime MessageDt
        {
            get { return _messageDt; }
            set
            {
                if (_messageDt != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageDt", _messageDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MessageDt"))
                            ChangeTracker.RecordOriginalValue("MessageDt", _messageDt);
                            
                    _messageDt = value;
                    OnPropertyChanged("MessageDt");
                }
            }
        }
        protected System.DateTime _messageDt;
    [MaxLength(3000)]
    
[Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Description"))
                            ChangeTracker.RecordOriginalValue("Description", _description);
                            
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        protected string _description;
    	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual Nullable<long> InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected Nullable<long> _insCode;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(6,AsReference =true)]
    
   [DataMember]
    
    public  virtual  TrackableCollection<Instrument> Instruments
        {
            get
            {
                if (_instruments == null)
                {
                    _instruments = new TrackableCollection<Instrument>();
                    _instruments.CollectionChanged += FixupInstruments;
                }
                return _instruments;
            }
            set
            {
                if (!ReferenceEquals(_instruments, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_instruments != null)
                    {
                        _instruments.CollectionChanged -= FixupInstruments;
                    }
                    _instruments = value;
                    if (_instruments != null)
                    {
                        _instruments.CollectionChanged += FixupInstruments;
                    }
                    OnNavigationPropertyChanged("Instruments");
                }
            }
        }
        protected TrackableCollection<Instrument> _instruments;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        Message cloned = new Message();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._messagePK=this._messagePK;
             cloned._subject=this._subject;
             cloned._messageDt=this._messageDt;
             cloned._description=this._description;
             cloned._insCode=this._insCode;
        	
    if(Instruments!=null){
        cloned.Instruments=new TrackableCollection<Instrument>();
        foreach(Instrument item in Instruments)
        if (!clonedObjects.ContainsKey(item))
        cloned.Instruments.Add((Instrument)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.Instruments.Add((Instrument)clonedObjects[item]);
    }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._messagePK.ToString());
    					// MessagePK
    			sb.Append("`");
    
    						sb.Append(this._subject.ToString());
    					// Subject
    			sb.Append("`");
    
    						sb.Append(this._messageDt.ToString());
    					// MessageDt
    			sb.Append("`");
    
    						sb.Append(this._description.ToString());
    					// Description
    			sb.Append("`");
    
    						sb.Append(this._insCode?.ToString());
    						// InsCode
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<Message>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<Message>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=7;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_instruments!=null)
        foreach(var item in _instruments) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        Message casted_other = other as Message;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.MessagePK,casted_other.MessagePK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Subject,casted_other.Subject))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MessageDt,casted_other.MessageDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Description,casted_other.Description))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.Instruments.Count!= casted_other.Instruments.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> Instruments_compared=new List<int>(this.Instruments.Count);
    for(int i=0;i<this.Instruments.Count;++i)
    	if(this.Instruments[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.Instruments.Count;++j){
    			if(Instruments_compared.Contains(j)) continue;			
    			if(this.Instruments[i].Equals(casted_other.Instruments[j],checked_objects)){
    				Instruments_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.Instruments.Count;++j){
    			if(Instruments_compared.Contains(j)) continue;
    			if(casted_other.Instruments[j]==null){
    				Instruments_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(Instruments_compared.Distinct().Count()!=this.Instruments.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "MessagePK", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "MessagePK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "Subject", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=1000
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "MessageDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Description", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=3000
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<long>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "Instruments", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<Instrument>),TargetType =typeof(Instrument)
            ,DependentProperty="",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.Many
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vMessagePK=(int)this.GetValue("MessagePK");
        Expression<Func<Message,bool>> exp = p => p.MessagePK == vMessagePK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "messagepk":
                retVal = this.MessagePK;
                break;
            case "subject":
                retVal = this.Subject;
                break;
            case "messagedt":
                retVal = this.MessageDt;
                break;
            case "description":
                retVal = this.Description;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
        	
            case "instruments":
                   retVal= this.Instruments;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _messagePK!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<Instruments.Count;++i)
                    ((IObjectWithChangeTracker)Instruments[i]).StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<Instruments.Count;++i)
                    ((IObjectWithChangeTracker)Instruments[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "messagepk":
                this.MessagePK =(int)value;
            break;
            case "subject":
                this.Subject =(string)value;
            break;
            case "messagedt":
                this.MessageDt =(System.DateTime)value;
            break;
            case "description":
                this.Description =(string)value;
            break;
            case "inscode":
                this.InsCode =(Nullable<long>)value;
            break;
    	
            case "instruments":
             this.Instruments =(TrackableCollection<Instrument>) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Instruments.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInstruments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Instrument item in e.NewItems)
                {
                    if (!item.Messages.Contains(this))
                    {
                        item.Messages.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Instruments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Instrument item in e.OldItems)
                {
                    if (item.Messages.Contains(this))
                    {
                        item.Messages.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Instruments", item);
                    }
                }
            }
        }

        #endregion

    }
}
