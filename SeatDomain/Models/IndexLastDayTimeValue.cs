//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IIndexLastDayTimeValue{
    
     int IndexLastDayTimeValuePK{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     System.DateTime Dt{
      get;
      set;
      }
    
     double Value{
      get;
      set;
      }
    
     Nullable<double> ChangeValue{
      get;
      set;
      }
    
     Nullable<double> ChangePercent{
      get;
      set;
      }
    
    Instrument Instrument{get;set;}
    }// interface
    
    [Table("IndexLastDayTimeValues")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(IndexLastDayTimeValuePK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
[KnownType(typeof(Instrument))]
    
public partial class IndexLastDayTimeValue:IEntityBase, IIndexLastDayTimeValue,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual int IndexLastDayTimeValuePK
        {
            get { return _indexLastDayTimeValuePK; }
            set
            {
                if (_indexLastDayTimeValuePK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_indexLastDayTimeValuePK,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'IndexLastDayTimeValuePK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _indexLastDayTimeValuePK = value;
                    OnPropertyChanged("IndexLastDayTimeValuePK");
                }
            }
        }
        protected int _indexLastDayTimeValuePK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    if (!IsDeserializing)
                    {
                        if (Instrument != null && Instrument.InsCode != value)
                        {
                            Instrument = null;
                        }
                    }
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual System.DateTime Dt
        {
            get { return _dt; }
            set
            {
                if (_dt != value)
                {
                    ChangeTracker.RecordOriginalValue("Dt", _dt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Dt"))
                            ChangeTracker.RecordOriginalValue("Dt", _dt);
                            
                    _dt = value;
                    OnPropertyChanged("Dt");
                }
            }
        }
        protected System.DateTime _dt;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual double Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    ChangeTracker.RecordOriginalValue("Value", _value);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Value"))
                            ChangeTracker.RecordOriginalValue("Value", _value);
                            
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        protected double _value;
    	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual Nullable<double> ChangeValue
        {
            get { return _changeValue; }
            set
            {
                if (_changeValue != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangeValue", _changeValue);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ChangeValue"))
                            ChangeTracker.RecordOriginalValue("ChangeValue", _changeValue);
                            
                    _changeValue = value;
                    OnPropertyChanged("ChangeValue");
                }
            }
        }
        protected Nullable<double> _changeValue;
    	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual Nullable<double> ChangePercent
        {
            get { return _changePercent; }
            set
            {
                if (_changePercent != value)
                {
                    ChangeTracker.RecordOriginalValue("ChangePercent", _changePercent);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ChangePercent"))
                            ChangeTracker.RecordOriginalValue("ChangePercent", _changePercent);
                            
                    _changePercent = value;
                    OnPropertyChanged("ChangePercent");
                }
            }
        }
        protected Nullable<double> _changePercent;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(7,AsReference =true)]
    
[ForeignKey("InsCode")]
    
   [DataMember]
    
    public  Instrument Instrument
        {
            get { return _instrument; }
            set
            {
                if (!ReferenceEquals(_instrument, value))
                {
                    var previousValue = _instrument;
                    _instrument = value;
                    FixupInstrument(previousValue);
                    OnNavigationPropertyChanged("Instrument");
                }
            }
        }
        protected Instrument _instrument;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        IndexLastDayTimeValue cloned = new IndexLastDayTimeValue();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._indexLastDayTimeValuePK=this._indexLastDayTimeValuePK;
             cloned._insCode=this._insCode;
             cloned._dt=this._dt;
             cloned._value=this._value;
             cloned._changeValue=this._changeValue;
             cloned._changePercent=this._changePercent;
        if(Instrument!=null) {
    if (!clonedObjects.ContainsKey(Instrument))
    cloned.Instrument=(Instrument)Instrument.Clone(clonedObjects,includePrimaryKey);
    else
                    cloned.Instrument = (Instrument)clonedObjects[Instrument];
                }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._indexLastDayTimeValuePK.ToString());
    					// IndexLastDayTimeValuePK
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._dt.ToString());
    					// Dt
    			sb.Append("`");
    
    						sb.Append(this._value.ToString());
    					// Value
    			sb.Append("`");
    
    						sb.Append(this._changeValue?.ToString());
    						// ChangeValue
    			sb.Append("`");
    
    						sb.Append(this._changePercent?.ToString());
    						// ChangePercent
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<IndexLastDayTimeValue>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<IndexLastDayTimeValue>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=8;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
           if(_instrument!=null && !reseted_objects.Contains(_instrument)) _instrument.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        IndexLastDayTimeValue casted_other = other as IndexLastDayTimeValue;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.IndexLastDayTimeValuePK,casted_other.IndexLastDayTimeValuePK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Dt,casted_other.Dt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Value,casted_other.Value))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ChangeValue,casted_other.ChangeValue))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ChangePercent,casted_other.ChangePercent))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    if(this.Instrument!= null) {
    if(!this.Instrument.Equals(casted_other.Instrument,checked_objects))
    {
    		checked_objects.Remove(this);
    		return false;
    	}}
    else
    if(casted_other.Instrument!= null) 
    {
    		checked_objects.Remove(this);
    		return false;
    	}
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "IndexLastDayTimeValuePK", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "IndexLastDayTimeValuePK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Dt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Value", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ChangeValue", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ChangePercent", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "Instrument", Kind = FieldKinds.Navigational,PropertyType =typeof(Instrument),TargetType =typeof(Instrument)
            ,DependentProperty="InsCode",
    IsCollection=false
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.One
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vIndexLastDayTimeValuePK=(int)this.GetValue("IndexLastDayTimeValuePK");
        Expression<Func<IndexLastDayTimeValue,bool>> exp = p => p.IndexLastDayTimeValuePK == vIndexLastDayTimeValuePK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "indexlastdaytimevaluepk":
                retVal = this.IndexLastDayTimeValuePK;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "dt":
                retVal = this.Dt;
                break;
            case "value":
                retVal = this.Value;
                break;
            case "changevalue":
                retVal = this.ChangeValue;
                break;
            case "changepercent":
                retVal = this.ChangePercent;
                break;
        	
            case "instrument":
                   retVal= this.Instrument;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _indexLastDayTimeValuePK!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                				if(Instrument!=null) Instrument.StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "indexlastdaytimevaluepk":
                this.IndexLastDayTimeValuePK =(int)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "dt":
                this.Dt =(System.DateTime)value;
            break;
            case "value":
                this.Value =(double)value;
            break;
            case "changevalue":
                this.ChangeValue =(Nullable<double>)value;
            break;
            case "changepercent":
                this.ChangePercent =(Nullable<double>)value;
            break;
    	
            case "instrument":
             this.Instrument =( Instrument) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Instrument = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupInstrument(Instrument previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.IndexValues.Contains(this))
            {
                previousValue.IndexValues.Remove(this);
            }
    
            if (Instrument != null)
            {
                if (!Instrument.IndexValues.Contains(this))
                {
                    Instrument.IndexValues.Add(this);
                }
    
                InsCode = Instrument.InsCode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Instrument")
                    && (ChangeTracker.OriginalValues["Instrument"] == Instrument))
                {
                    ChangeTracker.OriginalValues.Remove("Instrument");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Instrument", previousValue);
                }
                if (Instrument != null && !Instrument.ChangeTracker.ChangeTrackingEnabled)
                {
                    Instrument.StartTracking();
                }
            }
        }

        #endregion

    }
}
