//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface INewsCategory{
    
     int CategoryPk{
      get;
      set;
      }
    
     string CategoryTitle{
      get;
      set;
      }
    
     string Audit_CreatorUserName{
      get;
      set;
      }
    
     System.DateTime Audit_CreateDate{
      get;
      set;
      }
    
     string Audit_CreatorIP{
      get;
      set;
      }
    
     System.DateTime Audit_LastModifyDate{
      get;
      set;
      }
    
     string Audit_LastModifierUserName{
      get;
      set;
      }
    
     string Audit_LastModifierIP{
      get;
      set;
      }
    
     Nullable<bool> IsListable{
      get;
      set;
      }
    
     string Code{
      get;
      set;
      }
    
        TrackableCollection<News> News{get;set;}
    }// interface
    
    [Table("NewsCategories")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(CategoryPk)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(News))]
    public partial class NewsCategory:IEntityBase, INewsCategory,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual int CategoryPk
        {
            get { return _categoryPk; }
            set
            {
                if (_categoryPk != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_categoryPk,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'CategoryPk' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _categoryPk = value;
                    OnPropertyChanged("CategoryPk");
                }
            }
        }
        protected int _categoryPk;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string CategoryTitle
        {
            get { return _categoryTitle; }
            set
            {
                if (_categoryTitle != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryTitle", _categoryTitle);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CategoryTitle"))
                            ChangeTracker.RecordOriginalValue("CategoryTitle", _categoryTitle);
                            
                    _categoryTitle = value;
                    OnPropertyChanged("CategoryTitle");
                }
            }
        }
        protected string _categoryTitle;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string Audit_CreatorUserName
        {
            get { return _audit_CreatorUserName; }
            set
            {
                if (_audit_CreatorUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                            
                    _audit_CreatorUserName = value;
                    OnPropertyChanged("Audit_CreatorUserName");
                }
            }
        }
        protected string _audit_CreatorUserName;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(4)]
        [DataMember]
        public virtual System.DateTime Audit_CreateDate
        {
            get { return _audit_CreateDate; }
            set
            {
                if (_audit_CreateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreateDate"))
                            ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                            
                    _audit_CreateDate = value;
                    OnPropertyChanged("Audit_CreateDate");
                }
            }
        }
        protected System.DateTime _audit_CreateDate;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string Audit_CreatorIP
        {
            get { return _audit_CreatorIP; }
            set
            {
                if (_audit_CreatorIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorIP"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                            
                    _audit_CreatorIP = value;
                    OnPropertyChanged("Audit_CreatorIP");
                }
            }
        }
        protected string _audit_CreatorIP;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(6)]
        [DataMember]
        public virtual System.DateTime Audit_LastModifyDate
        {
            get { return _audit_LastModifyDate; }
            set
            {
                if (_audit_LastModifyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifyDate"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                            
                    _audit_LastModifyDate = value;
                    OnPropertyChanged("Audit_LastModifyDate");
                }
            }
        }
        protected System.DateTime _audit_LastModifyDate;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(7)]
        [DataMember]
        public virtual string Audit_LastModifierUserName
        {
            get { return _audit_LastModifierUserName; }
            set
            {
                if (_audit_LastModifierUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                            
                    _audit_LastModifierUserName = value;
                    OnPropertyChanged("Audit_LastModifierUserName");
                }
            }
        }
        protected string _audit_LastModifierUserName;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string Audit_LastModifierIP
        {
            get { return _audit_LastModifierIP; }
            set
            {
                if (_audit_LastModifierIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierIP"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                            
                    _audit_LastModifierIP = value;
                    OnPropertyChanged("Audit_LastModifierIP");
                }
            }
        }
        protected string _audit_LastModifierIP;
    	[ProtoMember(9)]
        [DataMember]
        public virtual Nullable<bool> IsListable
        {
            get { return _isListable; }
            set
            {
                if (_isListable != value)
                {
                    ChangeTracker.RecordOriginalValue("IsListable", _isListable);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IsListable"))
                            ChangeTracker.RecordOriginalValue("IsListable", _isListable);
                            
                    _isListable = value;
                    OnPropertyChanged("IsListable");
                }
            }
        }
        protected Nullable<bool> _isListable;
    [MaxLength(50)]
    	[ProtoMember(10)]
        [DataMember]
        public virtual string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    ChangeTracker.RecordOriginalValue("Code", _code);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Code"))
                            ChangeTracker.RecordOriginalValue("Code", _code);
                            
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        protected string _code;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(11,AsReference =true)]
       [DataMember]
        public  virtual  TrackableCollection<News> News
        {
            get
            {
                if (_news == null)
                {
                    _news = new TrackableCollection<News>();
                    _news.CollectionChanged += FixupNews;
                }
                return _news;
            }
            set
            {
                if (!ReferenceEquals(_news, value))
                {
                  //  if (ChangeTracker.ChangeTrackingEnabled)
                 //   {
                 //       throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                 //   }
                    if (_news != null)
                    {
                        _news.CollectionChanged -= FixupNews;
                    }
                    _news = value;
                    if (_news != null)
                    {
                        _news.CollectionChanged += FixupNews;
                    }
                    OnNavigationPropertyChanged("News");
                }
            }
        }
        protected TrackableCollection<News> _news;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        NewsCategory cloned = new NewsCategory();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._categoryPk=this._categoryPk;
             cloned._categoryTitle=this._categoryTitle;
             cloned._audit_CreatorUserName=this._audit_CreatorUserName;
             cloned._audit_CreateDate=this._audit_CreateDate;
             cloned._audit_CreatorIP=this._audit_CreatorIP;
             cloned._audit_LastModifyDate=this._audit_LastModifyDate;
             cloned._audit_LastModifierUserName=this._audit_LastModifierUserName;
             cloned._audit_LastModifierIP=this._audit_LastModifierIP;
             cloned._isListable=this._isListable;
             cloned._code=this._code;
        	
    if(News!=null){
        cloned.News=new TrackableCollection<News>();
        foreach(News item in News)
        if (!clonedObjects.ContainsKey(item))
        cloned.News.Add((News)item.Clone(clonedObjects,includePrimaryKey));
        else
        cloned.News.Add((News)clonedObjects[item]);
    }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._categoryPk.ToString());
    					// CategoryPk
    			sb.Append("`");
    
    						sb.Append(this._categoryTitle.ToString());
    					// CategoryTitle
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorUserName.ToString());
    					// Audit_CreatorUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_CreateDate.ToString());
    					// Audit_CreateDate
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorIP.ToString());
    					// Audit_CreatorIP
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifyDate.ToString());
    					// Audit_LastModifyDate
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierUserName.ToString());
    					// Audit_LastModifierUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierIP.ToString());
    					// Audit_LastModifierIP
    			sb.Append("`");
    
    						sb.Append(this._isListable?.ToString());
    						// IsListable
    			sb.Append("`");
    
    						sb.Append(this._code?.ToString());
    						// Code
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<NewsCategory>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<NewsCategory>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=12;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       	
        if(_news!=null)
        foreach(var item in _news) if(!reseted_objects.Contains(item)) item.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        NewsCategory casted_other = other as NewsCategory;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.CategoryPk,casted_other.CategoryPk))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CategoryTitle,casted_other.CategoryTitle))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorUserName,casted_other.Audit_CreatorUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreateDate,casted_other.Audit_CreateDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorIP,casted_other.Audit_CreatorIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifyDate,casted_other.Audit_LastModifyDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierUserName,casted_other.Audit_LastModifierUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierIP,casted_other.Audit_LastModifierIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IsListable,casted_other.IsListable))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Code,casted_other.Code))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    	
    if(this.News.Count!= casted_other.News.Count) {
    		checked_objects.Remove(this);
    		return false;
    	}
    List<int> News_compared=new List<int>(this.News.Count);
    for(int i=0;i<this.News.Count;++i)
    	if(this.News[i]!= null) {
    		bool found=false;
    		for(int j=0;j<this.News.Count;++j){
    			if(News_compared.Contains(j)) continue;			
    			if(this.News[i].Equals(casted_other.News[j],checked_objects)){
    				News_compared.Add(j);
    				found=true;
    				break;
    			}
    		}
    		if(!found){
    		checked_objects.Remove(this);
    		return false;
    	}
    	}
    	else{
    		for(int j=0;j<this.News.Count;++j){
    			if(News_compared.Contains(j)) continue;
    			if(casted_other.News[j]==null){
    				News_compared.Add(j);
    				break;
    			}
    		}
    	}
    
    if(News_compared.Distinct().Count()!=this.News.Count)
     {
    		checked_objects.Remove(this);
    		return false;
    	}
    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "CategoryPk", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "CategoryPk", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "CategoryTitle", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_CreatorUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_CreateDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_CreatorIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_LastModifyDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_LastModifierUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_LastModifierIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "IsListable", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<bool>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Code", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "News", Kind = FieldKinds.Navigational,PropertyType =typeof(Collection<News>),TargetType =typeof(News)
            ,DependentProperty="CategoryPk",
    IsCollection=true
    ,FromEndMultiplicity = Multiplicities.One
    ,ToEndMultiplicity = Multiplicities.Many
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vCategoryPk=(int)this.GetValue("CategoryPk");
        Expression<Func<NewsCategory,bool>> exp = p => p.CategoryPk == vCategoryPk ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "categorypk":
                retVal = this.CategoryPk;
                break;
            case "categorytitle":
                retVal = this.CategoryTitle;
                break;
            case "audit_creatorusername":
                retVal = this.Audit_CreatorUserName;
                break;
            case "audit_createdate":
                retVal = this.Audit_CreateDate;
                break;
            case "audit_creatorip":
                retVal = this.Audit_CreatorIP;
                break;
            case "audit_lastmodifydate":
                retVal = this.Audit_LastModifyDate;
                break;
            case "audit_lastmodifierusername":
                retVal = this.Audit_LastModifierUserName;
                break;
            case "audit_lastmodifierip":
                retVal = this.Audit_LastModifierIP;
                break;
            case "islistable":
                retVal = this.IsListable;
                break;
            case "code":
                retVal = this.Code;
                break;
        	
            case "news":
                   retVal= this.News;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _categoryPk!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                            for(int i=0;i<News.Count;++i)
                    ((IObjectWithChangeTracker)News[i]).StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                           for(int i=0;i<News.Count;++i)
                    ((IObjectWithChangeTracker)News[i]).StopTracking();
                            }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "categorypk":
                this.CategoryPk =(int)value;
            break;
            case "categorytitle":
                this.CategoryTitle =(string)value;
            break;
            case "audit_creatorusername":
                this.Audit_CreatorUserName =(string)value;
            break;
            case "audit_createdate":
                this.Audit_CreateDate =(System.DateTime)value;
            break;
            case "audit_creatorip":
                this.Audit_CreatorIP =(string)value;
            break;
            case "audit_lastmodifydate":
                this.Audit_LastModifyDate =(System.DateTime)value;
            break;
            case "audit_lastmodifierusername":
                this.Audit_LastModifierUserName =(string)value;
            break;
            case "audit_lastmodifierip":
                this.Audit_LastModifierIP =(string)value;
            break;
            case "islistable":
                this.IsListable =(Nullable<bool>)value;
            break;
            case "code":
                this.Code =(string)value;
            break;
    	
            case "news":
             this.News =(TrackableCollection<News>) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            News.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (News item in e.NewItems)
                {
                    item.NewsCategory = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("News", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (News item in e.OldItems)
                {
                    if (ReferenceEquals(item.NewsCategory, this))
                    {
                        item.NewsCategory = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
                    }
                }
            }
        }

        #endregion

    }
}
