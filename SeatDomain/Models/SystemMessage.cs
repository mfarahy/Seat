//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface ISystemMessage{
    
     int MessagePK{
      get;
      set;
      }
    
     string Code{
      get;
      set;
      }
    
     string Subject{
      get;
      set;
      }
    
     string Text{
      get;
      set;
      }
    
     string Media{
      get;
      set;
      }
    
     string Culture{
      get;
      set;
      }
    
     bool IsEnable{
      get;
      set;
      }
    
     string Audit_CreatorUserName{
      get;
      set;
      }
    
     string Audit_CreatorIP{
      get;
      set;
      }
    
     System.DateTime Audit_CreateDate{
      get;
      set;
      }
    
     System.DateTime Audit_LastModifyDate{
      get;
      set;
      }
    
     string Audit_LastModifierUserName{
      get;
      set;
      }
    
     string Audit_LastModifierIP{
      get;
      set;
      }
    
    }// interface
    
    [Table("SystemMessages")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(MessagePK)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class SystemMessage:IEntityBase, ISystemMessage,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual int MessagePK
        {
            get { return _messagePK; }
            set
            {
                if (_messagePK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_messagePK,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'MessagePK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messagePK = value;
                    OnPropertyChanged("MessagePK");
                }
            }
        }
        protected int _messagePK;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    ChangeTracker.RecordOriginalValue("Code", _code);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Code"))
                            ChangeTracker.RecordOriginalValue("Code", _code);
                            
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        protected string _code;
    [MaxLength(2000)]
    [Required]
    	[ProtoMember(3)]
        [DataMember]
        public virtual string Subject
        {
            get { return _subject; }
            set
            {
                if (_subject != value)
                {
                    ChangeTracker.RecordOriginalValue("Subject", _subject);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Subject"))
                            ChangeTracker.RecordOriginalValue("Subject", _subject);
                            
                    _subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        protected string _subject;
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    ChangeTracker.RecordOriginalValue("Text", _text);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Text"))
                            ChangeTracker.RecordOriginalValue("Text", _text);
                            
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        protected string _text;
    [MaxLength(10)]
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string Media
        {
            get { return _media; }
            set
            {
                if (_media != value)
                {
                    ChangeTracker.RecordOriginalValue("Media", _media);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Media"))
                            ChangeTracker.RecordOriginalValue("Media", _media);
                            
                    _media = value;
                    OnPropertyChanged("Media");
                }
            }
        }
        protected string _media;
    [MaxLength(5)]
    [Required]
    	[ProtoMember(6)]
        [DataMember]
        public virtual string Culture
        {
            get { return _culture; }
            set
            {
                if (_culture != value)
                {
                    ChangeTracker.RecordOriginalValue("Culture", _culture);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Culture"))
                            ChangeTracker.RecordOriginalValue("Culture", _culture);
                            
                    _culture = value;
                    OnPropertyChanged("Culture");
                }
            }
        }
        protected string _culture;
    [Required]
    	[ProtoMember(7)]
        [DataMember]
        public virtual bool IsEnable
        {
            get { return _isEnable; }
            set
            {
                if (_isEnable != value)
                {
                    ChangeTracker.RecordOriginalValue("IsEnable", _isEnable);
                        if (!ChangeTracker.OriginalValues.ContainsKey("IsEnable"))
                            ChangeTracker.RecordOriginalValue("IsEnable", _isEnable);
                            
                    _isEnable = value;
                    OnPropertyChanged("IsEnable");
                }
            }
        }
        protected bool _isEnable;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string Audit_CreatorUserName
        {
            get { return _audit_CreatorUserName; }
            set
            {
                if (_audit_CreatorUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorUserName", _audit_CreatorUserName);
                            
                    _audit_CreatorUserName = value;
                    OnPropertyChanged("Audit_CreatorUserName");
                }
            }
        }
        protected string _audit_CreatorUserName;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(9)]
        [DataMember]
        public virtual string Audit_CreatorIP
        {
            get { return _audit_CreatorIP; }
            set
            {
                if (_audit_CreatorIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreatorIP"))
                            ChangeTracker.RecordOriginalValue("Audit_CreatorIP", _audit_CreatorIP);
                            
                    _audit_CreatorIP = value;
                    OnPropertyChanged("Audit_CreatorIP");
                }
            }
        }
        protected string _audit_CreatorIP;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(10)]
        [DataMember]
        public virtual System.DateTime Audit_CreateDate
        {
            get { return _audit_CreateDate; }
            set
            {
                if (_audit_CreateDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_CreateDate"))
                            ChangeTracker.RecordOriginalValue("Audit_CreateDate", _audit_CreateDate);
                            
                    _audit_CreateDate = value;
                    OnPropertyChanged("Audit_CreateDate");
                }
            }
        }
        protected System.DateTime _audit_CreateDate;
    [Required]
    [RestfullIgnore]
    	[ProtoMember(11)]
        [DataMember]
        public virtual System.DateTime Audit_LastModifyDate
        {
            get { return _audit_LastModifyDate; }
            set
            {
                if (_audit_LastModifyDate != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifyDate"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifyDate", _audit_LastModifyDate);
                            
                    _audit_LastModifyDate = value;
                    OnPropertyChanged("Audit_LastModifyDate");
                }
            }
        }
        protected System.DateTime _audit_LastModifyDate;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(12)]
        [DataMember]
        public virtual string Audit_LastModifierUserName
        {
            get { return _audit_LastModifierUserName; }
            set
            {
                if (_audit_LastModifierUserName != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierUserName"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierUserName", _audit_LastModifierUserName);
                            
                    _audit_LastModifierUserName = value;
                    OnPropertyChanged("Audit_LastModifierUserName");
                }
            }
        }
        protected string _audit_LastModifierUserName;
    [MaxLength(50)]
    [Required]
    [RestfullIgnore]
    	[ProtoMember(13)]
        [DataMember]
        public virtual string Audit_LastModifierIP
        {
            get { return _audit_LastModifierIP; }
            set
            {
                if (_audit_LastModifierIP != value)
                {
                    ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Audit_LastModifierIP"))
                            ChangeTracker.RecordOriginalValue("Audit_LastModifierIP", _audit_LastModifierIP);
                            
                    _audit_LastModifierIP = value;
                    OnPropertyChanged("Audit_LastModifierIP");
                }
            }
        }
        protected string _audit_LastModifierIP;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        SystemMessage cloned = new SystemMessage();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._messagePK=this._messagePK;
             cloned._code=this._code;
             cloned._subject=this._subject;
             cloned._text=this._text;
             cloned._media=this._media;
             cloned._culture=this._culture;
             cloned._isEnable=this._isEnable;
             cloned._audit_CreatorUserName=this._audit_CreatorUserName;
             cloned._audit_CreatorIP=this._audit_CreatorIP;
             cloned._audit_CreateDate=this._audit_CreateDate;
             cloned._audit_LastModifyDate=this._audit_LastModifyDate;
             cloned._audit_LastModifierUserName=this._audit_LastModifierUserName;
             cloned._audit_LastModifierIP=this._audit_LastModifierIP;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._messagePK.ToString());
    					// MessagePK
    			sb.Append("`");
    
    						sb.Append(this._code.ToString());
    					// Code
    			sb.Append("`");
    
    						sb.Append(this._subject.ToString());
    					// Subject
    			sb.Append("`");
    
    						sb.Append(this._text.ToString());
    					// Text
    			sb.Append("`");
    
    						sb.Append(this._media.ToString());
    					// Media
    			sb.Append("`");
    
    						sb.Append(this._culture.ToString());
    					// Culture
    			sb.Append("`");
    
    						sb.Append(this._isEnable.ToString());
    					// IsEnable
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorUserName.ToString());
    					// Audit_CreatorUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_CreatorIP.ToString());
    					// Audit_CreatorIP
    			sb.Append("`");
    
    						sb.Append(this._audit_CreateDate.ToString());
    					// Audit_CreateDate
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifyDate.ToString());
    					// Audit_LastModifyDate
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierUserName.ToString());
    					// Audit_LastModifierUserName
    			sb.Append("`");
    
    						sb.Append(this._audit_LastModifierIP.ToString());
    					// Audit_LastModifierIP
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<SystemMessage>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<SystemMessage>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=14;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        SystemMessage casted_other = other as SystemMessage;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.MessagePK,casted_other.MessagePK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Code,casted_other.Code))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Subject,casted_other.Subject))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Text,casted_other.Text))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Media,casted_other.Media))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Culture,casted_other.Culture))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.IsEnable,casted_other.IsEnable))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorUserName,casted_other.Audit_CreatorUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreatorIP,casted_other.Audit_CreatorIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_CreateDate,casted_other.Audit_CreateDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifyDate,casted_other.Audit_LastModifyDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierUserName,casted_other.Audit_LastModifierUserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Audit_LastModifierIP,casted_other.Audit_LastModifierIP))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "MessagePK", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "MessagePK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "Code", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Subject", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=2000
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Text", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=0
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Media", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=10
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Culture", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=5
    	,Unicode=false
    	,FixedLength=true
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "IsEnable", Kind = FieldKinds.Primitive,PropertyType =typeof(bool) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_CreatorUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_CreatorIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_CreateDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_LastModifyDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Audit_LastModifierUserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Audit_LastModifierIP", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vMessagePK=(int)this.GetValue("MessagePK");
        Expression<Func<SystemMessage,bool>> exp = p => p.MessagePK == vMessagePK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "messagepk":
                retVal = this.MessagePK;
                break;
            case "code":
                retVal = this.Code;
                break;
            case "subject":
                retVal = this.Subject;
                break;
            case "text":
                retVal = this.Text;
                break;
            case "media":
                retVal = this.Media;
                break;
            case "culture":
                retVal = this.Culture;
                break;
            case "isenable":
                retVal = this.IsEnable;
                break;
            case "audit_creatorusername":
                retVal = this.Audit_CreatorUserName;
                break;
            case "audit_creatorip":
                retVal = this.Audit_CreatorIP;
                break;
            case "audit_createdate":
                retVal = this.Audit_CreateDate;
                break;
            case "audit_lastmodifydate":
                retVal = this.Audit_LastModifyDate;
                break;
            case "audit_lastmodifierusername":
                retVal = this.Audit_LastModifierUserName;
                break;
            case "audit_lastmodifierip":
                retVal = this.Audit_LastModifierIP;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _messagePK!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "messagepk":
                this.MessagePK =(int)value;
            break;
            case "code":
                this.Code =(string)value;
            break;
            case "subject":
                this.Subject =(string)value;
            break;
            case "text":
                this.Text =(string)value;
            break;
            case "media":
                this.Media =(string)value;
            break;
            case "culture":
                this.Culture =(string)value;
            break;
            case "isenable":
                this.IsEnable =(bool)value;
            break;
            case "audit_creatorusername":
                this.Audit_CreatorUserName =(string)value;
            break;
            case "audit_creatorip":
                this.Audit_CreatorIP =(string)value;
            break;
            case "audit_createdate":
                this.Audit_CreateDate =(System.DateTime)value;
            break;
            case "audit_lastmodifydate":
                this.Audit_LastModifyDate =(System.DateTime)value;
            break;
            case "audit_lastmodifierusername":
                this.Audit_LastModifierUserName =(string)value;
            break;
            case "audit_lastmodifierip":
                this.Audit_LastModifierIP =(string)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
