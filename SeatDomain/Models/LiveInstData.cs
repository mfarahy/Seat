//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface ILiveInstData{
    
     long LiveInstDataPK{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     double EstimatedEPS{
      get;
      set;
      }
    
     long ZTitad{
      get;
      set;
      }
    
     byte Flow{
      get;
      set;
      }
    
     int MinYear{
      get;
      set;
      }
    
     int MaxYear{
      get;
      set;
      }
    
     long QTotTran5JAvg{
      get;
      set;
      }
    
     double SectorPE{
      get;
      set;
      }
    
     double KAjCapValCpsIdx{
      get;
      set;
      }
    
     int PriceMin{
      get;
      set;
      }
    
     int PriceMax{
      get;
      set;
      }
    
     System.DateTime DEven{
      get;
      set;
      }
    
     byte Status{
      get;
      set;
      }
    
     int PriceYesterday{
      get;
      set;
      }
    
     int Last{
      get;
      set;
      }
    
     int Count{
      get;
      set;
      }
    
     int PdrCotVal{
      get;
      set;
      }
    
     int PClosing{
      get;
      set;
      }
    
     long Vol{
      get;
      set;
      }
    
     decimal Val{
      get;
      set;
      }
    
     decimal BVal{
      get;
      set;
      }
    
     Nullable<double> NAV{
      get;
      set;
      }
    
     Nullable<System.DateTime> NAVDate{
      get;
      set;
      }
    
     int PSGelStaMin{
      get;
      set;
      }
    
     int PSGelStaMax{
      get;
      set;
      }
    
    }// interface
    
    [Table("LiveInstDatas")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(LiveInstDataPK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
public partial class LiveInstData:IEntityBase, ILiveInstData,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long LiveInstDataPK
        {
            get { return _liveInstDataPK; }
            set
            {
                if (_liveInstDataPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_liveInstDataPK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'LiveInstDataPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _liveInstDataPK = value;
                    OnPropertyChanged("LiveInstDataPK");
                }
            }
        }
        protected long _liveInstDataPK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [Required]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual double EstimatedEPS
        {
            get { return _estimatedEPS; }
            set
            {
                if (_estimatedEPS != value)
                {
                    ChangeTracker.RecordOriginalValue("EstimatedEPS", _estimatedEPS);
                        if (!ChangeTracker.OriginalValues.ContainsKey("EstimatedEPS"))
                            ChangeTracker.RecordOriginalValue("EstimatedEPS", _estimatedEPS);
                            
                    _estimatedEPS = value;
                    OnPropertyChanged("EstimatedEPS");
                }
            }
        }
        protected double _estimatedEPS;
    [Required]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual long ZTitad
        {
            get { return _zTitad; }
            set
            {
                if (_zTitad != value)
                {
                    ChangeTracker.RecordOriginalValue("ZTitad", _zTitad);
                        if (!ChangeTracker.OriginalValues.ContainsKey("ZTitad"))
                            ChangeTracker.RecordOriginalValue("ZTitad", _zTitad);
                            
                    _zTitad = value;
                    OnPropertyChanged("ZTitad");
                }
            }
        }
        protected long _zTitad;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual byte Flow
        {
            get { return _flow; }
            set
            {
                if (_flow != value)
                {
                    ChangeTracker.RecordOriginalValue("Flow", _flow);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Flow"))
                            ChangeTracker.RecordOriginalValue("Flow", _flow);
                            
                    _flow = value;
                    OnPropertyChanged("Flow");
                }
            }
        }
        protected byte _flow;
    [Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual int MinYear
        {
            get { return _minYear; }
            set
            {
                if (_minYear != value)
                {
                    ChangeTracker.RecordOriginalValue("MinYear", _minYear);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MinYear"))
                            ChangeTracker.RecordOriginalValue("MinYear", _minYear);
                            
                    _minYear = value;
                    OnPropertyChanged("MinYear");
                }
            }
        }
        protected int _minYear;
    [Required]
    
	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual int MaxYear
        {
            get { return _maxYear; }
            set
            {
                if (_maxYear != value)
                {
                    ChangeTracker.RecordOriginalValue("MaxYear", _maxYear);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MaxYear"))
                            ChangeTracker.RecordOriginalValue("MaxYear", _maxYear);
                            
                    _maxYear = value;
                    OnPropertyChanged("MaxYear");
                }
            }
        }
        protected int _maxYear;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual long QTotTran5JAvg
        {
            get { return _qTotTran5JAvg; }
            set
            {
                if (_qTotTran5JAvg != value)
                {
                    ChangeTracker.RecordOriginalValue("QTotTran5JAvg", _qTotTran5JAvg);
                        if (!ChangeTracker.OriginalValues.ContainsKey("QTotTran5JAvg"))
                            ChangeTracker.RecordOriginalValue("QTotTran5JAvg", _qTotTran5JAvg);
                            
                    _qTotTran5JAvg = value;
                    OnPropertyChanged("QTotTran5JAvg");
                }
            }
        }
        protected long _qTotTran5JAvg;
    [Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual double SectorPE
        {
            get { return _sectorPE; }
            set
            {
                if (_sectorPE != value)
                {
                    ChangeTracker.RecordOriginalValue("SectorPE", _sectorPE);
                        if (!ChangeTracker.OriginalValues.ContainsKey("SectorPE"))
                            ChangeTracker.RecordOriginalValue("SectorPE", _sectorPE);
                            
                    _sectorPE = value;
                    OnPropertyChanged("SectorPE");
                }
            }
        }
        protected double _sectorPE;
    [Required]
    
	[ProtoMember(10)]
    
    [DataMember]
    
    public virtual double KAjCapValCpsIdx
        {
            get { return _kAjCapValCpsIdx; }
            set
            {
                if (_kAjCapValCpsIdx != value)
                {
                    ChangeTracker.RecordOriginalValue("KAjCapValCpsIdx", _kAjCapValCpsIdx);
                        if (!ChangeTracker.OriginalValues.ContainsKey("KAjCapValCpsIdx"))
                            ChangeTracker.RecordOriginalValue("KAjCapValCpsIdx", _kAjCapValCpsIdx);
                            
                    _kAjCapValCpsIdx = value;
                    OnPropertyChanged("KAjCapValCpsIdx");
                }
            }
        }
        protected double _kAjCapValCpsIdx;
    [Required]
    
	[ProtoMember(11)]
    
    [DataMember]
    
    public virtual int PriceMin
        {
            get { return _priceMin; }
            set
            {
                if (_priceMin != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceMin", _priceMin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceMin"))
                            ChangeTracker.RecordOriginalValue("PriceMin", _priceMin);
                            
                    _priceMin = value;
                    OnPropertyChanged("PriceMin");
                }
            }
        }
        protected int _priceMin;
    [Required]
    
	[ProtoMember(12)]
    
    [DataMember]
    
    public virtual int PriceMax
        {
            get { return _priceMax; }
            set
            {
                if (_priceMax != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceMax", _priceMax);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceMax"))
                            ChangeTracker.RecordOriginalValue("PriceMax", _priceMax);
                            
                    _priceMax = value;
                    OnPropertyChanged("PriceMax");
                }
            }
        }
        protected int _priceMax;
    [Required]
    
	[ProtoMember(13)]
    
    [DataMember]
    
    public virtual System.DateTime DEven
        {
            get { return _dEven; }
            set
            {
                if (_dEven != value)
                {
                    ChangeTracker.RecordOriginalValue("DEven", _dEven);
                        if (!ChangeTracker.OriginalValues.ContainsKey("DEven"))
                            ChangeTracker.RecordOriginalValue("DEven", _dEven);
                            
                    _dEven = value;
                    OnPropertyChanged("DEven");
                }
            }
        }
        protected System.DateTime _dEven;
    [Required]
    
	[ProtoMember(14)]
    
    [DataMember]
    
    public virtual byte Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("Status", _status);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Status"))
                            ChangeTracker.RecordOriginalValue("Status", _status);
                            
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        protected byte _status;
    [Required]
    
	[ProtoMember(15)]
    
    [DataMember]
    
    public virtual int PriceYesterday
        {
            get { return _priceYesterday; }
            set
            {
                if (_priceYesterday != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceYesterday", _priceYesterday);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PriceYesterday"))
                            ChangeTracker.RecordOriginalValue("PriceYesterday", _priceYesterday);
                            
                    _priceYesterday = value;
                    OnPropertyChanged("PriceYesterday");
                }
            }
        }
        protected int _priceYesterday;
    [Required]
    
	[ProtoMember(16)]
    
    [DataMember]
    
    public virtual int Last
        {
            get { return _last; }
            set
            {
                if (_last != value)
                {
                    ChangeTracker.RecordOriginalValue("Last", _last);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Last"))
                            ChangeTracker.RecordOriginalValue("Last", _last);
                            
                    _last = value;
                    OnPropertyChanged("Last");
                }
            }
        }
        protected int _last;
    [Required]
    
	[ProtoMember(17)]
    
    [DataMember]
    
    public virtual int Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    ChangeTracker.RecordOriginalValue("Count", _count);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Count"))
                            ChangeTracker.RecordOriginalValue("Count", _count);
                            
                    _count = value;
                    OnPropertyChanged("Count");
                }
            }
        }
        protected int _count;
    [Required]
    
	[ProtoMember(18)]
    
    [DataMember]
    
    public virtual int PdrCotVal
        {
            get { return _pdrCotVal; }
            set
            {
                if (_pdrCotVal != value)
                {
                    ChangeTracker.RecordOriginalValue("PdrCotVal", _pdrCotVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PdrCotVal"))
                            ChangeTracker.RecordOriginalValue("PdrCotVal", _pdrCotVal);
                            
                    _pdrCotVal = value;
                    OnPropertyChanged("PdrCotVal");
                }
            }
        }
        protected int _pdrCotVal;
    [Required]
    
	[ProtoMember(19)]
    
    [DataMember]
    
    public virtual int PClosing
        {
            get { return _pClosing; }
            set
            {
                if (_pClosing != value)
                {
                    ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PClosing"))
                            ChangeTracker.RecordOriginalValue("PClosing", _pClosing);
                            
                    _pClosing = value;
                    OnPropertyChanged("PClosing");
                }
            }
        }
        protected int _pClosing;
    [Required]
    
	[ProtoMember(20)]
    
    [DataMember]
    
    public virtual long Vol
        {
            get { return _vol; }
            set
            {
                if (_vol != value)
                {
                    ChangeTracker.RecordOriginalValue("Vol", _vol);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Vol"))
                            ChangeTracker.RecordOriginalValue("Vol", _vol);
                            
                    _vol = value;
                    OnPropertyChanged("Vol");
                }
            }
        }
        protected long _vol;
    [Required]
    
	[ProtoMember(21)]
    
    [DataMember]
    
    public virtual decimal Val
        {
            get { return _val; }
            set
            {
                if (_val != value)
                {
                    ChangeTracker.RecordOriginalValue("Val", _val);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Val"))
                            ChangeTracker.RecordOriginalValue("Val", _val);
                            
                    _val = value;
                    OnPropertyChanged("Val");
                }
            }
        }
        protected decimal _val;
    [Required]
    
	[ProtoMember(22)]
    
    [DataMember]
    
    public virtual decimal BVal
        {
            get { return _bVal; }
            set
            {
                if (_bVal != value)
                {
                    ChangeTracker.RecordOriginalValue("BVal", _bVal);
                        if (!ChangeTracker.OriginalValues.ContainsKey("BVal"))
                            ChangeTracker.RecordOriginalValue("BVal", _bVal);
                            
                    _bVal = value;
                    OnPropertyChanged("BVal");
                }
            }
        }
        protected decimal _bVal;
    	[ProtoMember(23)]
    
    [DataMember]
    
    public virtual Nullable<double> NAV
        {
            get { return _nAV; }
            set
            {
                if (_nAV != value)
                {
                    ChangeTracker.RecordOriginalValue("NAV", _nAV);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NAV"))
                            ChangeTracker.RecordOriginalValue("NAV", _nAV);
                            
                    _nAV = value;
                    OnPropertyChanged("NAV");
                }
            }
        }
        protected Nullable<double> _nAV;
    	[ProtoMember(24)]
    
    [DataMember]
    
    public virtual Nullable<System.DateTime> NAVDate
        {
            get { return _nAVDate; }
            set
            {
                if (_nAVDate != value)
                {
                    ChangeTracker.RecordOriginalValue("NAVDate", _nAVDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NAVDate"))
                            ChangeTracker.RecordOriginalValue("NAVDate", _nAVDate);
                            
                    _nAVDate = value;
                    OnPropertyChanged("NAVDate");
                }
            }
        }
        protected Nullable<System.DateTime> _nAVDate;
    [Required]
    
	[ProtoMember(25)]
    
    [DataMember]
    
    public virtual int PSGelStaMin
        {
            get { return _pSGelStaMin; }
            set
            {
                if (_pSGelStaMin != value)
                {
                    ChangeTracker.RecordOriginalValue("PSGelStaMin", _pSGelStaMin);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PSGelStaMin"))
                            ChangeTracker.RecordOriginalValue("PSGelStaMin", _pSGelStaMin);
                            
                    _pSGelStaMin = value;
                    OnPropertyChanged("PSGelStaMin");
                }
            }
        }
        protected int _pSGelStaMin;
    [Required]
    
	[ProtoMember(26)]
    
    [DataMember]
    
    public virtual int PSGelStaMax
        {
            get { return _pSGelStaMax; }
            set
            {
                if (_pSGelStaMax != value)
                {
                    ChangeTracker.RecordOriginalValue("PSGelStaMax", _pSGelStaMax);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PSGelStaMax"))
                            ChangeTracker.RecordOriginalValue("PSGelStaMax", _pSGelStaMax);
                            
                    _pSGelStaMax = value;
                    OnPropertyChanged("PSGelStaMax");
                }
            }
        }
        protected int _pSGelStaMax;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        LiveInstData cloned = new LiveInstData();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._liveInstDataPK=this._liveInstDataPK;
             cloned._insCode=this._insCode;
             cloned._estimatedEPS=this._estimatedEPS;
             cloned._zTitad=this._zTitad;
             cloned._flow=this._flow;
             cloned._minYear=this._minYear;
             cloned._maxYear=this._maxYear;
             cloned._qTotTran5JAvg=this._qTotTran5JAvg;
             cloned._sectorPE=this._sectorPE;
             cloned._kAjCapValCpsIdx=this._kAjCapValCpsIdx;
             cloned._priceMin=this._priceMin;
             cloned._priceMax=this._priceMax;
             cloned._dEven=this._dEven;
             cloned._status=this._status;
             cloned._priceYesterday=this._priceYesterday;
             cloned._last=this._last;
             cloned._count=this._count;
             cloned._pdrCotVal=this._pdrCotVal;
             cloned._pClosing=this._pClosing;
             cloned._vol=this._vol;
             cloned._val=this._val;
             cloned._bVal=this._bVal;
             cloned._nAV=this._nAV;
             cloned._nAVDate=this._nAVDate;
             cloned._pSGelStaMin=this._pSGelStaMin;
             cloned._pSGelStaMax=this._pSGelStaMax;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._liveInstDataPK.ToString());
    					// LiveInstDataPK
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._estimatedEPS.ToString());
    					// EstimatedEPS
    			sb.Append("`");
    
    						sb.Append(this._zTitad.ToString());
    					// ZTitad
    			sb.Append("`");
    
    						sb.Append(this._flow.ToString());
    					// Flow
    			sb.Append("`");
    
    						sb.Append(this._minYear.ToString());
    					// MinYear
    			sb.Append("`");
    
    						sb.Append(this._maxYear.ToString());
    					// MaxYear
    			sb.Append("`");
    
    						sb.Append(this._qTotTran5JAvg.ToString());
    					// QTotTran5JAvg
    			sb.Append("`");
    
    						sb.Append(this._sectorPE.ToString());
    					// SectorPE
    			sb.Append("`");
    
    						sb.Append(this._kAjCapValCpsIdx.ToString());
    					// KAjCapValCpsIdx
    			sb.Append("`");
    
    						sb.Append(this._priceMin.ToString());
    					// PriceMin
    			sb.Append("`");
    
    						sb.Append(this._priceMax.ToString());
    					// PriceMax
    			sb.Append("`");
    
    						sb.Append(this._dEven.ToString());
    					// DEven
    			sb.Append("`");
    
    						sb.Append(this._status.ToString());
    					// Status
    			sb.Append("`");
    
    						sb.Append(this._priceYesterday.ToString());
    					// PriceYesterday
    			sb.Append("`");
    
    						sb.Append(this._last.ToString());
    					// Last
    			sb.Append("`");
    
    						sb.Append(this._count.ToString());
    					// Count
    			sb.Append("`");
    
    						sb.Append(this._pdrCotVal.ToString());
    					// PdrCotVal
    			sb.Append("`");
    
    						sb.Append(this._pClosing.ToString());
    					// PClosing
    			sb.Append("`");
    
    						sb.Append(this._vol.ToString());
    					// Vol
    			sb.Append("`");
    
    						sb.Append(this._val.ToString());
    					// Val
    			sb.Append("`");
    
    						sb.Append(this._bVal.ToString());
    					// BVal
    			sb.Append("`");
    
    						sb.Append(this._nAV?.ToString());
    						// NAV
    			sb.Append("`");
    
    						sb.Append(this._nAVDate?.ToString());
    						// NAVDate
    			sb.Append("`");
    
    						sb.Append(this._pSGelStaMin.ToString());
    					// PSGelStaMin
    			sb.Append("`");
    
    						sb.Append(this._pSGelStaMax.ToString());
    					// PSGelStaMax
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<LiveInstData>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<LiveInstData>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=27;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        LiveInstData casted_other = other as LiveInstData;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.LiveInstDataPK,casted_other.LiveInstDataPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.EstimatedEPS,casted_other.EstimatedEPS))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.ZTitad,casted_other.ZTitad))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Flow,casted_other.Flow))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MinYear,casted_other.MinYear))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MaxYear,casted_other.MaxYear))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.QTotTran5JAvg,casted_other.QTotTran5JAvg))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.SectorPE,casted_other.SectorPE))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.KAjCapValCpsIdx,casted_other.KAjCapValCpsIdx))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceMin,casted_other.PriceMin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceMax,casted_other.PriceMax))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.DEven,casted_other.DEven))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Status,casted_other.Status))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PriceYesterday,casted_other.PriceYesterday))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Last,casted_other.Last))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Count,casted_other.Count))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PdrCotVal,casted_other.PdrCotVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PClosing,casted_other.PClosing))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Vol,casted_other.Vol))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Val,casted_other.Val))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.BVal,casted_other.BVal))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NAV,casted_other.NAV))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NAVDate,casted_other.NAVDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PSGelStaMin,casted_other.PSGelStaMin))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PSGelStaMax,casted_other.PSGelStaMax))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "LiveInstDataPK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "LiveInstDataPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "EstimatedEPS", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "ZTitad", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Flow", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MinYear", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MaxYear", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "QTotTran5JAvg", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "SectorPE", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "KAjCapValCpsIdx", Kind = FieldKinds.Primitive,PropertyType =typeof(double) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceMin", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceMax", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "DEven", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Status", Kind = FieldKinds.Primitive,PropertyType =typeof(byte) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PriceYesterday", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Last", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Count", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PdrCotVal", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PClosing", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Vol", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Val", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "BVal", Kind = FieldKinds.Primitive,PropertyType =typeof(decimal) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "NAV", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<double>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "NAVDate", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<System.DateTime>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PSGelStaMin", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PSGelStaMax", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vLiveInstDataPK=(long)this.GetValue("LiveInstDataPK");
        Expression<Func<LiveInstData,bool>> exp = p => p.LiveInstDataPK == vLiveInstDataPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "liveinstdatapk":
                retVal = this.LiveInstDataPK;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "estimatedeps":
                retVal = this.EstimatedEPS;
                break;
            case "ztitad":
                retVal = this.ZTitad;
                break;
            case "flow":
                retVal = this.Flow;
                break;
            case "minyear":
                retVal = this.MinYear;
                break;
            case "maxyear":
                retVal = this.MaxYear;
                break;
            case "qtottran5javg":
                retVal = this.QTotTran5JAvg;
                break;
            case "sectorpe":
                retVal = this.SectorPE;
                break;
            case "kajcapvalcpsidx":
                retVal = this.KAjCapValCpsIdx;
                break;
            case "pricemin":
                retVal = this.PriceMin;
                break;
            case "pricemax":
                retVal = this.PriceMax;
                break;
            case "deven":
                retVal = this.DEven;
                break;
            case "status":
                retVal = this.Status;
                break;
            case "priceyesterday":
                retVal = this.PriceYesterday;
                break;
            case "last":
                retVal = this.Last;
                break;
            case "count":
                retVal = this.Count;
                break;
            case "pdrcotval":
                retVal = this.PdrCotVal;
                break;
            case "pclosing":
                retVal = this.PClosing;
                break;
            case "vol":
                retVal = this.Vol;
                break;
            case "val":
                retVal = this.Val;
                break;
            case "bval":
                retVal = this.BVal;
                break;
            case "nav":
                retVal = this.NAV;
                break;
            case "navdate":
                retVal = this.NAVDate;
                break;
            case "psgelstamin":
                retVal = this.PSGelStaMin;
                break;
            case "psgelstamax":
                retVal = this.PSGelStaMax;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _liveInstDataPK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "liveinstdatapk":
                this.LiveInstDataPK =(long)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "estimatedeps":
                this.EstimatedEPS =(double)value;
            break;
            case "ztitad":
                this.ZTitad =(long)value;
            break;
            case "flow":
                this.Flow =(byte)value;
            break;
            case "minyear":
                this.MinYear =(int)value;
            break;
            case "maxyear":
                this.MaxYear =(int)value;
            break;
            case "qtottran5javg":
                this.QTotTran5JAvg =(long)value;
            break;
            case "sectorpe":
                this.SectorPE =(double)value;
            break;
            case "kajcapvalcpsidx":
                this.KAjCapValCpsIdx =(double)value;
            break;
            case "pricemin":
                this.PriceMin =(int)value;
            break;
            case "pricemax":
                this.PriceMax =(int)value;
            break;
            case "deven":
                this.DEven =(System.DateTime)value;
            break;
            case "status":
                this.Status =(byte)value;
            break;
            case "priceyesterday":
                this.PriceYesterday =(int)value;
            break;
            case "last":
                this.Last =(int)value;
            break;
            case "count":
                this.Count =(int)value;
            break;
            case "pdrcotval":
                this.PdrCotVal =(int)value;
            break;
            case "pclosing":
                this.PClosing =(int)value;
            break;
            case "vol":
                this.Vol =(long)value;
            break;
            case "val":
                this.Val =(decimal)value;
            break;
            case "bval":
                this.BVal =(decimal)value;
            break;
            case "nav":
                this.NAV =(Nullable<double>)value;
            break;
            case "navdate":
                this.NAVDate =(Nullable<System.DateTime>)value;
            break;
            case "psgelstamin":
                this.PSGelStaMin =(int)value;
            break;
            case "psgelstamax":
                this.PSGelStaMax =(int)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
