//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface IFeedBack{
    
     int Id{
      get;
      set;
      }
    
     string UserName{
      get;
      set;
      }
    
     System.DateTime CreateDate{
      get;
      set;
      }
    
     string Description{
      get;
      set;
      }
    
     string LinkAddresss{
      get;
      set;
      }
    
     int Status{
      get;
      set;
      }
    
     int CategoryType{
      get;
      set;
      }
    
     string Mobile{
      get;
      set;
      }
    
     string Email{
      get;
      set;
      }
    
     string Response{
      get;
      set;
      }
    
    }// interface
    
    [Table("FeedBacks")]
    [Serializer(typeof(ProtobufSerializer))]
    [ProtoContract]
    [Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(Id)} )]
    [Entity]
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class FeedBack:IEntityBase, IFeedBack,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    [Required]
    	[ProtoMember(1)]
        [DataMember]
        public virtual int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_id,Typing.GetDefaultValue(typeof(int))))
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        protected int _id;
    [MaxLength(50)]
    [Required]
    	[ProtoMember(2)]
        [DataMember]
        public virtual string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                        if (!ChangeTracker.OriginalValues.ContainsKey("UserName"))
                            ChangeTracker.RecordOriginalValue("UserName", _userName);
                            
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        protected string _userName;
    [Required]
    	[ProtoMember(3)]
        [DataMember]
        public virtual System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    ChangeTracker.RecordOriginalValue("CreateDate", _createDate);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CreateDate"))
                            ChangeTracker.RecordOriginalValue("CreateDate", _createDate);
                            
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        protected System.DateTime _createDate;
    [MaxLength(1000)]
    [Required]
    	[ProtoMember(4)]
        [DataMember]
        public virtual string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Description"))
                            ChangeTracker.RecordOriginalValue("Description", _description);
                            
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        protected string _description;
    [MaxLength(500)]
    [Required]
    	[ProtoMember(5)]
        [DataMember]
        public virtual string LinkAddresss
        {
            get { return _linkAddresss; }
            set
            {
                if (_linkAddresss != value)
                {
                    ChangeTracker.RecordOriginalValue("LinkAddresss", _linkAddresss);
                        if (!ChangeTracker.OriginalValues.ContainsKey("LinkAddresss"))
                            ChangeTracker.RecordOriginalValue("LinkAddresss", _linkAddresss);
                            
                    _linkAddresss = value;
                    OnPropertyChanged("LinkAddresss");
                }
            }
        }
        protected string _linkAddresss;
    [Required]
    	[ProtoMember(6)]
        [DataMember]
        public virtual int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("Status", _status);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Status"))
                            ChangeTracker.RecordOriginalValue("Status", _status);
                            
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        protected int _status;
    [Required]
    	[ProtoMember(7)]
        [DataMember]
        public virtual int CategoryType
        {
            get { return _categoryType; }
            set
            {
                if (_categoryType != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryType", _categoryType);
                        if (!ChangeTracker.OriginalValues.ContainsKey("CategoryType"))
                            ChangeTracker.RecordOriginalValue("CategoryType", _categoryType);
                            
                    _categoryType = value;
                    OnPropertyChanged("CategoryType");
                }
            }
        }
        protected int _categoryType;
    [MaxLength(13)]
    	[ProtoMember(8)]
        [DataMember]
        public virtual string Mobile
        {
            get { return _mobile; }
            set
            {
                if (_mobile != value)
                {
                    ChangeTracker.RecordOriginalValue("Mobile", _mobile);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Mobile"))
                            ChangeTracker.RecordOriginalValue("Mobile", _mobile);
                            
                    _mobile = value;
                    OnPropertyChanged("Mobile");
                }
            }
        }
        protected string _mobile;
    [MaxLength(100)]
    	[ProtoMember(9)]
        [DataMember]
        public virtual string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    ChangeTracker.RecordOriginalValue("Email", _email);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Email"))
                            ChangeTracker.RecordOriginalValue("Email", _email);
                            
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        protected string _email;
    [MaxLength(500)]
    	[ProtoMember(10)]
        [DataMember]
        public virtual string Response
        {
            get { return _response; }
            set
            {
                if (_response != value)
                {
                    ChangeTracker.RecordOriginalValue("Response", _response);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Response"))
                            ChangeTracker.RecordOriginalValue("Response", _response);
                            
                    _response = value;
                    OnPropertyChanged("Response");
                }
            }
        }
        protected string _response;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        FeedBack cloned = new FeedBack();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._id=this._id;
             cloned._userName=this._userName;
             cloned._createDate=this._createDate;
             cloned._description=this._description;
             cloned._linkAddresss=this._linkAddresss;
             cloned._status=this._status;
             cloned._categoryType=this._categoryType;
             cloned._mobile=this._mobile;
             cloned._email=this._email;
             cloned._response=this._response;
            
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._id.ToString());
    					// Id
    			sb.Append("`");
    
    						sb.Append(this._userName.ToString());
    					// UserName
    			sb.Append("`");
    
    						sb.Append(this._createDate.ToString());
    					// CreateDate
    			sb.Append("`");
    
    						sb.Append(this._description.ToString());
    					// Description
    			sb.Append("`");
    
    						sb.Append(this._linkAddresss.ToString());
    					// LinkAddresss
    			sb.Append("`");
    
    						sb.Append(this._status.ToString());
    					// Status
    			sb.Append("`");
    
    						sb.Append(this._categoryType.ToString());
    					// CategoryType
    			sb.Append("`");
    
    						sb.Append(this._mobile?.ToString());
    						// Mobile
    			sb.Append("`");
    
    						sb.Append(this._email?.ToString());
    						// Email
    			sb.Append("`");
    
    						sb.Append(this._response?.ToString());
    						// Response
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<FeedBack>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<FeedBack>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=11;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
       }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        FeedBack casted_other = other as FeedBack;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.Id,casted_other.Id))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.UserName,casted_other.UserName))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CreateDate,casted_other.CreateDate))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Description,casted_other.Description))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.LinkAddresss,casted_other.LinkAddresss))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Status,casted_other.Status))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.CategoryType,casted_other.CategoryType))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Mobile,casted_other.Mobile))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Email,casted_other.Email))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Response,casted_other.Response))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
    	    [System.Xml.Serialization.XmlIgnore]
            public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "Id", Kind = FieldKinds.Primitive,PropertyType =typeof(int),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "Id", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "UserName", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "CreateDate", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Description", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=1000
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "LinkAddresss", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Status", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "CategoryType", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Mobile", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=13
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Email", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Response", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=500
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
                return Enumerable.Empty<IField>();
                 
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vId=(int)this.GetValue("Id");
        Expression<Func<FeedBack,bool>> exp = p => p.Id == vId ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "id":
                retVal = this.Id;
                break;
            case "username":
                retVal = this.UserName;
                break;
            case "createdate":
                retVal = this.CreateDate;
                break;
            case "description":
                retVal = this.Description;
                break;
            case "linkaddresss":
                retVal = this.LinkAddresss;
                break;
            case "status":
                retVal = this.Status;
                break;
            case "categorytype":
                retVal = this.CategoryType;
                break;
            case "mobile":
                retVal = this.Mobile;
                break;
            case "email":
                retVal = this.Email;
                break;
            case "response":
                retVal = this.Response;
                break;
        	
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _id!=default(int);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                        }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "id":
                this.Id =(int)value;
            break;
            case "username":
                this.UserName =(string)value;
            break;
            case "createdate":
                this.CreateDate =(System.DateTime)value;
            break;
            case "description":
                this.Description =(string)value;
            break;
            case "linkaddresss":
                this.LinkAddresss =(string)value;
            break;
            case "status":
                this.Status =(int)value;
            break;
            case "categorytype":
                this.CategoryType =(int)value;
            break;
            case "mobile":
                this.Mobile =(string)value;
            break;
            case "email":
                this.Email =(string)value;
            break;
            case "response":
                this.Response =(string)value;
            break;
    	
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
       private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
            [ProtoIgnore]
            [Newtonsoft.Json.JsonIgnore]
            [Jil.JilDirective(Ignore =true)]
        [System.Xml.Serialization.XmlIgnore]
        public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
