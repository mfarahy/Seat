//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Exir.Framework.Common;
using System.Linq.Expressions;
using System.Linq;
using ProtoBuf;
using System.ComponentModel.DataAnnotations.Schema;
using Exir.Framework.Common.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SeatDomain.Models
{
            public interface INotificationLog{
    
     long NotificationLogPK{
      get;
      set;
      }
    
     long InsCode{
      get;
      set;
      }
    
     string PhoneNumber{
      get;
      set;
      }
    
     string Email{
      get;
      set;
      }
    
     System.DateTime NotificationDt{
      get;
      set;
      }
    
     string MessageBody{
      get;
      set;
      }
    
     Nullable<byte> Status{
      get;
      set;
      }
    
     int NotificationPK{
      get;
      set;
      }
    
     string Owner{
      get;
      set;
      }
    
    Instrument Instrument{get;set;}
    Notification Notification{get;set;}
    }// interface
    
    [Table("NotificationLogs")]
    
[Serializer(typeof(ProtobufSerializer))]
    
[ProtoContract]
    
[Exir.Framework.Common.Caching.CacheableKey( new string[]{nameof(NotificationLogPK)} )]
    
[Entity]
    
[Serializable]
    
[DataContract(IsReference = true)]
    
[KnownType(typeof(Instrument))]
    
[KnownType(typeof(Notification))]
    
public partial class NotificationLog:IEntityBase, INotificationLog,IObjectWithChangeTracker, INotifyPropertyChanged, ICloneable
    {
        #region Primitive Properties
    [Key]
    
[Required]
    
	[ProtoMember(1)]
    
    [DataMember]
    
    public virtual long NotificationLogPK
        {
            get { return _notificationLogPK; }
            set
            {
                if (_notificationLogPK != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && !Typing.IsEquals(_notificationLogPK,Typing.GetDefaultValue(typeof(long))))
                    {
                        throw new InvalidOperationException("The property 'NotificationLogPK' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _notificationLogPK = value;
                    OnPropertyChanged("NotificationLogPK");
                }
            }
        }
        protected long _notificationLogPK;
    [Required]
    
	[ProtoMember(2)]
    
    [DataMember]
    
    public virtual long InsCode
        {
            get { return _insCode; }
            set
            {
                if (_insCode != value)
                {
                    ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                        if (!ChangeTracker.OriginalValues.ContainsKey("InsCode"))
                            ChangeTracker.RecordOriginalValue("InsCode", _insCode);
                            
                    if (!IsDeserializing)
                    {
                        if (Instrument != null && Instrument.InsCode != value)
                        {
                            Instrument = null;
                        }
                    }
                    _insCode = value;
                    OnPropertyChanged("InsCode");
                }
            }
        }
        protected long _insCode;
    [MaxLength(50)]
    
	[ProtoMember(3)]
    
    [DataMember]
    
    public virtual string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
                        if (!ChangeTracker.OriginalValues.ContainsKey("PhoneNumber"))
                            ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
                            
                    _phoneNumber = value;
                    OnPropertyChanged("PhoneNumber");
                }
            }
        }
        protected string _phoneNumber;
    [MaxLength(150)]
    
	[ProtoMember(4)]
    
    [DataMember]
    
    public virtual string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    ChangeTracker.RecordOriginalValue("Email", _email);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Email"))
                            ChangeTracker.RecordOriginalValue("Email", _email);
                            
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        protected string _email;
    [Required]
    
	[ProtoMember(5)]
    
    [DataMember]
    
    public virtual System.DateTime NotificationDt
        {
            get { return _notificationDt; }
            set
            {
                if (_notificationDt != value)
                {
                    ChangeTracker.RecordOriginalValue("NotificationDt", _notificationDt);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NotificationDt"))
                            ChangeTracker.RecordOriginalValue("NotificationDt", _notificationDt);
                            
                    _notificationDt = value;
                    OnPropertyChanged("NotificationDt");
                }
            }
        }
        protected System.DateTime _notificationDt;
    [MaxLength(50)]
    
[Required]
    
	[ProtoMember(6)]
    
    [DataMember]
    
    public virtual string MessageBody
        {
            get { return _messageBody; }
            set
            {
                if (_messageBody != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageBody", _messageBody);
                        if (!ChangeTracker.OriginalValues.ContainsKey("MessageBody"))
                            ChangeTracker.RecordOriginalValue("MessageBody", _messageBody);
                            
                    _messageBody = value;
                    OnPropertyChanged("MessageBody");
                }
            }
        }
        protected string _messageBody;
    	[ProtoMember(7)]
    
    [DataMember]
    
    public virtual Nullable<byte> Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("Status", _status);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Status"))
                            ChangeTracker.RecordOriginalValue("Status", _status);
                            
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        protected Nullable<byte> _status;
    [Required]
    
	[ProtoMember(8)]
    
    [DataMember]
    
    public virtual int NotificationPK
        {
            get { return _notificationPK; }
            set
            {
                if (_notificationPK != value)
                {
                    ChangeTracker.RecordOriginalValue("NotificationPK", _notificationPK);
                        if (!ChangeTracker.OriginalValues.ContainsKey("NotificationPK"))
                            ChangeTracker.RecordOriginalValue("NotificationPK", _notificationPK);
                            
                    if (!IsDeserializing)
                    {
                        if (Notification != null && Notification.NotificationPK != value)
                        {
                            Notification = null;
                        }
                    }
                    _notificationPK = value;
                    OnPropertyChanged("NotificationPK");
                }
            }
        }
        protected int _notificationPK;
    [MaxLength(100)]
    
[Required]
    
	[ProtoMember(9)]
    
    [DataMember]
    
    public virtual string Owner
        {
            get { return _owner; }
            set
            {
                if (_owner != value)
                {
                    ChangeTracker.RecordOriginalValue("Owner", _owner);
                        if (!ChangeTracker.OriginalValues.ContainsKey("Owner"))
                            ChangeTracker.RecordOriginalValue("Owner", _owner);
                            
                    _owner = value;
                    OnPropertyChanged("Owner");
                }
            }
        }
        protected string _owner;

        #endregion

        #region Navigation Properties
    
     	[ProtoMember(10,AsReference =true)]
    
[ForeignKey("InsCode")]
    
   [DataMember]
    
    public  Instrument Instrument
        {
            get { return _instrument; }
            set
            {
                if (!ReferenceEquals(_instrument, value))
                {
                    var previousValue = _instrument;
                    _instrument = value;
                    FixupInstrument(previousValue);
                    OnNavigationPropertyChanged("Instrument");
                }
            }
        }
        protected Instrument _instrument;
    
     	[ProtoMember(11,AsReference =true)]
    
[ForeignKey("NotificationPK")]
    
   [DataMember]
    
    public  Notification Notification
        {
            get { return _notification; }
            set
            {
                if (!ReferenceEquals(_notification, value))
                {
                    var previousValue = _notification;
                    _notification = value;
                    FixupNotification(previousValue);
                    OnNavigationPropertyChanged("Notification");
                }
            }
        }
        protected Notification _notification;

        #endregion

    
    		public virtual object Clone(){
    			return Clone(new Dictionary<object,object>(),true);
    		}
    
    public   virtual object Clone(Dictionary<object,object> clonedObjects,bool includePrimaryKey)
    {
        NotificationLog cloned = new NotificationLog();
                clonedObjects.Add(this, cloned);
        				if(includePrimaryKey)
    				     cloned._notificationLogPK=this._notificationLogPK;
             cloned._insCode=this._insCode;
             cloned._phoneNumber=this._phoneNumber;
             cloned._email=this._email;
             cloned._notificationDt=this._notificationDt;
             cloned._messageBody=this._messageBody;
             cloned._status=this._status;
             cloned._notificationPK=this._notificationPK;
             cloned._owner=this._owner;
        if(Instrument!=null) {
    if (!clonedObjects.ContainsKey(Instrument))
    cloned.Instrument=(Instrument)Instrument.Clone(clonedObjects,includePrimaryKey);
    else
                    cloned.Instrument = (Instrument)clonedObjects[Instrument];
                }
    if(Notification!=null) {
    if (!clonedObjects.ContainsKey(Notification))
    cloned.Notification=(Notification)Notification.Clone(clonedObjects,includePrimaryKey);
    else
                    cloned.Notification = (Notification)clonedObjects[Notification];
                }
        
    
        return cloned;
    }
    
    
    public virtual long ComputeHashCode()
    	{
    		var sb = new System.Text.StringBuilder();
    
    						sb.Append(this._notificationLogPK.ToString());
    					// NotificationLogPK
    			sb.Append("`");
    
    						sb.Append(this._insCode.ToString());
    					// InsCode
    			sb.Append("`");
    
    						sb.Append(this._phoneNumber?.ToString());
    						// PhoneNumber
    			sb.Append("`");
    
    						sb.Append(this._email?.ToString());
    						// Email
    			sb.Append("`");
    
    						sb.Append(this._notificationDt.ToString());
    					// NotificationDt
    			sb.Append("`");
    
    						sb.Append(this._messageBody.ToString());
    					// MessageBody
    			sb.Append("`");
    
    						sb.Append(this._status?.ToString());
    						// Status
    			sb.Append("`");
    
    						sb.Append(this._notificationPK.ToString());
    					// NotificationPK
    			sb.Append("`");
    
    						sb.Append(this._owner.ToString());
    					// Owner
    			sb.Append("`");
    
    		
    		return sb.ToString().ToLower().FarmhashCode64();
    }
            public virtual T CreateService<T>() 
    				 where T : IService
    		         {
                if (ObjectRegistry.ContainsObject("MMP-ServiceFactory"))
                {
                    var service_factory = (IServiceFactory)ObjectRegistry.GetObject("MMP-ServiceFactory",true);
                    return (T)service_factory.CreateByModel<NotificationLog>();
                }
                else
                   {
    					return (T)StaticServiceFactory.CreateByModel<NotificationLog>();			   
    				}
            }
    	protected const int LAST_PROTOBUF_MEMBER_INDEX=12;
    
    public virtual void ResetChanges(bool includeNavigations=false)
    {
        if(!includeNavigations){
            ChangeTracker.ResetChanges();
            return;
        }
    
        ResetChanges(new List<object>(), includeNavigations);
    }
    public virtual void ResetChanges(List<object> reseted_objects, bool includeNavigations=false)
    {
        if(reseted_objects.Contains(this)) return;
    
        ChangeTracker.ResetChanges();
         
        reseted_objects.Add(this);
    
           if(_instrument!=null && !reseted_objects.Contains(_instrument)) _instrument.ResetChanges(reseted_objects);
            if(_notification!=null && !reseted_objects.Contains(_notification)) _notification.ResetChanges(reseted_objects);
        }
    
    public virtual bool Equals(IEntityBase obj)
        {
    		bool result= this.Equals(obj, new List<object>());
    
    	return result;
    }   
    
    public virtual bool Equals(object other,List<object> checked_objects)
    {
    	if(checked_objects.Contains(this)) return true;
    	
    	checked_objects.Add(this);
    
        NotificationLog casted_other = other as NotificationLog;
    
    	if(casted_other==null) {
    		checked_objects.Remove(this);
    		return false;
    	}
    
             if(!Typing.IsEquals(this.NotificationLogPK,casted_other.NotificationLogPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.InsCode,casted_other.InsCode))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.PhoneNumber,casted_other.PhoneNumber))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Email,casted_other.Email))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NotificationDt,casted_other.NotificationDt))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.MessageBody,casted_other.MessageBody))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Status,casted_other.Status))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.NotificationPK,casted_other.NotificationPK))
    {
    		checked_objects.Remove(this);
    		return false;
    	}         if(!Typing.IsEquals(this.Owner,casted_other.Owner))
    {
    		checked_objects.Remove(this);
    		return false;
    	}    if(this.Instrument!= null) {
    if(!this.Instrument.Equals(casted_other.Instrument,checked_objects))
    {
    		checked_objects.Remove(this);
    		return false;
    	}}
    else
    if(casted_other.Instrument!= null) 
    {
    		checked_objects.Remove(this);
    		return false;
    	}if(this.Notification!= null) {
    if(!this.Notification.Equals(casted_other.Notification,checked_objects))
    {
    		checked_objects.Remove(this);
    		return false;
    	}}
    else
    if(casted_other.Notification!= null) 
    {
    		checked_objects.Remove(this);
    		return false;
    	}
    checked_objects.Remove(this);
    
    return true;
    }
    
        #region Metadata section
            [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
	    [System.Xml.Serialization.XmlIgnore]
    
        public virtual IEnumerable<IField> PrimaryKeys { get{ return GetPrimaryKeys(); } }
    
        public virtual IEnumerable<IField> GetFields ()
        {
                var array1 = GetPrimitiveFields();
                var array2 = GetNavigationFields();
                if(array1.Any() && array2.Any()) return array1.Union(array2);
                else if(array1.Any()) return array1;
                else if(array2.Any()) return array2;
                return null;
        }
    
        public virtual IEnumerable<IField> GetPrimaryKeys()
    {
          yield return new BaseField{Name= "NotificationLogPK", Kind = FieldKinds.Primitive,PropertyType =typeof(long),
    	IsIdentity=true
    	 };
    }
    
    public virtual Type GetFieldType(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null ? field.PropertyType: null;
    }
    
    public virtual bool HasField(string propertyName)
    {
        var field = GetFields().Where(x => x.Name == propertyName).FirstOrDefault();
        return field != null;
    }
    
    
        private static IEnumerable<IField> GetPrimitiveFields()
        {
            yield return new BaseField{Name= "NotificationLogPK", Kind = FieldKinds.PrimaryKey,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=true
        
         };
              yield return new BaseField{Name= "InsCode", Kind = FieldKinds.Primitive,PropertyType =typeof(long) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "PhoneNumber", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Email", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        ,Size=150
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "NotificationDt", Kind = FieldKinds.Primitive,PropertyType =typeof(System.DateTime) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "MessageBody", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=50
    	,Unicode=true
    	,FixedLength=false
    	,DefaultValue=""
        
         };
              yield return new BaseField{Name= "Status", Kind = FieldKinds.Primitive,PropertyType =typeof(Nullable<byte>) ,Nullable=true,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "NotificationPK", Kind = FieldKinds.Primitive,PropertyType =typeof(int) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        
         };
              yield return new BaseField{Name= "Owner", Kind = FieldKinds.Primitive,PropertyType =typeof(string) ,Nullable=false,TargetType =null,
    	IsIdentity=null
        ,Size=100
    	,Unicode=false
    	,FixedLength=false
    	,DefaultValue=""
        
         };
          	
        }
    
    
    
    private static IEnumerable<IField> GetNavigationFields()
    {
    
    
                
            yield return new BaseField{Name= "Instrument", Kind = FieldKinds.Navigational,PropertyType =typeof(Instrument),TargetType =typeof(Instrument)
            ,DependentProperty="InsCode",
    IsCollection=false
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.One
            };
    
    
                
            yield return new BaseField{Name= "Notification", Kind = FieldKinds.Navigational,PropertyType =typeof(Notification),TargetType =typeof(Notification)
            ,DependentProperty="NotificationPK",
    IsCollection=false
    ,FromEndMultiplicity = Multiplicities.Many
    ,ToEndMultiplicity = Multiplicities.One
            };
    }
    
    public virtual Expression GetPrimaryKeyPrediacate()
    {
        var vNotificationLogPK=(long)this.GetValue("NotificationLogPK");
        Expression<Func<NotificationLog,bool>> exp = p => p.NotificationLogPK == vNotificationLogPK ;
        return exp;        
    
    }
    
    public virtual object GetValue(string propertyName)
    {
        object retVal = null;
        switch(propertyName.ToLower())
        {
            case "notificationlogpk":
                retVal = this.NotificationLogPK;
                break;
            case "inscode":
                retVal = this.InsCode;
                break;
            case "phonenumber":
                retVal = this.PhoneNumber;
                break;
            case "email":
                retVal = this.Email;
                break;
            case "notificationdt":
                retVal = this.NotificationDt;
                break;
            case "messagebody":
                retVal = this.MessageBody;
                break;
            case "status":
                retVal = this.Status;
                break;
            case "notificationpk":
                retVal = this.NotificationPK;
                break;
            case "owner":
                retVal = this.Owner;
                break;
        	
            case "instrument":
                   retVal= this.Instrument;
            break;
            case "notification":
                   retVal= this.Notification;
            break;
                        default:
    							retVal=null;
    			            break;
        }
        return retVal;
    }
    
    		private Dictionary<string,object> __tags;
    		public virtual void AddTag(string key, object value)
            {
                if(__tags==null)__tags=new Dictionary<string,object>();
    			if(!__tags.ContainsKey(key)) __tags.Add(key,value);
            }  
    
    		public virtual object GetTag(string key)
            {
                if(__tags==null)return null;
    			if(!__tags.ContainsKey(key))return null;
    			return __tags[key];
            }
    
            public virtual object RemoveTag(string key)
            {
                if (__tags == null) return null;
                if (__tags.ContainsKey(key)){
    			var result= __tags[key];
                    __tags.Remove(key);
    				return result;
    			}
    			return  null;
            }
            public virtual bool HasKey()
            {
    			
    			return _notificationLogPK!=default(long);
            }
      
     public virtual void StartTracking()
            {
    		if(ChangeTracker.ChangeTrackingEnabled) return;
    		            ChangeTracker.ChangeTrackingEnabled = true;
                				if(Instrument!=null) Instrument.StartTracking();
                    				if(Notification!=null) Notification.StartTracking();
                            }
    
            public virtual void StopTracking()
            {
    		         ChangeTracker.ChangeTrackingEnabled = false;
                       }
    
    public virtual bool SetValue(string propertyName, object value)
    {
        switch(propertyName.ToLower())
        {
            case "notificationlogpk":
                this.NotificationLogPK =(long)value;
            break;
            case "inscode":
                this.InsCode =(long)value;
            break;
            case "phonenumber":
                this.PhoneNumber =(string)value;
            break;
            case "email":
                this.Email =(string)value;
            break;
            case "notificationdt":
                this.NotificationDt =(System.DateTime)value;
            break;
            case "messagebody":
                this.MessageBody =(string)value;
            break;
            case "status":
                this.Status =(Nullable<byte>)value;
            break;
            case "notificationpk":
                this.NotificationPK =(int)value;
            break;
            case "owner":
                this.Owner =(string)value;
            break;
    	
            case "instrument":
             this.Instrument =( Instrument) value;
            break;
            case "notification":
             this.Notification =( Notification) value;
            break;
                    default:
                                   return Exir.Framework.Common.Fasterflect.PropertyExtensions.TrySetPropertyValue(this, propertyName, value);
    			            break;
       }   
       return true;
    }
            
        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
     	[NonSerialized]
    
   private ObjectChangeTracker _changeTracker;
    	  [NotMapped]
    
        [ProtoIgnore]
    
        [Newtonsoft.Json.JsonIgnore]
    
        [Jil.JilDirective(Ignore =true)]
    
    [System.Xml.Serialization.XmlIgnore]
    
    public virtual ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                              _propertyChanged += new PropertyChangedEventHandler(delegate(object sender, PropertyChangedEventArgs e)
                        {
                        if(ChangeTracker.ChangeTrackingEnabled)
                            ChangeTracker.RecordPropertyChange(e.PropertyName);
                        });
          }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
           
    
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    	[NotMapped]
    
    protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
    
    public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    
    public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Instrument = null;
            Notification = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupInstrument(Instrument previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NotificationLogs.Contains(this))
            {
                previousValue.NotificationLogs.Remove(this);
            }
    
            if (Instrument != null)
            {
                if (!Instrument.NotificationLogs.Contains(this))
                {
                    Instrument.NotificationLogs.Add(this);
                }
    
                InsCode = Instrument.InsCode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Instrument")
                    && (ChangeTracker.OriginalValues["Instrument"] == Instrument))
                {
                    ChangeTracker.OriginalValues.Remove("Instrument");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Instrument", previousValue);
                }
                if (Instrument != null && !Instrument.ChangeTracker.ChangeTrackingEnabled)
                {
                    Instrument.StartTracking();
                }
            }
        }
    
        private void FixupNotification(Notification previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NotificationLogs.Contains(this))
            {
                previousValue.NotificationLogs.Remove(this);
            }
    
            if (Notification != null)
            {
                if (!Notification.NotificationLogs.Contains(this))
                {
                    Notification.NotificationLogs.Add(this);
                }
    
                NotificationPK = Notification.NotificationPK;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Notification")
                    && (ChangeTracker.OriginalValues["Notification"] == Notification))
                {
                    ChangeTracker.OriginalValues.Remove("Notification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Notification", previousValue);
                }
                if (Notification != null && !Notification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Notification.StartTracking();
                }
            }
        }

        #endregion

    }
}
