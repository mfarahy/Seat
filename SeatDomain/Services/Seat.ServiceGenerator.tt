<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>
<#
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    MetadataTools ef = new MetadataTools(this);
	 
    string inputFile = @"..\Dal\SeatDataModel.edmx";
    MetadataWorkspace metadataWorkspace = null;
    bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
    EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
    string namespaceName = code.VsNamespaceSuggestion();
	
	var fullCacheServicesList=File.ReadAllLines(Path.Combine(Host.ResolvePath(""),@"FullCacheServicesList.txt"));

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
    
    EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {        
	if(entity.Abstract) continue;

	
        string service_name=entity.Name+"Service";
        string service_file_name=service_name+".cs";

		bool isFullCache=fullCacheServicesList.Contains(entity.Name);
		string service_base_name= isFullCache?"ReadOnlySupportMemoryCachedService":"ReadOnlySupportAuditerService";
		string interface_name= isFullCache ? 
				String.Format("IReadOnlySupportMemoryCachedService<{0},IRepository<{0}>, IReadOnlyRepository<{0}>,I{0}Service>",entity.Name):
				String.Format("IAuditerService<{0}>",entity.Name);

        string current_directory=Host.ResolvePath("");
        string[] similars=Directory.GetFiles(current_directory,service_file_name, SearchOption.AllDirectories);
		bool file_exists = !(similars.Length==0 ||
            (similars.Length==1 && String.Compare(similars[0],current_directory+"\\"+ service_file_name,true)==0));

		bool generate_file=!file_exists;
		if(file_exists){
            generate_file=true;
            foreach(var file in similars){
                var file_content=File.ReadAllText(file);
                if(file_content.IndexOf("[IgnoreT4Template]")>=0){
                    generate_file=false;
                    break;
                }
            }
		}
		if(file_exists && !generate_file)continue;
		if(isFullCache || generate_file)
        {

            fileManager.StartNewFile(service_file_name);
            BeginNamespace(namespaceName, code);
           
#>
<#
            var baseType=entity.BaseType;
            while(baseType!=null){      
                if(baseType.BaseType!=null)
                baseType=baseType.BaseType;
                else
                    break;
            }
#>
using Exir.Framework.Common;
using Exir.Framework.Service;
using SeatDomain.Models;
using Exir.Framework.Service.Auditer;

public partial interface I<#=service_name #>: <#=interface_name#> {}

public partial class <#=service_name #> : <#=service_base_name #><<#=code.Escape(entity) #>,IRepository<<#=code.Escape(entity) #>>, IReadOnlyRepository<<#=code.Escape(entity) #>>,I<#=service_name #>>,I<#=service_name #>
    {
	
	protected new I<#=service_name #> This{get{return base.This<I<#=service_name #>>();}} 

	<# if(!file_exists){#>
			public <#=service_name #>(IRepository<<#=code.Escape(entity) #>> repository, IReadOnlyRepository<<#=code.Escape(entity) #>> readOnlyRepository): base(repository, readOnlyRepository)
            {
            }

			<#}#>
    }

<#  
        EndNamespace(namespaceName);    
  } // check file exists
 
	 }
	 fileManager.Process(); 
#>

       

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Exir.Framework.Common;
using Exir.Framework.Service;
using SeatDomain.Models;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>